/*
 * ============LICENSE_START========================================================================
 * ONAP : ccsdk feature sdnr wt
 * =================================================================================================
* Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved
* =================================================================================================
 * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.
 * Copyright (C) 2021 Samsung Electronics Intellectual Property. All rights reserved.
 * =================================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 * ============LICENSE_END==========================================================================
 */

package org.onap.ccsdk.features.sdnr.wt.mountpointregistrar.vesdomain.fault;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.time.Instant;
import java.time.ZoneId;
import java.util.Map;

import org.onap.ccsdk.features.sdnr.wt.mountpointregistrar.config.GeneralConfig;
import org.onap.ccsdk.features.sdnr.wt.mountpointregistrar.impl.StrimziKafkaVESMsgConsumerImpl;
import org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.data.provider.rev201110.SeverityType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StrimziKafkaFaultVESMsgConsumer extends StrimziKafkaVESMsgConsumerImpl {

    private static final Logger LOG = LoggerFactory.getLogger(StrimziKafkaFaultVESMsgConsumer.class);

    public StrimziKafkaFaultVESMsgConsumer(GeneralConfig generalConfig) {
        super(generalConfig);
    }

    @Override
    public void processMsg(String msg) throws Exception {
        String faultNodeId;
        long faultOccurrenceTime;
        String faultObjectId;
        String faultReason;
        String faultSeverity;
        String eventId;
        String vesDomain;
        String priority;
        int faultSequence;
        String sourceId;
        String eventName;
        String reportingEntityName;
        String timeZone;
        String vesVersion;
        String sourceType;
        String vfStatus;
        String alarmCondition;
        long lastEpoch;
        String alarmId;
        String alarmAction;
        int Version;
        String Domain;
        String sourceName;
        int Faultver;
        
        ObjectMapper oMapper = new ObjectMapper();
        JsonNode sKafkaMessageRootNode;

        LOG.info("Fault VES Message is - {}", msg);
        try {
        	sKafkaMessageRootNode = oMapper.readTree(msg);
            reportingEntityName = sKafkaMessageRootNode.at("/event/commonEventHeader/reportingEntityName").textValue();
            if (reportingEntityName.equals("ONAP SDN-R")) {
                LOG.info(
                        "VES Fault message generated by SDNR, hence no need to process any further; Ignoring the received message");
                return;
            }

            vesDomain = sKafkaMessageRootNode.at("/event/commonEventHeader/domain").textValue();
            if (!vesDomain.equalsIgnoreCase("fault")) {
                LOG.warn("Received {} domain VES Message in Kafka Fault topic, ignoring it", vesDomain);
                return;
            }
            faultNodeId = sKafkaMessageRootNode.at("/event/commonEventHeader/sourceName").textValue();
            
            faultOccurrenceTime =sKafkaMessageRootNode.at("/event/commonEventHeader/startEpochMicrosec").longValue();
            LOG.info("faultOccurrenceTime" + faultOccurrenceTime);
            faultObjectId = sKafkaMessageRootNode.at("/event/faultFields/alarmInterfaceA").textValue();
            faultReason = sKafkaMessageRootNode.at("/event/faultFields/specificProblem").textValue();
            faultSeverity = sKafkaMessageRootNode.at("/event/faultFields/eventSeverity").textValue();
            faultSequence = sKafkaMessageRootNode.at("/event/commonEventHeader/sequence").intValue();
            eventId = sKafkaMessageRootNode.at("/event/commonEventHeader/eventId").textValue();
            eventName = sKafkaMessageRootNode.at("/event/commonEventHeader/eventName").textValue();
            priority = sKafkaMessageRootNode.at("/event/commonEventHeader/priority").textValue();
            sourceId = sKafkaMessageRootNode.at("/event/commonEventHeader/sourceId").textValue();
            timeZone = sKafkaMessageRootNode.at("/event/commonEventHeader/timeZoneOffset").textValue();
            vesVersion = sKafkaMessageRootNode.at("/event/commonEventHeader/vesEventListenerVersion").textValue();
            sourceType = sKafkaMessageRootNode.at("/event/faultFields/eventSourceType").textValue();
            vfStatus = sKafkaMessageRootNode.at("/event/faultFields/vfStatus").textValue();
            alarmCondition = sKafkaMessageRootNode.at("/event/faultFields/alarmCondition").textValue();
            lastEpoch = sKafkaMessageRootNode.at("/event/commonEventHeader/lastEpochMicrosec").longValue();
            alarmId = sKafkaMessageRootNode.at("/event/faultFields/alarmAdditionalInformation/alarmId").textValue();
            alarmAction = sKafkaMessageRootNode.at("/event/faultFields/alarmAdditionalInformation/AlarmAction").textValue();
            
            Version = sKafkaMessageRootNode.at("/event/commonEventHeader/version").intValue();
            Faultver = sKafkaMessageRootNode.at("/event/faultFields/faultFieldsVersion").intValue();
            LOG.info("Version, Faultver {} {} ",Version,Faultver);
            if (faultSeverity.equalsIgnoreCase("critical")) {
                faultSeverity = SeverityType.Critical.toString();
            } else if (faultSeverity.equalsIgnoreCase("major")) {
                faultSeverity = SeverityType.Major.toString();
            } else if (faultSeverity.equalsIgnoreCase("minor")) {
                faultSeverity = SeverityType.Minor.toString();
            } else if (faultSeverity.equalsIgnoreCase("warning")) {
                faultSeverity = SeverityType.Warning.toString();
            } else if (faultSeverity.equalsIgnoreCase("nonalarmed")) {
                faultSeverity = SeverityType.NonAlarmed.toString();
            } else {
                faultSeverity = SeverityType.NonAlarmed.toString();
            }
            
            if (vfStatus.equalsIgnoreCase("Active")) {
                vfStatus = "ACTIVE";
            } else if (faultSeverity.equalsIgnoreCase("idle")) {
                vfStatus = "IDLE";
            } else if (faultSeverity.equalsIgnoreCase("Preparing to terminate")) {
                vfStatus = "PREPARING_TO_TERMINATE";
            } else if (faultSeverity.equalsIgnoreCase("Ready to terminate")) {
                vfStatus = "READY_TO_TERMINATE";
            } else if (faultSeverity.equalsIgnoreCase("Requesting Termination")) {
                vfStatus = "REQUEST_TERMINATION";
            } else {
                vfStatus = "ACTIVE";
            }

            String baseUrl = getBaseUrl();
            String sdnrUser = getSDNRUser();
            String sdnrPasswd = getSDNRPasswd();

            Map<String, String> payloadMapMessage = FaultNotificationClient.createFaultNotificationPayloadMap(faultNodeId,Integer.toString(1)
                    , Long.toString(faultOccurrenceTime), faultObjectId, faultReason, faultSeverity, eventId, eventName,priority, sourceId, reportingEntityName,timeZone,vesVersion,sourceType,vfStatus,alarmCondition,Long.toString(lastEpoch),alarmId,alarmAction,Integer.toString(faultSequence),Integer.toString(Version),vesDomain,Integer.toString(Faultver),Long.toString(System.currentTimeMillis()*1000));
            
            FaultNotificationClient faultClient = new FaultNotificationClient(baseUrl);
            LOG.debug("Setting RESTConf Authorization values - {} : {}", sdnrUser, sdnrPasswd);
            faultClient.setAuthorization(sdnrUser, sdnrPasswd);
            String message = faultClient.prepareMessageFromPayloadMap(payloadMapMessage);
            faultClient.sendNotification(message);

        } catch (IOException e) {
            LOG.info("Cannot parse json object ");
            throw new Exception("Cannot parse json object", e);
        }
    }

}
