/*
 * ============LICENSE_START========================================================================
 * ONAP : ccsdk feature sdnr wt
 * =================================================================================================
* Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved
* =================================================================================================
 * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.
 * Copyright (C) 2021 Samsung Electronics Intellectual Property. All rights reserved.
 * =================================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 * ============LICENSE_END==========================================================================
 */

package org.onap.ccsdk.features.sdnr.wt.mountpointregistrar.vesdomain.fileready;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

import org.onap.ccsdk.features.sdnr.wt.mountpointregistrar.config.GeneralConfig;
import org.onap.ccsdk.features.sdnr.wt.mountpointregistrar.impl.StrimziKafkaVESMsgConsumerImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.onap.ccsdk.features.sdnr.wt.mountpointregistrar.impl.FTPClient;

public class FileReadyVESMsgConsumer extends StrimziKafkaVESMsgConsumerImpl {

    private static final Logger LOG = LoggerFactory.getLogger(FileReadyVESMsgConsumer.class);

    public FileReadyVESMsgConsumer(GeneralConfig generalConfig) {
        super(generalConfig);
        LOG.info("FileReadyVESMsgConsumer started successfully");
    }

    @Override
    public void processMsg(String msg) throws Exception {
        String vesDomain;
        String reportingEntityName;
        ObjectMapper oMapper = new ObjectMapper();
        JsonNode sKafkaMessageRootNode;

        LOG.info("Fileready VES Message is - {}", msg);
        try {
            sKafkaMessageRootNode = oMapper.readTree(msg);
            LOG.info(">>>>>>  sKafkaMessageRootNode : {} ", sKafkaMessageRootNode);
            reportingEntityName = sKafkaMessageRootNode.at("/event/commonEventHeader/reportingEntityName").textValue();
            if (reportingEntityName.equals("ONAP SDN-R")) {
                LOG.info(
                        "VES Fault message generated by SDNR, hence no need to process any further; Ignoring the received message");
                return;
            }
            vesDomain = sKafkaMessageRootNode.at("/event/commonEventHeader/domain").textValue();
            if (!vesDomain.equalsIgnoreCase("notification")) {
                LOG.warn("Received {} domain VES Message in Kafka not Notification topic, ignoring it", vesDomain);
                return;
            }

            String sftpPath = sKafkaMessageRootNode.get("event").get("notificationFields").get("arrayOfNamedHashMap")
                    .get(0).get("hashMap").get("location").asText();
            String sftpFile = sKafkaMessageRootNode.get("event").get("notificationFields").get("arrayOfNamedHashMap")
                    .get(0).get("name").asText();
            LOG.info(">>>>>>  sftpPath : {} ", sftpPath);
            LOG.info(">>>>>>   sftp sftpFile  : {} ", sftpFile);
            String[] sftpPathparts = sftpPath.split(":");

            String susername = sftpPathparts[1].replace("//", "").trim();
            String spassword = sftpPathparts[2].split("@")[0].trim();
            String shost = sftpPathparts[2].split("@")[1].trim();
            String sremotePath = sftpPathparts[3].replace("22", "").trim();
            LOG.info(">>>>>>   sftp username  : {} ", susername);
            LOG.info(">>>>>>   sftp password  : {} ", spassword);
            LOG.info(">>>>>>   sftp Host(IP)  : {} ", shost);
            LOG.info(">>>>>>   sftp remote path : {} ", sremotePath);

            String s = System.getProperty("user.dir");
            // System.out.println("<<<< Working Directory = " +
            // System.getProperty("user.dir"));
            LOG.info("Current absolute path is: " + s);

            File dir = new File(s + "/MeasurementFiles");
            String localPath = "";
            LOG.info("Current absolute path MeasurementFiles with  is: " + s + "/MeasurementFiles");
            // System.out.println("Current absolute path MeasurementFiles with is: " +
            // s+"/MeasurementFiles");
            if (dir.exists()) {
                localPath = dir + "/";
            }
            if (dir.mkdirs()) {
                localPath = dir + "/";
            }

            FTPClient ftp = new FTPClient();
            /// DownLoad File
            ftp.download(sremotePath, localPath, shost, 22, susername, spassword);

            String  dhost = "";
            String dusername ="";
            String dpassword = "";
            String dremotePath = "";
            try {
                //LOG.info(s + "/etc/mountpoint-registrar.properties");
                //File file = new File(s + "/etc/mountpoint-registrar.properties");
                //LOG.info(" File exits : {} ", file.exists());
                //LOG.info(" File Can read : {} ", file.canRead());
                //Properties pro = new Properties();
                //FileInputStream fin = new FileInputStream(file);
                //pro.load(fin);
                 dhost = System.getenv("FILE_UPLOAD_SRVIP");
                 dusername = System.getenv("PM_USERID");
                 dpassword = System.getenv("PM_USERPASWD");
                 dremotePath = System.getenv("PM_FILE_UPLOADPATH");
                 LOG.info("RN-EMS: File Upload details host : {} ,username : {}, password : {}, path : {} ", dhost, dusername,
                        dpassword, dremotePath);
            } catch (Exception ex) {
                LOG.error("Exception in Properties read  {} ", ex.getMessage());
            }

            /// UpLoad File
            // ftp = new FTPClient("192.168.129.70", 22, "manish", "Test@123");
            ftp.upload(localPath + sftpFile,dremotePath, dhost, 22, dusername, dpassword);

        } catch (IOException e) {
            LOG.info("Cannot parse json object ");
            throw new Exception("Cannot parse json object", e);
        }
    }

}
