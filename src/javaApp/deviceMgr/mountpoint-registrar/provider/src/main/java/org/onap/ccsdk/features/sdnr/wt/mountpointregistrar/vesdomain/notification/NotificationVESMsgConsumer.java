/*
 * ============LICENSE_START========================================================================
 * ONAP : ccsdk feature sdnr wt
 * =================================================================================================
* Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved
* =================================================================================================
 * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.
 * Copyright (C) 2021 Samsung Electronics Intellectual Property. All rights reserved.
 * =================================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 * ============LICENSE_END==========================================================================
 */

package org.onap.ccsdk.features.sdnr.wt.mountpointregistrar.vesdomain.notification;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;
import org.apache.http.client.methods.HttpPost;
import org.onap.ccsdk.features.sdnr.wt.mountpointregistrar.config.GeneralConfig;
import org.onap.ccsdk.features.sdnr.wt.mountpointregistrar.impl.StrimziKafkaVESMsgConsumerImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.http.entity.StringEntity;

import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;

public class NotificationVESMsgConsumer extends StrimziKafkaVESMsgConsumerImpl {

    private static final Logger LOG = LoggerFactory.getLogger(NotificationVESMsgConsumer.class);

    public NotificationVESMsgConsumer(GeneralConfig generalConfig) {
        super(generalConfig);
        LOG.info("NotificationVESMsgConsumer started successfully");
    }

     String  proxyApiUrl = "http://sdnc-web:3005/proxyapi";
    

    public class notificationEvent {
        private String status;
        private String result;
        private String event;
        private String sectorId;
        private String deviceType;
        private String Error_MSG;
         // Getters and Setters for the fields
        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }

        public String getResult() {
            return result;
        }

        public void setResult(String result) {
            this.result = result;
        }

        public void setSectorId(String SectorId) {
            this.sectorId = SectorId;
        }
        public void setDeviceType(String DeviceType) {
            this.deviceType = DeviceType;
        }
        public String getSectorId() {
            return sectorId;
        }
        public String getDeviceType() {
            return deviceType;
        }
        public String getEvent() {
            return event;
        }

         public void setError_Msg(String msg) {
            this.Error_MSG = msg;
        }

        public String getError_Msg() {
            return Error_MSG;
        }

    public void setEvent(String event) {
        this.event = event;
        }
    }
    @Override
    public void processMsg(String msg) throws Exception {
        String vesDomain;
        String chnageIdentfier;
        String reportingEntityName;
        ObjectMapper oMapper = new ObjectMapper();
        JsonNode sKafkaMessageRootNode;
        String url = proxyApiUrl+"/softwaremanagement";
        HttpPost httpPost= new HttpPost(url);
        HttpResponse httpResponse;

        StringBuffer response = new StringBuffer();

        try {
            sKafkaMessageRootNode = oMapper.readTree(msg);
            reportingEntityName = sKafkaMessageRootNode.at("/event/commonEventHeader/reportingEntityName").textValue();
            if (reportingEntityName.equals("ONAP SDN-R")) {
                LOG.info(
                        "VES Fault message generated by SDNR, hence no need to process any further; Ignoring the received message");
                return;
            }
            vesDomain = sKafkaMessageRootNode.at("/event/commonEventHeader/domain").textValue();
            if (!vesDomain.equalsIgnoreCase("notification")) {
                LOG.error("Received {} domain VES Message in Kafka not Notification topic, ignoring it", vesDomain);
                return;
            }
            chnageIdentfier = sKafkaMessageRootNode.at("/event/notificationFields/changeIdentifier").textValue();
            if (chnageIdentfier.equalsIgnoreCase("PM_MEAS_FILES")) {
                LOG.info("Received {} PM Notification Ignoring it",chnageIdentfier);
                return;
            }

            notificationEvent notificationEvt = new notificationEvent();
            notificationEvt.setEvent(sKafkaMessageRootNode.at("/event/notificationFields/additionalFields/event").textValue());
            notificationEvt.setStatus(sKafkaMessageRootNode.at("/event/notificationFields/additionalFields/status").textValue());
            notificationEvt.setResult(sKafkaMessageRootNode.at("/event/notificationFields/additionalFields/result").textValue());
            notificationEvt.setSectorId(sKafkaMessageRootNode.at("/event/notificationFields/additionalFields/sector-id").textValue());
            notificationEvt.setDeviceType(sKafkaMessageRootNode.at("/event/notificationFields/additionalFields/device-type").textValue());
            notificationEvt.setError_Msg(sKafkaMessageRootNode.at("/event/notificationFields/additionalFields/specificProblem").textValue());
            httpPost.setHeader("Accept", "application/json");
            httpPost.setHeader("Content-type", "application/json");
            CloseableHttpClient httpClient = HttpClients.createDefault();

            LOG.info("<<<<<<< software management notificationEvt.getDeviceType():"+ notificationEvt.getDeviceType()); 
            LOG.info("<<<<<<< software management notificationEvt.getSectorId():"+ notificationEvt.getSectorId()); 

           // String jsonPayload = "{\"NodeId\":\""+reportingEntityName+"\",\"Event\":\""+notificationEvt.getEvent()+"\",\"Status\":"+"\""+notificationEvt.getStatus()+"\",\"Result\":\""+notificationEvt.getResult()+"\"}";
             String devideType= notificationEvt.getDeviceType() == null  ? "gNodeB" : notificationEvt.getDeviceType();
            
            LOG.info("<<<<<<< software management devideType:"+ devideType); 

           String sectorId= notificationEvt.getSectorId() == null  ? "NA" : notificationEvt.getSectorId();
           LOG.info("<<<<<<< software management sectorId:"+ sectorId); 

           String jsonPayload = "{\"NodeId\":\""+reportingEntityName+"\",\"Event\":\""+notificationEvt.getEvent() +"\",\"DeviceType\":\""+devideType+"\",\"SectorID\":\""+sectorId+"\",\"Status\":"+"\""+notificationEvt.getStatus()+"\",\"Error_msg\":"+"\""+notificationEvt.getError_Msg()+"\",\"Result\":\""+notificationEvt.getResult()+"\"}";
           LOG.info("<<<<<<< software management jsonPayload : "+ jsonPayload); 
           StringEntity entity = new StringEntity(jsonPayload);
            // LOG.info("<<<<<<< software management payload:"+ entity);
            entity.setContentType("application/json");
            httpPost.setEntity(entity);

	    httpResponse = httpClient.execute(httpPost);
	    LOG.info("<<<< Software Management : Response status code : {}", httpResponse.getStatusLine().getStatusCode());
        LOG.info("<<<< Software Management : Response Message : {}", httpResponse.getStatusLine().toString());
            

	    //send message to store data in ES    
            } catch (Exception ex) {
                LOG.error("Exception in Properties read  {} ", ex.getMessage());
	    }
    }
}
