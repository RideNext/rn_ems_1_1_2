{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/delegated ./actions/navigationActions.ts from dll-reference app","webpack://[name]/delegated ./components/material-table/index.tsx from dll-reference app","webpack://[name]/delegated ./components/material-table/utilities.ts from dll-reference app","webpack://[name]/delegated ./flux/action.ts from dll-reference app","webpack://[name]/delegated ./flux/connect.tsx from dll-reference app","webpack://[name]/delegated ./flux/middleware.ts from dll-reference app","webpack://[name]/delegated ./services/applicationManager.ts from dll-reference app","webpack://[name]/delegated ./services/notificationService.ts from dll-reference app","webpack://[name]/delegated ./services/restService.ts from dll-reference app","webpack://[name]/delegated ./utilities/elasticSearch.ts from dll-reference app","webpack://[name]/delegated ./utilities/yangHelper.ts from dll-reference app","webpack://[name]/delegated ../../node_modules/@babel/runtime/helpers/interopRequireDefault.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@fortawesome/free-solid-svg-icons/index.es.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@fortawesome/react-fontawesome/index.es.js from dll-reference app","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/node_modules/@mui/icons-material/AddComment.js","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/node_modules/@mui/icons-material/ContentCopy.js","webpack://[name]/delegated ../../node_modules/@mui/icons-material/ExpandLess.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@mui/icons-material/ExpandMore.js from dll-reference app","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/node_modules/@mui/icons-material/HighlightOff.js","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/node_modules/@mui/icons-material/InfoOutlined.js","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/node_modules/@mui/icons-material/Refresh.js","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/node_modules/@mui/icons-material/RemoveDone.js","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/node_modules/@mui/icons-material/TaskAlt.js","webpack://[name]/delegated ../../node_modules/@mui/icons-material/utils/createSvgIcon.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@mui/material/Button/index.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@mui/material/Dialog/index.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@mui/material/DialogActions/index.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@mui/material/DialogContent/index.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@mui/material/DialogContentText/index.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@mui/material/DialogTitle/index.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@mui/material/Tooltip/index.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@mui/material/Typography/index.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@mui/material/index.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@mui/styles/createStyles/index.js from dll-reference app","webpack://[name]/delegated ../../node_modules/@mui/styles/withStyles/index.js from dll-reference app","webpack://[name]/delegated ../../node_modules/axios/index.js from dll-reference app","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/node_modules/chart.js/auto/auto.mjs","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/node_modules/chart.js/dist/chart.mjs","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/node_modules/chart.js/dist/chunks/helpers.segment.mjs","webpack://[name]/delegated ../../node_modules/core-js/modules/web.dom.iterable.js from dll-reference app","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/node_modules/react-chartjs-2/dist/index.modern.js","webpack://[name]/delegated ../../node_modules/react-router-dom/esm/react-router-dom.js from dll-reference app","webpack://[name]/delegated ../../node_modules/react/index.js from dll-reference app","webpack://[name]/delegated ../../node_modules/react/jsx-runtime.js from dll-reference app","webpack://[name]/delegated ../../node_modules/regenerator-runtime/runtime.js from dll-reference app","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/apps/configurationApp/src/services/configurationrestServices.ts","webpack://[name]//home/rnsaankhya/Tejas-Backups/rm_ems_1_1_m/rn-ems/src/userIntf/code/odlux/apps/configurationApp/src/services/yangService.ts","webpack://[name]/./actions/clearStuckAlarmsAction.ts","webpack://[name]/./actions/notificationActions.ts","webpack://[name]/./actions/panelChangeActions.ts","webpack://[name]/./actions/statusActions.ts","webpack://[name]/./assets/icons/faultAppIcon.svg","webpack://[name]/./components/clearStuckAlarmsDialog.tsx","webpack://[name]/./components/dashboardHome.tsx","webpack://[name]/./components/faultStatus.tsx","webpack://[name]/./components/refreshAlarmLogDialog.tsx","webpack://[name]/./components/refreshCurrentAlarmsDialog.tsx","webpack://[name]/./handlers/alarmLogEntriesHandler.ts","webpack://[name]/./handlers/currentAlarmsHandler.ts","webpack://[name]/./handlers/faultAppRootHandler.ts","webpack://[name]/./handlers/faultStatusHandler.ts","webpack://[name]/./handlers/notificationsHandler.ts","webpack://[name]/./pluginFault.tsx","webpack://[name]/./services/faultStatusService.ts","webpack://[name]/./views/faultApplication.tsx","webpack://[name]/external \"app\""],"names":[],"mappings":"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ACA;AACA;AACqkE;AACxgE;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6DAAgB;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,eAAe,qEAAK;AACpB,2BAA2B,qEAAK;AAChC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qEAAO;AAChB,iBAAiB,qEAAO;AACxB;AACA;AACA,mBAAmB,6DAAO,gBAAgB,6DAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qEAAO;AACxB,mBAAmB,qEAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B,KAAK;AACL;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA,6DAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,qCAAqC,6DAAQ;AAC7C,6DAAQ;AACR;AACA;AACA;AACA,CAAC;AACD,6DAAQ;AACR;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD,6DAAQ;AACR;AACA,CAAC;AACD,6DAAQ;AACR;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qEAAQ;AACjB;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,qEAAO;AACd;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY,gCAAgC;AAC3F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAQ;AACd;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAc,+CAA+C,qEAAI,YAAY,qEAAI;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc,GAAG,cAAc,GAAG,wBAAwB;AACtE;AACA;AACA,SAAS,iCAAiC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,yBAAyB;AAClC,qDAAqD;AACrD,SAAS,oCAAoC;AAC7C;AACA;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA,WAAW,+BAA+B;AAC1C,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qEAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qEAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;AAC/E;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qEAAc;AAC7C,+BAA+B,qEAAc;AAC7C,+BAA+B,qEAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAmB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA,KAAK;AACL;AACA,QAAQ,qEAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,+BAA+B;AAC1C,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,UAAU,qEAAO;AACjB;AACA,OAAO,UAAU,qEAAQ;AACzB;AACA,OAAO;AACP;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,+BAA+B;AAC1C;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA,wBAAwB,qEAAgB;AACxC,wBAAwB,qEAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,KAAK;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,WAAW,6BAA6B;AACxC;AACA;AACA;AACA;AACA,cAAc,qEAAc;AAC5B;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,UAAU;AAC/C;AACA,UAAU,qEAAc;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,qEAAO;AACvD;AACA;AACA;AACA;AACA;AACA,kCAAkC,YAAY;AAC9C;AACA,8BAA8B,6DAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,WAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,UAAU;AACzD;AACA;AACA,wBAAwB,qEAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAO;AACf;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAa;AACnB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAO;AACb;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,SAAS,iCAAiC;AAC1C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,+BAA+B;AAC1C;AACA;AACA;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA,uCAAuC,qEAAgB;AACvD,6BAA6B,qEAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB,QAAQ;AACxC;AACA;AACA;AACA,WAAW,8BAA8B;AACzC,uBAAuB,mBAAmB;AAC1C;AACA,+BAA+B,qEAAa,yBAAyB,iBAAiB;AACtF;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,qEAAa;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc,iBAAiB,YAAY,+BAA+B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAI,YAAY,qEAAI;AAC7C;AACA;AACA;AACA;AACA,wBAAwB,qEAAa;AACrC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qEAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,UAAU;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA,0BAA0B,qEAAc;AACxC;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA,0BAA0B,qEAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,8BAA8B;AACzC;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW,eAAe;AACzD;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6DAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qEAAa;AAClD,qCAAqC,qEAAa;AAClD;AACA,yBAAyB,6DAAO;AAChC,yBAAyB,6DAAE;AAC3B,yBAAyB,6DAAE,GAAG,6DAAO;AACrC;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,UAAU,qEAAQ;AAClB,eAAe,cAAc;AAC7B,yBAAyB,qEAAgB;AACzC;AACA;AACA,2CAA2C,UAAU;AACrD;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAS;AACpB;AACA;AACA,WAAW,qEAAS;AACpB;AACA;AACA,cAAc,6DAAG;AACjB,eAAe,6DAAG;AAClB,mBAAmB,qCAAqC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA,4BAA4B,qEAAY;AACxC;AACA,WAAW,wBAAwB;AACnC,WAAW,iCAAiC;AAC5C;AACA;AACA;AACA,wBAAwB,qEAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,6DAAG;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,8BAA8B;AACzC;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,6DAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,UAAU;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,cAAc,qEAAO;AACrB;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,2CAA2C;AACtD;AACA,SAAS,aAAa,GAAG,qEAAgC;AACzD;AACA;AACA,QAAQ,qEAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,WAAW,mCAAmC;AAC9C,WAAW,8BAA8B;AACzC;AACA;AACA,WAAW,kBAAkB;AAC7B,yBAAyB,qEAAQ;AACjC;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,qEAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,6DAA2B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,6DAAE;AAC/D;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,QAAQ,qEAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,6DAA2B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY;AACZ;AACA;AACA,WAAW,qEAAQ,YAAY,qEAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,qEAAO;AAClB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAAK;AAC1B;AACA,qBAAqB;AACrB;AACA,WAAW,qEAAY;AACvB,GAAG;AACH;AACA;AACA;AACA;AACA,wDAAwD,qEAAK;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,6DAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,6DAAQ;AACR,6DAAQ;AACR,6DAAQ;AACR,6DAAQ;AACR,6DAAQ;AACR;AACA;AACA;AACA,CAAC;AACD,6DAAQ;AACR;AACA,CAAC;AACD,6DAAQ;AACR;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qEAAa;AAChD,2CAA2C,UAAU;AACrD;AACA;AACA,yCAAyC,qEAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAU;AAC5B,4CAA4C,UAAU;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAc;AAC9B,uBAAuB,qEAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,SAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,qEAAI;AACN;AACA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qEAAM;AACrB,kBAAkB,qEAAS;AAC3B,gBAAgB,qEAAO;AACvB;AACA;AACA;AACA,SAAS,qEAAa;AACtB;AACA;AACA,GAAG;AACH;AACA;AACA,SAAS,qEAAa;AACtB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,YAAY,qEAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gCAAgC;AACzC,SAAS,kBAAkB;AAC3B;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAc;AAC3B,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,aAAa,qEAAc;AAC3B,sCAAsC,6DAAO,GAAG,6DAAO;AACvD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iDAAiD;AAC1D,eAAe,qEAAe;AAC9B,eAAe,qEAAe;AAC9B,oBAAoB,qEAAe;AACnC,oBAAoB,qEAAe;AACnC;AACA,WAAW,qEAAe;AAC1B,WAAW,qEAAe;AAC1B,kBAAkB,qEAAc;AAChC,kBAAkB,qEAAc;AAChC;AACA;AACA;AACA,SAAS,iCAAiC;AAC1C;AACA;AACA,cAAc;AACd;AACA;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAe,MAAM,qEAAe;AAC/C,WAAW,qEAAe,MAAM,qEAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,WAAW,oCAAoC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA,mBAAmB,qEAAQ;AAC3B;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qEAAS;AAC/B,kBAAkB,qEAAW;AAC7B,kBAAkB,qEAAW,mDAAmD,qEAAW;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB,mDAAmD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA,6BAA6B,qEAAS;AACtC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ,eAAe,WAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C,UAAU,qEAAa;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,+BAA+B;AAC1C;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA,0DAA0D,QAAQ;AAClE;AACA;AACA,WAAW,qEAAa,YAAY,qEAAO;AAC3C,gBAAgB,qEAAY;AAC5B;AACA,OAAO,UAAU,qEAAO;AACxB,wCAAwC,UAAU;AAClD;AACA,eAAe,qEAAa,kBAAkB,qEAAO;AACrD,oBAAoB,qEAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mDAAmD;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAW,uBAAuB,qEAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO,UAAU,qEAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO,UAAU,qEAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAc;AAChC;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAW;AACpC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC;AACA;AACA,WAAW,mCAAmC;AAC9C;AACA;AACA;AACA,sBAAsB,qEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO,UAAU,qEAAQ;AACzB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO,UAAU,qEAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B,sBAAsB,qEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW,kBAAkB,6BAA6B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,KAAK;AACL,cAAc;AACd;AACA;AACA;AACA,WAAW,eAAe,gBAAgB,2BAA2B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,UAAU;AAChD;AACA;AACA;AACA,aAAa,uBAAuB;AACpC,aAAa,uBAAuB;AACpC;AACA;AACA;AACA;AACA;AACA,aAAa,yBAAyB;AACtC,aAAa,yBAAyB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB,MAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAW;AACtB,WAAW,qEAAW;AACtB;AACA,KAAK;AACL,WAAW,qEAAW;AACtB,WAAW,qEAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAQ;AACd;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAU;AAChB;AACA;AACA,MAAM,qEAAU;AAChB;AACA;AACA;AACA,WAAW,eAAe,0BAA0B;AACpD;AACA;AACA;AACA,iBAAiB,qEAAM;AACvB,oBAAoB,qEAAS;AAC7B;AACA;AACA,0DAA0D,qEAAQ;AAClE;AACA,UAAU,qEAAO;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,mCAAmC;AAC9C,IAAI,qEAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qEAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAM;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,6DAAQ;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAQ;AAC/B,aAAa,6DAAQ;AACrB;AACA,eAAe,6DAAS;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAK;AAC5B,kBAAkB,6DAAQ,sBAAsB;AAChD,IAAI,6DAAQ;AACZ;AACA;AACA,EAAE,6DAAQ;AACV;AACA;AACA;AACA;AACA,IAAI,6DAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6DAAQ;AACZ,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,QAAQ,qEAAI;AACZ;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,wBAAwB,qEAAW;AACnC,IAAI,qEAAQ;AACZ;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,mBAAmB,kCAAkC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B;AACA,SAAS,aAAa,GAAG,qEAAgC;AACzD;AACA;AACA,QAAQ,qEAAmB;AAC3B;AACA;AACA;AACA;AACA,aAAa,wBAAwB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mCAAmC;AAC9C;AACA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,yBAAyB,qEAAQ;AACjC;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,qEAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,0BAA0B;AACnC;AACA;AACA,iDAAiD,6DAAa,GAAG,6DAAY;AAC7E;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,yCAAyC,UAAU;AACnD,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qEAAc;AAC5C;AACA;AACA;AACA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,WAAW,MAAM,GAAG,sEAAiB,WAAW,6BAA6B;AAC7E,QAAQ,qEAAa;AACrB,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6BAA6B;AAC7C;AACA,KAAK;AACL,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6BAA6B;AAC/C;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yCAAyC;AAClE;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA,uBAAuB,qEAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC,sBAAsB,yCAAyC;AAC/D;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,qEAAmB;AAC1C;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,qEAAmB;AAC1C;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,qEAAmB;AAC1C;AACA,KAAK;AACL;AACA,uBAAuB,qEAAmB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,0CAA0C,UAAU;AACpD;AACA,MAAM,yBAAyB,wBAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC;AACA;AACA;AACA,sDAAsD,wCAAwC;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,4BAA4B;AACrC;AACA,oCAAoC,UAAU;AAC9C;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS;AAClB;AACA,OAAO,qEAAQ;AACf;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAK;AACZ;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,UAAU,qEAAO;AACjB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,UAAU,qEAAO;AACjB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,oBAAoB,qEAAS;AAC7B;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAI;AACR;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,uCAAuC;AACvC,iCAAiC,qEAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAI;AACR;AACA;AACA,4CAA4C,qCAAqC;AACjF,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sEAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,4BAA4B,sEAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8DAA4B,IAAI,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,KAAK,GAAG,qEAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,8BAA8B,+BAA+B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,8BAA8B,+BAA+B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sEAAc;AAC5C;AACA;AACA;AACA,iBAAiB,sEAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sEAAS;AACzB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,qEAAa;AACvB;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sEAAc;AACzB;AACA;AACA,sBAAsB,sEAAc;AACpC;AACA;AACA;;AAEA;AACA,OAAO,sEAAe;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,qEAAQ;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qEAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAc,6CAA6C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4BAA4B;AACrE,KAAK;AACL;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,0BAA0B,6DAAQ;AAClC,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6DAAS,kBAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qEAAQ;AACjB,qEAAqE,GAAG;AACxE;AACA;AACA,4EAA4E,GAAG;AAC/E;AACA;AACA;AACA;AACA;AACA,iBAAiB,sEAAO,wBAAwB,KAAK;AACrD,GAAG;AACH;AACA;AACA;AACA,4BAA4B,6DAAS;AACrC;AACA;AACA;AACA;AACA;AACA,MAAM,sEAAO,eAAe,KAAK;AACjC,KAAK;AACL,GAAG;AACH;AACA;AACA,IAAI,sEAAO,SAAS,6DAAQ,qBAAqB,6DAAQ;AACzD,GAAG;AACH;AACA;AACA;AACA,wDAAwD;AACxD,oBAAoB,qEAAc,oBAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA,yBAAyB,YAAY,cAAc,WAAW;AAC9D;AACA;AACA,sBAAsB,YAAY,eAAe,WAAW;AAC5D,yBAAyB,WAAW;AACpC;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY,GAAG,YAAY;AACpD;AACA,oBAAoB,YAAY,YAAY,YAAY;AACxD,oBAAoB,YAAY;AAChC,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,KAAK,UAAU,GAAG;AAC3C;AACA,mBAAmB,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,6DAAS,YAAY;AAClE,6CAA6C,6DAAQ;AACrD,6CAA6C,8DAAW;AACxD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA,MAAM,6DAAS,YAAY;AAC3B,MAAM,6DAAQ,qBAAqB;AACnC,OAAO,KAAK;AACZ,MAAM,6DAAQ;AACd,MAAM,8DAAW;AACjB;AACA;AACA;AACA,oBAAoB;AACpB,WAAW,sBAAsB;AACjC;AACA;AACA;AACA,gBAAgB,sEAAU;AAC1B;AACA,gBAAgB,sEAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,qEAAQ;AACnB,QAAQ,sEAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sEAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAQ;AACrC,mEAAmE,sEAAU;AAC7E;AACA,SAAS,0BAA0B,GAAG,sEAAY;AAClD;AACA;AACA;AACA;AACA,wBAAwB,sEAAU;AAClC,uBAAuB,qEAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,qEAAQ;AACV;AACA;AACA;AACA;AACA,EAAE,qEAAQ;AACV;AACA;AACA,MAAM,sEAAe;AACrB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sEAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sEAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU,iCAAiC,8BAA8B;AACpF,SAAS,qEAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,sEAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sEAAW;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,sEAAW;AACpB;AACA;AACA,kCAAkC,cAAc;AAChD,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,IAAI,qEAAI;AACR;AACA;AACA;AACA,wBAAwB,qEAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL,IAAI,qEAAI;AACR;AACA;AACA;AACA,KAAK;AACL,IAAI,qEAAI;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4BAA4B,UAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,eAAe,oCAAoC,GAAG,6DAAQ;AAC9D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,uBAAuB;AACnE;AACA;AACA;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAI;AACV;AACA,OAAO;AACP;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA,WAAW,oBAAoB;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,sEAAS;AAClB;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC,WAAW,sEAAS;AACpB;AACA;AACA;AACA;AACA;AACA,kBAAkB,yCAAyC;AAC3D;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oDAAoD,uBAAuB;AAC3E;AACA;AACA,qDAAqD,UAAU;AAC/D;AACA;AACA,qDAAqD,UAAU;AAC/D,6BAA6B,sEAAU,eAAe,gBAAgB;AACtE;AACA,+CAA+C,KAAK;AACpD;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA,eAAe,uCAAuC;AACtD;AACA;AACA;AACA,UAAU,mBAAmB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,iBAAiB;AACnE;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAQ;AACd;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,MAAM,qEAAU;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,qEAAa,QAAQ,2BAA2B;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAO;AACf;AACA;AACA,KAAK;AACL;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,UAAU;AAC3D;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA,MAAM,sEAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI,qEAAI;AACR;AACA,KAAK;AACL;AACA,IAAI,qEAAI;AACR;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,sEAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kCAAkC;AAC7C;AACA;AACA,oBAAoB,sEAAa;AACjC;AACA;AACA;AACA,MAAM,qEAAQ;AACd;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA,qBAAqB,sEAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qEAAI;AACpC;AACA;AACA;AACA;AACA,WAAW,6DAAQ;AACnB,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,WAAW,6DAAS;AACpB,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,SAAS,wDAAwD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,0CAA0C,6DAAO,eAAe,6DAAO;AACvE;AACA;AACA;AACA;AACA;AACA,SAAS,sEAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAW;AACtB;AACA;AACA;AACA;AACA,gBAAgB,qEAAW;AAC3B,cAAc,qEAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0DAA0D;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,6DAAE;AAChE;AACA;AACA;AACA,SAAS,2CAA2C;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,6DAAO;AACvF;AACA;AACA;AACA;AACA;AACA,yDAAyD,6DAAO;AAChE;AACA;AACA;AACA;AACA,gGAAgG,6DAAO;AACvG;AACA;AACA;AACA;AACA;AACA,6DAA6D,6DAAO;AACpE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uCAAuC;AAChD;AACA;AACA,wDAAwD,6DAAG;AAC3D,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA,8CAA8C,6DAAG;AACjD,0BAA0B,6DAAG;AAC7B,oBAAoB,6DAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2CAA2C;AACpD;AACA;AACA;AACA;AACA,uCAAuC,6DAAG;AAC1C;AACA;AACA,0CAA0C,6DAAG;AAC7C,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA,sDAAsD,6DAAG;AACzD,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA,SAAS,QAAQ;AACjB,SAAS,6BAA6B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB,GAAG,sEAAiB,SAAS,qBAAqB;AAC7E,WAAW,8DAA8D;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qEAAc;AACzC,4CAA4C,6DAAG,IAAI,qEAAa;AAChE,yBAAyB,sEAAU;AACnC;AACA;AACA;AACA,WAAW,qDAAqD;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC;AACA;AACA;AACA;AACA,uCAAuC,6DAAG,8BAA8B,6DAAG;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6DAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,qEAAc;AAC9B,kBAAkB,qEAAc;AAChC,uBAAuB,qEAAc;AACrC,iBAAiB,qEAAc;AAC/B,kBAAkB,qEAAc;AAChC,oBAAoB,qEAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,8DAAc;AACzB;AACA;AACA,WAAW,8DAAc;AACzB;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,SAAS,mDAAmD;AAC5D,SAAS,qCAAqC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gBAAgB;AACzB,SAAS,yBAAyB;AAClC;AACA,OAAO,qBAAqB;AAC5B;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,8DAAqB;AAChC;AACA;AACA,WAAW,8DAAoB;AAC/B;AACA,SAAS,8DAAY;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,kBAAkB;AAC3B;AACA;AACA;AACA;AACA,2CAA2C,8BAA8B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,sEAA0B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,sEAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sEAAc,QAAQ,mCAAmC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,8BAA8B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,cAAc;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,qEAAc;AAC5D;AACA;AACA;AACA;AACA;AACA,IAAI,sEAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,0BAA0B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oBAAoB,qEAAW;AAC/B;AACA;AACA;AACA;AACA,YAAY,sEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAmB;AAC5B;AACA,YAAY,sEAAa;AACzB;AACA;AACA,6CAA6C,qEAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sEAAU;AACzB,eAAe,sEAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yBAAyB,8BAA8B;AAClE,WAAW,aAAa;AACxB,kDAAkD,8DAAkB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,qEAAa,eAAe,qEAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,YAAY;AACxD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO;AAChB,SAAS,iCAAiC;AAC1C;AACA,YAAY,qEAAW,CAAC,qEAAY;AACpC;AACA;AACA,YAAY,qEAAW,CAAC,qEAAY;AACpC,GAAG;AACH;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA,UAAU,qEAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA,UAAU,qEAAa;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,kBAAkB;AAC/E;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,2BAA2B,sEAAc;AACzC;AACA;AACA,0BAA0B,sEAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sEAAe;AAC3B,UAAU,sEAAe;AACzB;AACA,UAAU;AACV;AACA;AACA,SAAS,mBAAmB;AAC5B;AACA;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,mBAAmB,aAAa;AAChC,KAAK;AACL,mBAAmB,cAAc;AACjC,mBAAmB,aAAa;AAChC;AACA,GAAG;AACH;AACA;AACA;AACA,QAAQ,YAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,qEAAO;AACb;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qEAAc;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAQ;AACd;AACA;AACA;AACA,MAAM,qEAAc;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG,UAAU,qEAAQ;AACrB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG,UAAU,qEAAQ;AACrB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,mBAAmB;AAC5B;AACA;AACA;AACA;AACA,uCAAuC,yBAAyB;AAChE,iBAAiB,qBAAqB;AACtC;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA,QAAQ,sEAAU;AAClB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,wBAAwB,eAAe,6DAAG;AAC1C;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,kBAAkB;AAC3B,MAAM,qEAAc;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU,OAAO;AAC1B;AACA,MAAM,qEAAc;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,kBAAkB;AAC3B;AACA;AACA;AACA,SAAS,6BAA6B;AACtC;AACA,IAAI,qEAAQ;AACZ,iBAAiB,8CAA8C;AAC/D,IAAI,qEAAU;AACd;AACA;AACA;AACA,SAAS,wCAAwC;AACjD;AACA;AACA;AACA;AACA,eAAe,4CAA4C;AAC3D;AACA;AACA;AACA;AACA,aAAa,4CAA4C;AACzD;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mDAAmD,eAAe;AAClE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qCAAqC;AAC9C;AACA,cAAc,qCAAqC;AACnD,WAAW,QAAQ,wBAAwB,MAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,yDAAyD,8BAA8B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY;AACrB,SAAS,qBAAqB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,0CAA0C;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qEAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA,sBAAsB,qEAAM;AAC5B;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yBAAyB,SAAS,UAAU;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,0BAA0B,SAAS,UAAU;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAiD;AAC3E;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,KAAK;AACL;AACA,sBAAsB,iDAAiD;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oCAAoC,gBAAgB,QAAQ,OAAO;AAC9E,sBAAsB,sEAAa;AACnC;AACA;AACA,iBAAiB,qEAAc;AAC/B;AACA;AACA;AACA,iBAAiB,qEAAc;AAC/B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB,qEAAc;AAC9B;AACA;AACA;AACA,gBAAgB,qEAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAQ;AACd;AACA,MAAM,qEAAU;AAChB;AACA;AACA;AACA,WAAW,4CAA4C;AACvD,WAAW,yBAAyB;AACpC,yBAAyB,6DAAQ;AACjC,sBAAsB,sEAAa;AACnC,sBAAsB,qEAAM;AAC5B,WAAW,0BAA0B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gCAAgC;AAC3C;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAc;AACtC,sBAAsB,qEAAc;AACpC,oBAAoB,qEAAc;AAClC,2BAA2B,qEAAc;AACzC,qBAAqB,qEAAc;AACnC;AACA,wBAAwB,qEAAc;AACtC,sBAAsB,qEAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAe;AACvB,OAAO;AACP;AACA;AACA,6BAA6B,sEAAa;AAC1C;AACA;AACA,UAAU,sEAAkB;AAC5B;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAU;AAChB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAc;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,qEAAc;AACzB;AACA;AACA;AACA,IAAI,sEAAqB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAc;AACvC;AACA,OAAO;AACP;AACA;AACA,uBAAuB,qEAAc;AACrC;AACA;AACA;AACA,UAAU,sEAAM;AAChB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,IAAI,sEAAoB;AACxB;AACA;AACA;AACA;AACA,sBAAsB,qEAAM;AAC5B,yBAAyB,qEAAS;AAClC;AACA;AACA;AACA,sBAAsB,sEAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAc;AAC3B,KAAK;AACL;AACA,uCAAuC,qEAAc;AACrD;AACA,cAAc,qEAAc;AAC5B,wCAAwC,qEAAkB;AAC1D;AACA;AACA;AACA;AACA,IAAI,qEAAU;AACd;AACA;AACA;AACA,sBAAsB,qEAAM;AAC5B,yBAAyB,qEAAS;AAClC;AACA;AACA;AACA;AACA,QAAQ,sEAAU;AAClB,SAAS,sEAAU;AACnB;AACA,iBAAiB,eAAe;AAChC;AACA,YAAY,sEAAU;AACtB,aAAa,sEAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA,KAAK;AACL,MAAM,qEAAQ;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+BAA+B;AAC7E;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS,6CAA6C;AACrE;AACA;AACA,8BAA8B,qEAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qEAAO;AAC7B,oBAAoB,qEAAS;AAC7B,iCAAiC,qEAAM;AACvC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kCAAkC;AAC7C;AACA;AACA;AACA;AACA,eAAe,qEAAc;AAC7B;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,qEAAc;AAC/B,mBAAmB,6DAAE;AACrB,OAAO;AACP;AACA,iBAAiB,qEAAc;AAC/B,mBAAmB,6DAAE;AACrB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAAM;AAC3B;AACA;AACA,WAAW,mCAAmC;AAC9C,IAAI,qEAAU;AACd;AACA;AACA;AACA,iBAAiB,qEAAkB;AACnC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;AACA,kBAAkB,sEAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAO;AACf;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,6BAA6B;AACtC;AACA,SAAS,aAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB;AAC7B,mBAAmB,qEAAM;AACzB,oBAAoB,qEAAM;AAC1B,qBAAqB,qEAAM;AAC3B;AACA;AACA;AACA,kBAAkB,qEAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,qEAAI;AACN;AACA,EAAE,qEAAI;AACN;AACA,EAAE,qEAAI;AACN,IAAI,qEAAI;AACR,IAAI,qEAAI;AACR,IAAI,qEAAI;AACR,GAAG;AACH;AACA;AACA,EAAE,qEAAI;AACN;AACA;AACA,UAAU;AACV;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS;AAClB,SAAS,+BAA+B,aAAa;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS;AAChB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO,UAAU;AACjB;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,SAAS,sCAAsC;AAC/C,SAAS,eAAe;AACxB;AACA,SAAS,2CAA2C,GAAG,sEAAa;AACpE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,OAAO,qEAAW;AAClB,OAAO,qEAAW;AAClB;AACA;AACA;AACA,kBAAkB,qEAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qEAAa;AACtB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA,IAAI,qEAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAI;AACR;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,yCAAyC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,wBAAwB;AACnC,WAAW,2CAA2C,GAAG,sEAAa;AACtE,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sEAAa;AACrC;AACA;AACA;AACA,kBAAkB,qEAAM;AACxB;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gCAAgC;AAC3C,qBAAqB,qEAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,sEAAS;AACf;AACA;AACA,MAAM,sEAAS;AACf,KAAK;AACL,sBAAsB,qEAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA,2BAA2B,sEAAa;AACxC;AACA;AACA;AACA,QAAQ,sEAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,QAAQ,sEAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,uEAAuE;AAClF,qBAAqB,qEAAM;AAC3B;AACA;AACA,sBAAsB,sEAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAI;AACR;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA,MAAM,qEAAI;AACV;AACA;AACA;AACA;AACA;AACA,sCAAsC,UAAU;AAChD;AACA;AACA;AACA,MAAM,qEAAI;AACV;AACA;AACA;AACA,IAAI,qEAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sEAAa;AACrC;AACA;AACA;AACA;AACA,mBAAmB,qEAAM;AACzB;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,KAAK;AAChB,WAAW,cAAc;AACzB,WAAW,2CAA2C,GAAG,sEAAa;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAS;AAC7B;AACA;AACA;AACA;AACA;AACA,MAAM,sEAAqB;AAC3B;AACA;AACA;AACA;AACA,MAAM,sEAAoB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,sEAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sEAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,mBAAmB,8DAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;AACP,kBAAkB,8DAAI;AACtB,kBAAkB,8DAAI;AACtB,mBAAmB,8DAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAa;AAC1B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,kBAAkB,8DAAI;AACtB,iBAAiB,8DAAI;AACrB,oBAAoB,8DAAI;AACxB,cAAc,8DAAI;AAClB,mBAAmB,8DAAI;AACvB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,yBAAyB,kBAAkB;AAC3C,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,qEAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAa;AACrB;AACA;AACA;AACA;AACA,oCAAoC,qEAAc;AAClD;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,SAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,cAAc;AACvC,kBAAkB,MAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,6EAA6E;AACtF;AACA;AACA,SAAS,qBAAqB;AAC9B,sBAAsB,qEAAa;AACnC,sBAAsB,qEAAa;AACnC,wBAAwB,qEAAa;AACrC;AACA,gBAAgB,sEAAO;AACvB;AACA;AACA,aAAa,YAAY,GAAG,YAAY;AACxC;AACA;AACA;AACA,cAAc,sEAAO;AACrB;AACA,OAAO,qEAAa;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,0CAA0C,sEAAW;AACrD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,QAAQ,sEAAY;AACpB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI,sEAAc;AAClB,IAAI,sEAAc;AAClB;AACA,wBAAwB,qEAAa;AACrC;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA,UAAU,sEAAY;AACtB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,eAAe;AACvB,gBAAgB,6DAA6D;AAC7E;AACA;AACA,wBAAwB,sEAAY;AACpC;AACA,KAAK;AACL,kBAAkB,WAAW;AAC7B;AACA,GAAG;AACH,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE,cAAc,qEAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,uBAAuB;AAClC,SAAS,SAAS;AAClB;AACA;AACA;AACA,sBAAsB,qEAAI;AAC1B,sBAAsB,qEAAI;AAC1B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wBAAwB;AACjC;AACA;AACA;AACA;AACA,+BAA+B,QAAQ,mBAAmB,SAAS,iCAAiC,SAAS;AAC7G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,sEAAkB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAY;AACvB;AACA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB,eAAe,qEAAc;AAC7B,eAAe,qEAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD,qEAAK;AACzD;AACA;AACA;AACA,4BAA4B,qEAAK;AACjC;AACA;AACA,gBAAgB,qEAAe,gDAAgD,qEAAK;AACpF,uBAAuB,qEAAK;AAC5B;AACA;AACA;AACA,gBAAgB,wCAAwC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,mBAAmB,qEAAe;AAClC,cAAc,yCAAyC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAc;AACzB;AACA;AACA,WAAW,SAAS;AACpB,eAAe,qEAAc;AAC7B,eAAe,qEAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC;AACA;AACA;AACA;AACA,kDAAkD,qEAAK;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,sEAAkB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAY;AACpB;AACA;AACA;AACA;AACA,uBAAuB,qEAAK;AAC5B,uBAAuB,qEAAK,aAAa,qEAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qEAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,qEAAS;AAC7B,WAAW,qEAAc,sCAAsC,6DAAQ;AACvE;AACA;AACA;AACA;AACA,UAAU,qEAAO;AACjB;AACA,OAAO,sEAAY;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6DAA6D,6DAAE;AAC/D,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,mBAAmB,qEAAM;AACzB;AACA;AACA,yBAAyB,sEAAe;AACxC,6BAA6B,qEAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,6DAAE;AACjE,iBAAiB,gBAAgB;AACjC;AACA,6BAA6B,qEAAS,CAAC,sEAAe,4BAA4B,6DAAO;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,SAAS,eAAe,aAAa;AACrC,8BAA8B,QAAQ;AACtC;AACA,mBAAmB,qEAAM;AACzB,WAAW,0CAA0C;AACrD,WAAW,cAAc;AACzB,SAAS,qEAAa;AACtB,2BAA2B,sEAAa;AACxC,sBAAsB,qEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,IAAI,qEAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA,qDAAqD,6DAAG;AACxD,GAAG;AACH;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qEAAa;AACtB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,qEAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,eAAe,qEAAc;AAC7B,eAAe,qEAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qEAAQ;AAC9B;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6DAAG;AAC/B;AACA,WAAW,sEAAe,2BAA2B,qEAAS;AAC9D;AACA;AACA,QAAQ,qEAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,6DAAO;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yBAAyB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wBAAwB,UAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAM;AAC7B;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAU;AAChB;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,mCAAmC;AACnD,WAAW,oCAAoC;AAC/C,WAAW,qCAAqC;AAChD,SAAS,uCAAuC;AAChD,QAAQ,wCAAwC;AAChD,SAAS,yCAAyC;AAClD,UAAU,uCAAuC;AACjD,YAAY,uCAAuC;AACnD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAa;AACnB;AACA;AACA;AACA,SAAS,0BAA0B;AACnC;AACA;AACA;AACA;AACA,OAAO,qEAAc;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qEAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6BAA6B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,WAAW,OAAO,GAAG,sEAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA,IAAI,sEAAO;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iCAAiC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,qEAAc;AACxB,UAAU,qEAAc;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sEAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,YAAY,qEAAW;AACvB,UAAU,qEAAW;AACrB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAAc;AACnC;AACA,uBAAuB,qEAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAQ;AAC/B;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA;AACA;AACA,WAAW,qEAAY;AACvB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,OAAO,GAAG,qEAAY;AAC9B;AACA,MAAM,kCAAkC;AACxC,MAAM,kCAAkC;AACxC,GAAG;AACH;AACA,QAAQ,OAAO,GAAG,qEAAY;AAC9B;AACA,MAAM,kCAAkC;AACxC,MAAM,kCAAkC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,kBAAkB;AAC3B,SAAS;AACT;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA,oBAAoB,gCAAgC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAE4rB;;;;;;;;;ACxgV5rB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,KAAK;AACL,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,UAAU;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA,WAAW,iCAAiC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,SAAS,6BAA6B;AACteAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,SAAS;AAC3C,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS;AACjD,eAAe,IAAI,IAAI,IAAI,IAAI,IAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,GAAG;AACH,sBAAsB,uBAAukCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA,KAAK;AACL,sCAAsC,UAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeoDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAmB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6CAA6C;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sCAAsC,qCAAqC;AAC3E;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,yCAAyC,kCAAkC;AAC3E,SAAS,gGAAgG;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uDAAuD;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oCAAoC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uDAAuD;AAChhB,SAAS,UAAU;AACnB;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,UAAU;AACnC,yBAAyB,UAAU;AACnC;AACA;AACA;AACA,yBAAyB,UAAU;AACnC,yBAAyB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,SAAS,gCAAgC;AACzC;AACA;AACA;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA,OAAO,cAAc;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,cAAc;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2CAA2C;AACpD,SAAS,mBAAmB;AAC5B;AACA,OAAO,iBAAiB;AACxB;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,SAAS,2CAA2C;AACpD;AACA,SAAS,4BAA4B;AACrC,SAAS,wBAAwB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4CAA4C;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,yCAAyC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8CAA8C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW;AACpB;AACA,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uCAAuC,UAAU;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qDAAqD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEq4E;;;;;;;;AC1jFr4E,sH;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACa;AACb;AACmC;;AAEvE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,kBAAkB,sBAAsB;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,uBAAuB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAM;AAC1B,mBAAmB,oDAAM;AACzB;AACA;AACA,gCAAgC,sDAAQ;AACxC;AACA;AACA;AACA,+BAA+B,qDAAO;AACtC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,MAAM,uDAAS;AACf;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,KAAK;AACL,yBAAyB,4CAAK;AAC9B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0BAA0B,wDAAU;;AAEpC;AACA,yBAAyB,wDAAU;AACnC,gBAAgB,4CAAK;AACrB,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEyF;AACzF;;;;;;;;ACtQA,2H;;;;;;;ACAA,iG;;;;;;;ACAA,uG;;;;;;;ACAA,iH;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAkBG;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE0F;AACQ;AAmDrG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","file":"faultApp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"app\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"app\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"faultApp\"] = factory(require(\"app\"));\n\telse\n\t\troot[\"faultApp\"] = factory(root[\"app\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_dll_reference_app__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","module.exports = (__webpack_require__(\"dll-reference app\"))(\"./actions/navigationActions.ts\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"./components/material-table/index.tsx\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"./components/material-table/utilities.ts\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"./flux/action.ts\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"./flux/connect.tsx\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"./flux/middleware.ts\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"./services/applicationManager.ts\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"./services/notificationService.ts\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"./services/restService.ts\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"./utilities/elasticSearch.ts\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"./utilities/yangHelper.ts\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@babel/runtime/helpers/interopRequireDefault.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@fortawesome/free-solid-svg-icons/index.es.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@fortawesome/react-fontawesome/index.es.js\");","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM17 11h-4v4h-2v-4H7V9h4V5h2v4h4v2z\"\n}), 'AddComment');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\"\n}), 'ContentCopy');\nexports.default = _default;","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/icons-material/ExpandLess.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/icons-material/ExpandMore.js\");","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M14.59 8 12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"\n}), 'HighlightOff');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"\n}), 'InfoOutlined');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"\n}), 'Refresh');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m1.79 12 5.58 5.59L5.96 19 .37 13.41 1.79 12zm.45-7.78L12.9 14.89l-1.28 1.28L7.44 12l-1.41 1.41L11.62 19l2.69-2.69 4.89 4.89 1.41-1.41L3.65 2.81 2.24 4.22zm14.9 9.27L23.62 7 22.2 5.59l-6.48 6.48 1.42 1.42zM17.96 7l-1.41-1.41-3.65 3.66 1.41 1.41L17.96 7z\"\n}), 'RemoveDone');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M22 5.18 10.59 16.6l-4.24-4.24 1.41-1.41 2.83 2.83 10-10L22 5.18zm-2.21 5.04c.13.57.21 1.17.21 1.78 0 4.42-3.58 8-8 8s-8-3.58-8-8 3.58-8 8-8c1.58 0 3.04.46 4.28 1.25l1.44-1.44C16.1 2.67 14.13 2 12 2 6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10c0-1.19-.22-2.33-.6-3.39l-1.61 1.61z\"\n}), 'TaskAlt');\nexports.default = _default;","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/icons-material/utils/createSvgIcon.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/material/Button/index.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/material/Dialog/index.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/material/DialogActions/index.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/material/DialogContent/index.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/material/DialogContentText/index.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/material/DialogTitle/index.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/material/Tooltip/index.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/material/Typography/index.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/material/index.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/styles/createStyles/index.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/@mui/styles/withStyles/index.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/axios/index.js\");","import {Chart, registerables} from '../dist/chart.mjs';\n\nChart.register(...registerables);\n\nexport default Chart;\n","/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, d as defaults, i as isObject, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as createContext, j as defined, s as sign, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as log10, A as _factorize, B as finiteOrDefault, C as callback, D as _addGrace, E as _limitValue, F as toDegrees, G as _measureText, I as _int16Range, J as _alignPixel, K as toPadding, L as clipArea, M as renderText, N as unclipArea, O as toFont, Q as each, R as _toLeftRightCenter, S as _alignStartEnd, U as overrides, V as merge, W as _capitalize, X as getRelativePosition, Y as _rlookupByKey, Z as _lookupByKey, $ as _isPointInArea, a0 as getAngleFromPoint, a1 as getMaximumSize, a2 as _getParentNode, a3 as readUsedSize, a4 as throttled, a5 as supportsEventListenerOptions, a6 as _isDomSupported, a7 as descriptors, a8 as isFunction, a9 as _attachContext, aa as _createResolver, ab as _descriptors, ac as mergeIf, ad as uid, ae as debounce, af as retinaScale, ag as clearCanvas, ah as setsEqual, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _readValueToProps, am as _updateBezierControlPoints, an as _computeSegments, ao as _boundSegments, ap as _steppedInterpolation, aq as _bezierInterpolation, ar as _pointInLine, as as _steppedLineTo, at as _bezierCurveTo, au as drawPoint, av as addRoundedRectPath, aw as toTRBL, ax as toTRBLCorners, ay as _boundSegment, az as _normalizeAngle, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as noop, aG as distanceBetweenPoints, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as _longestText, aN as _filterBetween, aO as _lookup } from './chunks/helpers.segment.mjs';\nexport { d as defaults } from './chunks/helpers.segment.mjs';\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update(date = Date.now()) {\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || (elapsed < duration));\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n\nconst numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\nconst colors = ['color', 'borderColor', 'backgroundColor'];\ndefaults.set('animation', {\n  delay: undefined,\n  duration: 1000,\n  easing: 'easeOutQuart',\n  fn: undefined,\n  from: undefined,\n  loop: undefined,\n  to: undefined,\n  type: undefined,\n});\nconst animationOptions = Object.keys(defaults.animation);\ndefaults.describe('animation', {\n  _fallback: false,\n  _indexable: false,\n  _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\n});\ndefaults.set('animations', {\n  colors: {\n    type: 'color',\n    properties: colors\n  },\n  numbers: {\n    type: 'number',\n    properties: numbers\n  },\n});\ndefaults.describe('animations', {\n  _fallback: 'animation',\n});\ndefaults.set('transitions', {\n  active: {\n    animation: {\n      duration: 400\n    }\n  },\n  resize: {\n    animation: {\n      duration: 0\n    }\n  },\n  show: {\n    animations: {\n      colors: {\n        from: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        duration: 0\n      },\n    }\n  },\n  hide: {\n    animations: {\n      colors: {\n        to: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        easing: 'linear',\n        fn: v => v | 0\n      },\n    }\n  }\n});\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n      });\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n  }\n}\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nDatasetController.defaults = {};\nDatasetController.prototype.datasetElementType = null;\nDatasetController.prototype.dataElementType = null;\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1;\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nBarController.id = 'bar';\nBarController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n};\nBarController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true,\n    }\n  }\n};\n\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: meta.label,\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nBubbleController.id = 'bubble';\nBubbleController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n};\nBubbleController.overrides = {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        }\n      }\n    }\n  }\n};\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nDoughnutController.id = 'doughnut';\nDoughnutController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    },\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r',\n};\nDoughnutController.descriptors = {\n  _scriptable: (name) => name !== 'spacing',\n  _indexable: (name) => name !== 'spacing',\n};\nDoughnutController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(tooltipItem) {\n          let dataLabel = tooltipItem.label;\n          const value = ': ' + tooltipItem.formattedValue;\n          if (isArray(dataLabel)) {\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n          return dataLabel;\n        }\n      }\n    }\n  }\n};\n\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nLineController.id = 'line';\nLineController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false,\n};\nLineController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n    },\n    _value_: {\n      type: 'linear',\n    },\n  }\n};\n\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\nPolarAreaController.id = 'polarArea';\nPolarAreaController.defaults = {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    },\n  },\n  indexAxis: 'r',\n  startAngle: 0,\n};\nPolarAreaController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(context) {\n          return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;\n        }\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n};\n\nclass PieController extends DoughnutController {\n}\nPieController.id = 'pie';\nPieController.defaults = {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n};\n\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nRadarController.id = 'radar';\nRadarController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  },\n};\nRadarController.overrides = {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear',\n    }\n  }\n};\n\nclass Element {\n  constructor() {\n    this.x = undefined;\n    this.y = undefined;\n    this.active = false;\n    this.options = undefined;\n    this.$animations = undefined;\n  }\n  tooltipPosition(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nElement.defaults = {};\nElement.defaultRoutes = undefined;\n\nconst formatters = {\n  values(value) {\n    return isArray(value) ? value : '' + value;\n  },\n  numeric(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const locale = this.chart.options.locale;\n    let notation;\n    let delta = tickValue;\n    if (ticks.length > 1) {\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\n        notation = 'scientific';\n      }\n      delta = calculateDelta(tickValue, ticks);\n    }\n    const logDelta = log10(Math.abs(delta));\n    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};\n    Object.assign(options, this.options.ticks.format);\n    return formatNumber(tickValue, locale, options);\n  },\n  logarithmic(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const remain = tickValue / (Math.pow(10, Math.floor(log10(tickValue))));\n    if (remain === 1 || remain === 2 || remain === 5) {\n      return formatters.numeric.call(this, tickValue, index, ticks);\n    }\n    return '';\n  }\n};\nfunction calculateDelta(tickValue, ticks) {\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n    delta = tickValue - Math.floor(tickValue);\n  }\n  return delta;\n}\nvar Ticks = {formatters};\n\ndefaults.set('scale', {\n  display: true,\n  offset: false,\n  reverse: false,\n  beginAtZero: false,\n  bounds: 'ticks',\n  grace: 0,\n  grid: {\n    display: true,\n    lineWidth: 1,\n    drawBorder: true,\n    drawOnChartArea: true,\n    drawTicks: true,\n    tickLength: 8,\n    tickWidth: (_ctx, options) => options.lineWidth,\n    tickColor: (_ctx, options) => options.color,\n    offset: false,\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderWidth: 1\n  },\n  title: {\n    display: false,\n    text: '',\n    padding: {\n      top: 4,\n      bottom: 4\n    }\n  },\n  ticks: {\n    minRotation: 0,\n    maxRotation: 50,\n    mirror: false,\n    textStrokeWidth: 0,\n    textStrokeColor: '',\n    padding: 3,\n    display: true,\n    autoSkip: true,\n    autoSkipPadding: 3,\n    labelOffset: 0,\n    callback: Ticks.formatters.values,\n    minor: {},\n    major: {},\n    align: 'center',\n    crossAlign: 'near',\n    showLabelBackdrop: false,\n    backdropColor: 'rgba(255, 255, 255, 0.75)',\n    backdropPadding: 2,\n  }\n});\ndefaults.route('scale.ticks', 'color', '', 'color');\ndefaults.route('scale.grid', 'color', '', 'borderColor');\ndefaults.route('scale.grid', 'borderColor', '', 'borderColor');\ndefaults.route('scale.title', 'color', '', 'color');\ndefaults.describe('scale', {\n  _fallback: false,\n  _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n  _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash',\n});\ndefaults.describe('scales', {\n  _fallback: 'scale',\n});\ndefaults.describe('scale.ticks', {\n  _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',\n  _indexable: (name) => name !== 'backdropPadding',\n});\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return (lines * font.lineHeight) + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {min, max} = this;\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const optsAtIndex = grid.setContext(this.getContext(i));\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndex.borderDash || [];\n      const borderDashOffset = optsAtIndex.borderDashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = y + textOffset - labelPadding.top;\n        let left = x - labelPadding.left;\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        }\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor,\n        };\n      }\n      items.push({\n        rotation,\n        label,\n        font,\n        color,\n        strokeColor,\n        strokeWidth,\n        textOffset,\n        textAlign: tickTextAlign,\n        textBaseline,\n        translation: [x, y],\n        backdrop,\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {textAlign, x};\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {chart, ctx, options: {grid}} = this;\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.borderWidth;\n    ctx.strokeStyle = borderOpts.borderColor;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    let i, ilen;\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      const item = items[i];\n      const tickFont = item.font;\n      const label = item.label;\n      if (item.backdrop) {\n        ctx.fillStyle = item.backdrop.color;\n        ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);\n      }\n      let y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, item);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: gz + 1,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...args) {\n    this._each('register', args);\n  }\n  remove(...args) {\n    this._each('unregister', args);\n  }\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = new Registry();\n\nclass ScatterController extends DatasetController {\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      const {dataset: line, _dataset} = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {showLine} = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\nScatterController.id = 'scatter';\nScatterController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n};\nScatterController.overrides = {\n  interaction: {\n    mode: 'point'\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(item) {\n          return '(' + item.label + ', ' + item.formattedValue + ')';\n        }\n      }\n    }\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n};\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPolarAreaController: PolarAreaController,\nPieController: PieController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\nclass DateAdapter {\n  constructor(options) {\n    this.options = options || {};\n  }\n  init(chartOptions) {}\n  formats() {\n    return abstract();\n  }\n  parse(value, format) {\n    return abstract();\n  }\n  format(timestamp, format) {\n    return abstract();\n  }\n  add(timestamp, amount, unit) {\n    return abstract();\n  }\n  diff(a, b, unit) {\n    return abstract();\n  }\n  startOf(timestamp, unit, weekday) {\n    return abstract();\n  }\n  endOf(timestamp, unit) {\n    return abstract();\n  }\n}\nDateAdapter.override = function(members) {\n  Object.assign(DateAdapter.prototype, members);\n};\nvar adapters = {\n  _date: DateAdapter\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  return {lo: 0, hi: data.length - 1};\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\ndefaults.set('layout', {\n  autoPadding: true,\n  padding: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n});\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {\n  }\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart, (args) => {\n    const event = args[0];\n    return [event, event.offsetX, event.offsetY];\n  });\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {plugins, localIds};\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y') {\n    return id;\n  }\n  return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const firstIDs = Object.create(null);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    firstIDs[axis] = firstIDs[axis] || id;\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {options, type} = this;\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {},\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nvar version = \"3.9.1\";\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nclass Chart {\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {size: newSize});\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass.prototype, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {mode});\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    this.notifyPlugins('destroy');\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, (type) => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\nconst invalidatePlugins = () => each(Chart.instances, (chart) => chart._plugins.invalidate());\nconst enumerable = true;\nObject.defineProperties(Chart, {\n  defaults: {\n    enumerable,\n    value: defaults\n  },\n  instances: {\n    enumerable,\n    value: instances\n  },\n  overrides: {\n    enumerable,\n    value: overrides\n  },\n  registry: {\n    enumerable,\n    value: registry\n  },\n  version: {\n    enumerable,\n    value: version\n  },\n  getChart: {\n    enumerable,\n    value: getChart\n  },\n  register: {\n    enumerable,\n    value: (...items) => {\n      registry.add(...items);\n      invalidatePlugins();\n    }\n  },\n  unregister: {\n    enumerable,\n    value: (...items) => {\n      registry.remove(...items);\n      invalidatePlugins();\n    }\n  }\n});\n\nfunction clipArc(ctx, element, endAngle) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, startAngle + TAU, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + circumference % TAU;\n      if (circumference % TAU === 0) {\n        endAngle += TAU;\n      }\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawFullCircleBorders(ctx, element, inner) {\n  const {x, y, startAngle, pixelMargin, fullCircles} = element;\n  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);\n  const innerRadius = element.innerRadius + pixelMargin;\n  let i;\n  if (inner) {\n    clipArc(ctx, element, startAngle + TAU);\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, innerRadius, startAngle + TAU, startAngle, true);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle, startAngle + TAU);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n}\nfunction drawBorder(ctx, element, offset, spacing, endAngle, circular) {\n  const {options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  if (element.fullCircles) {\n    drawFullCircleBorders(ctx, element, inner);\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.stroke();\n}\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return (betweenAngles && withinRadius);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference',\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 2;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    let radiusOffset = 0;\n    if (offset) {\n      radiusOffset = offset / 2;\n      const halfAngle = (this.startAngle + this.endAngle) / 2;\n      ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);\n      if (this.circumference >= PI) {\n        radiusOffset = offset;\n      }\n    }\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    const endAngle = drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, endAngle, circular);\n    ctx.restore();\n  }\n}\nArcElement.id = 'arc';\nArcElement.defaults = {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true,\n};\nArcElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor'\n};\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || (this.points.length - start);\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nLineElement.id = 'line';\nLineElement.defaults = {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0,\n};\nLineElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nLineElement.descriptors = {\n  _scriptable: true,\n  _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n};\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\nclass PointElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    return options.radius + options.hitRadius;\n  }\n}\nPointElement.id = 'point';\nPointElement.defaults = {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n};\nPointElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {left, top, right, bottom};\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nBarElement.id = 'bar';\nBarElement.defaults = {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n};\nBarElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nLineElement: LineElement,\nPointElement: PointElement,\nBarElement: BarElement\n});\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {value: data});\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {start, count};\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n\nfunction _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n\nfunction _getTarget(source) {\n  const {chart, fill, line} = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {options, ctx} = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight});\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight});\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {color: fontColor, padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor || fontColor;\n      ctx.fillStyle = legendItem.fontColor || fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color}} = chart.legend.options;\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: 0,\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {width, height};\n}\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart || config._chart;\n    this._chart = this.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {callbacks} = options;\n    const beforeTitle = callbacks.beforeTitle.apply(this, [context]);\n    const title = callbacks.title.apply(this, [context]);\n    const afterTitle = callbacks.afterTitle.apply(this, [context]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));\n  }\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(this, context)));\n      pushOrConcat(bodyItem.lines, scoped.label.call(this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));\n  }\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n    const beforeFooter = callbacks.beforeFooter.apply(this, [tooltipItems]);\n    const footer = callbacks.footer.apply(this, [tooltipItems]);\n    const afterFooter = callbacks.afterFooter.apply(this, [tooltipItems]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(scoped.labelColor.call(this, context));\n      labelPointStyles.push(scoped.labelPointStyle.call(this, context));\n      labelTextColors.push(scoped.labelTextColor.call(this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nTooltip.positioners = positioners;\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: {\n      beforeTitle: noop,\n      title(tooltipItems) {\n        if (tooltipItems.length > 0) {\n          const item = tooltipItems[0];\n          const labels = item.chart.data.labels;\n          const labelCount = labels ? labels.length : 0;\n          if (this && this.options && this.options.mode === 'dataset') {\n            return item.dataset.label || '';\n          } else if (item.label) {\n            return item.label;\n          } else if (labelCount > 0 && item.dataIndex < labelCount) {\n            return labels[item.dataIndex];\n          }\n        }\n        return '';\n      },\n      afterTitle: noop,\n      beforeBody: noop,\n      beforeLabel: noop,\n      label(tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n          return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n          label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n          label += value;\n        }\n        return label;\n      },\n      labelColor(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          borderColor: options.borderColor,\n          backgroundColor: options.backgroundColor,\n          borderWidth: options.borderWidth,\n          borderDash: options.borderDash,\n          borderDashOffset: options.borderDashOffset,\n          borderRadius: 0,\n        };\n      },\n      labelTextColor() {\n        return this.options.bodyColor;\n      },\n      labelPointStyle(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          pointStyle: options.pointStyle,\n          rotation: options.rotation,\n        };\n      },\n      afterLabel: noop,\n      afterBody: noop,\n      beforeFooter: noop,\n      footer: noop,\n      afterFooter: noop\n    }\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n      return labels[value];\n    }\n    return value;\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nCategoryScale.id = 'category';\nCategoryScale.defaults = {\n  ticks: {\n    callback: CategoryScale.prototype.getLabelForValue\n  }\n};\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = 1;\n      if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {\n        offset = Math.abs(max * 0.05);\n      }\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nLinearScale.id = 'linear';\nLinearScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n};\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, Math.floor(log10(tickVal))));\n  return remain === 1;\n}\nfunction generateTicks(generationOptions, dataRange) {\n  const endExp = Math.floor(log10(dataRange.max));\n  const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n  const ticks = [];\n  let tickVal = finiteOrDefault(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));\n  let exp = Math.floor(log10(tickVal));\n  let significand = Math.floor(tickVal / Math.pow(10, exp));\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  do {\n    ticks.push({value: tickVal, major: isMajor(tickVal)});\n    ++significand;\n    if (significand === 10) {\n      significand = 1;\n      ++exp;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n  } while (exp < endExp || (exp === endExp && significand < endSignificand));\n  const lastTick = finiteOrDefault(generationOptions.max, tickVal);\n  ticks.push({value: lastTick, major: isMajor(tickVal)});\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    const exp = (v, m) => Math.pow(10, Math.floor(log10(v)) + m);\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(exp(min, -1));\n        setMax(exp(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(exp(max, -1));\n    }\n    if (max <= 0) {\n      setMax(exp(min, +1));\n    }\n    if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) {\n      setMin(exp(min, -1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nLogarithmicScale.id = 'logarithmic';\nLogarithmicScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n};\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {color, lineWidth} = gridLineOpts;\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(gridLineOpts.borderDash);\n  ctx.lineDashOffset = gridLineOpts.borderDashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid} = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const optsAtIndex = grid.setContext(this.getContext(index - 1));\n          drawRadiusLine(this, optsAtIndex, offset, labelCount);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nRadialLinearScale.id = 'radialLinear';\nRadialLinearScale.defaults = {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n};\nRadialLinearScale.defaultRoutes = {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n};\nRadialLinearScale.descriptors = {\n  angleLines: {\n    _fallback: 'grid'\n  }\n};\n\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\nconst UNITS = (Object.keys(INTERVALS));\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts, opts) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets(timestamps) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(timeOpts.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    const label = this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    const formatter = options.ticks.callback;\n    return formatter ? callback(formatter, [label, index, ticks], this) : label;\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return (this._cache.data = this.normalize(timestamps));\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nTimeScale.id = 'time';\nTimeScale.defaults = {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    major: {\n      enabled: false\n    }\n  }\n};\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nTimeSeriesScale.id = 'timeseries';\nTimeSeriesScale.defaults = TimeScale.defaults;\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };\n","/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nfunction noop() {}\nconst uid = (function() {\n  let id = 0;\n  return function() {\n    return id++;\n  };\n}());\nfunction isNullOrUndef(value) {\n  return value === null || typeof value === 'undefined';\n}\nfunction isArray(value) {\n  if (Array.isArray && Array.isArray(value)) {\n    return true;\n  }\n  const type = Object.prototype.toString.call(value);\n  if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n    return true;\n  }\n  return false;\n}\nfunction isObject(value) {\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\nconst isNumberFinite = (value) => (typeof value === 'number' || value instanceof Number) && isFinite(+value);\nfunction finiteOrDefault(value, defaultValue) {\n  return isNumberFinite(value) ? value : defaultValue;\n}\nfunction valueOrDefault(value, defaultValue) {\n  return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100\n    : value / dimension;\nconst toDimension = (value, dimension) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100 * dimension\n    : +value;\nfunction callback(fn, args, thisArg) {\n  if (fn && typeof fn.call === 'function') {\n    return fn.apply(thisArg, args);\n  }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n  let i, len, keys;\n  if (isArray(loopable)) {\n    len = loopable.length;\n    if (reverse) {\n      for (i = len - 1; i >= 0; i--) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    }\n  } else if (isObject(loopable)) {\n    keys = Object.keys(loopable);\n    len = keys.length;\n    for (i = 0; i < len; i++) {\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\n    }\n  }\n}\nfunction _elementsEqual(a0, a1) {\n  let i, ilen, v0, v1;\n  if (!a0 || !a1 || a0.length !== a1.length) {\n    return false;\n  }\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\n    v0 = a0[i];\n    v1 = a1[i];\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction clone$1(source) {\n  if (isArray(source)) {\n    return source.map(clone$1);\n  }\n  if (isObject(source)) {\n    const target = Object.create(null);\n    const keys = Object.keys(source);\n    const klen = keys.length;\n    let k = 0;\n    for (; k < klen; ++k) {\n      target[keys[k]] = clone$1(source[keys[k]]);\n    }\n    return target;\n  }\n  return source;\n}\nfunction isValidKey(key) {\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\n}\nfunction _merger(key, target, source, options) {\n  if (!isValidKey(key)) {\n    return;\n  }\n  const tval = target[key];\n  const sval = source[key];\n  if (isObject(tval) && isObject(sval)) {\n    merge(tval, sval, options);\n  } else {\n    target[key] = clone$1(sval);\n  }\n}\nfunction merge(target, source, options) {\n  const sources = isArray(source) ? source : [source];\n  const ilen = sources.length;\n  if (!isObject(target)) {\n    return target;\n  }\n  options = options || {};\n  const merger = options.merger || _merger;\n  for (let i = 0; i < ilen; ++i) {\n    source = sources[i];\n    if (!isObject(source)) {\n      continue;\n    }\n    const keys = Object.keys(source);\n    for (let k = 0, klen = keys.length; k < klen; ++k) {\n      merger(keys[k], target, source, options);\n    }\n  }\n  return target;\n}\nfunction mergeIf(target, source) {\n  return merge(target, source, {merger: _mergerIf});\n}\nfunction _mergerIf(key, target, source) {\n  if (!isValidKey(key)) {\n    return;\n  }\n  const tval = target[key];\n  const sval = source[key];\n  if (isObject(tval) && isObject(sval)) {\n    mergeIf(tval, sval);\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n    target[key] = clone$1(sval);\n  }\n}\nfunction _deprecated(scope, value, previous, current) {\n  if (value !== undefined) {\n    console.warn(scope + ': \"' + previous +\n\t\t\t'\" is deprecated. Please use \"' + current + '\" instead');\n  }\n}\nconst keyResolvers = {\n  '': v => v,\n  x: o => o.x,\n  y: o => o.y\n};\nfunction resolveObjectKey(obj, key) {\n  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n  return resolver(obj);\n}\nfunction _getKeyResolver(key) {\n  const keys = _splitKey(key);\n  return obj => {\n    for (const k of keys) {\n      if (k === '') {\n        break;\n      }\n      obj = obj && obj[k];\n    }\n    return obj;\n  };\n}\nfunction _splitKey(key) {\n  const parts = key.split('.');\n  const keys = [];\n  let tmp = '';\n  for (const part of parts) {\n    tmp += part;\n    if (tmp.endsWith('\\\\')) {\n      tmp = tmp.slice(0, -1) + '.';\n    } else {\n      keys.push(tmp);\n      tmp = '';\n    }\n  }\n  return keys;\n}\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value) => typeof value !== 'undefined';\nconst isFunction = (value) => typeof value === 'function';\nconst setsEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const item of a) {\n    if (!b.has(item)) {\n      return false;\n    }\n  }\n  return true;\n};\nfunction _isClickEvent(e) {\n  return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\nconst PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction niceNum(range) {\n  const roundedRange = Math.round(range);\n  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n  const niceRange = Math.pow(10, Math.floor(log10(range)));\n  const fraction = range / niceRange;\n  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n  return niceFraction * niceRange;\n}\nfunction _factorize(value) {\n  const result = [];\n  const sqrt = Math.sqrt(value);\n  let i;\n  for (i = 1; i < sqrt; i++) {\n    if (value % i === 0) {\n      result.push(i);\n      result.push(value / i);\n    }\n  }\n  if (sqrt === (sqrt | 0)) {\n    result.push(sqrt);\n  }\n  result.sort((a, b) => a - b).pop();\n  return result;\n}\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostEquals(x, y, epsilon) {\n  return Math.abs(x - y) < epsilon;\n}\nfunction almostWhole(x, epsilon) {\n  const rounded = Math.round(x);\n  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\n}\nfunction _setMinAndMaxByKey(array, target, property) {\n  let i, ilen, value;\n  for (i = 0, ilen = array.length; i < ilen; i++) {\n    value = array[i][property];\n    if (!isNaN(value)) {\n      target.min = Math.min(target.min, value);\n      target.max = Math.max(target.max, value);\n    }\n  }\n}\nfunction toRadians(degrees) {\n  return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n  return radians * (180 / PI);\n}\nfunction _decimalPlaces(x) {\n  if (!isNumberFinite(x)) {\n    return;\n  }\n  let e = 1;\n  let p = 0;\n  while (Math.round(x * e) / e !== x) {\n    e *= 10;\n    p++;\n  }\n  return p;\n}\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n  const distanceFromXCenter = anglePoint.x - centrePoint.x;\n  const distanceFromYCenter = anglePoint.y - centrePoint.y;\n  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n  if (angle < (-0.5 * PI)) {\n    angle += TAU;\n  }\n  return {\n    angle,\n    distance: radialDistanceFromCenter\n  };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\nfunction _angleDiff(a, b) {\n  return (a - b + PITAU) % TAU - PI;\n}\nfunction _normalizeAngle(a) {\n  return (a % TAU + TAU) % TAU;\n}\nfunction _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n  const a = _normalizeAngle(angle);\n  const s = _normalizeAngle(start);\n  const e = _normalizeAngle(end);\n  const angleToStart = _normalizeAngle(s - a);\n  const angleToEnd = _normalizeAngle(e - a);\n  const startToAngle = _normalizeAngle(a - s);\n  const endToAngle = _normalizeAngle(a - e);\n  return a === s || a === e || (sameAngleIsFullCircle && s === e)\n    || (angleToStart > angleToEnd && startToAngle < endToAngle);\n}\nfunction _limitValue(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\nfunction _int16Range(value) {\n  return _limitValue(value, -32768, 32767);\n}\nfunction _isBetween(value, start, end, epsilon = 1e-6) {\n  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n  cmp = cmp || ((index) => table[index] < value);\n  let hi = table.length - 1;\n  let lo = 0;\n  let mid;\n  while (hi - lo > 1) {\n    mid = (lo + hi) >> 1;\n    if (cmp(mid)) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n  return {lo, hi};\n}\nconst _lookupByKey = (table, key, value, last) =>\n  _lookup(table, value, last\n    ? index => table[index][key] <= value\n    : index => table[index][key] < value);\nconst _rlookupByKey = (table, key, value) =>\n  _lookup(table, value, index => table[index][key] >= value);\nfunction _filterBetween(values, min, max) {\n  let start = 0;\n  let end = values.length;\n  while (start < end && values[start] < min) {\n    start++;\n  }\n  while (end > start && values[end - 1] > max) {\n    end--;\n  }\n  return start > 0 || end < values.length\n    ? values.slice(start, end)\n    : values;\n}\nconst arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\nfunction listenArrayEvents(array, listener) {\n  if (array._chartjs) {\n    array._chartjs.listeners.push(listener);\n    return;\n  }\n  Object.defineProperty(array, '_chartjs', {\n    configurable: true,\n    enumerable: false,\n    value: {\n      listeners: [listener]\n    }\n  });\n  arrayEvents.forEach((key) => {\n    const method = '_onData' + _capitalize(key);\n    const base = array[key];\n    Object.defineProperty(array, key, {\n      configurable: true,\n      enumerable: false,\n      value(...args) {\n        const res = base.apply(this, args);\n        array._chartjs.listeners.forEach((object) => {\n          if (typeof object[method] === 'function') {\n            object[method](...args);\n          }\n        });\n        return res;\n      }\n    });\n  });\n}\nfunction unlistenArrayEvents(array, listener) {\n  const stub = array._chartjs;\n  if (!stub) {\n    return;\n  }\n  const listeners = stub.listeners;\n  const index = listeners.indexOf(listener);\n  if (index !== -1) {\n    listeners.splice(index, 1);\n  }\n  if (listeners.length > 0) {\n    return;\n  }\n  arrayEvents.forEach((key) => {\n    delete array[key];\n  });\n  delete array._chartjs;\n}\nfunction _arrayUnique(items) {\n  const set = new Set();\n  let i, ilen;\n  for (i = 0, ilen = items.length; i < ilen; ++i) {\n    set.add(items[i]);\n  }\n  if (set.size === ilen) {\n    return items;\n  }\n  return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\nconst requestAnimFrame = (function() {\n  if (typeof window === 'undefined') {\n    return function(callback) {\n      return callback();\n    };\n  }\n  return window.requestAnimationFrame;\n}());\nfunction throttled(fn, thisArg, updateFn) {\n  const updateArgs = updateFn || ((args) => Array.prototype.slice.call(args));\n  let ticking = false;\n  let args = [];\n  return function(...rest) {\n    args = updateArgs(rest);\n    if (!ticking) {\n      ticking = true;\n      requestAnimFrame.call(window, () => {\n        ticking = false;\n        fn.apply(thisArg, args);\n      });\n    }\n  };\n}\nfunction debounce(fn, delay) {\n  let timeout;\n  return function(...args) {\n    if (delay) {\n      clearTimeout(timeout);\n      timeout = setTimeout(fn, delay, args);\n    } else {\n      fn.apply(this, args);\n    }\n    return delay;\n  };\n}\nconst _toLeftRightCenter = (align) => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\nconst _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\nconst _textX = (align, left, right, rtl) => {\n  const check = rtl ? 'left' : 'right';\n  return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\nfunction _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n  const pointCount = points.length;\n  let start = 0;\n  let count = pointCount;\n  if (meta._sorted) {\n    const {iScale, _parsed} = meta;\n    const axis = iScale.axis;\n    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n    if (minDefined) {\n      start = _limitValue(Math.min(\n        _lookupByKey(_parsed, iScale.axis, min).lo,\n        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),\n      0, pointCount - 1);\n    }\n    if (maxDefined) {\n      count = _limitValue(Math.max(\n        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,\n        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1),\n      start, pointCount) - start;\n    } else {\n      count = pointCount - start;\n    }\n  }\n  return {start, count};\n}\nfunction _scaleRangesChanged(meta) {\n  const {xScale, yScale, _scaleRanges} = meta;\n  const newRanges = {\n    xmin: xScale.min,\n    xmax: xScale.max,\n    ymin: yScale.min,\n    ymax: yScale.max\n  };\n  if (!_scaleRanges) {\n    meta._scaleRanges = newRanges;\n    return true;\n  }\n  const changed = _scaleRanges.xmin !== xScale.min\n\t\t|| _scaleRanges.xmax !== xScale.max\n\t\t|| _scaleRanges.ymin !== yScale.min\n\t\t|| _scaleRanges.ymax !== yScale.max;\n  Object.assign(_scaleRanges, newRanges);\n  return changed;\n}\n\nconst atEdge = (t) => t === 0 || t === 1;\nconst elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\nconst effects = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => -t * (t - 2),\n  easeInOutQuad: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t\n    : -0.5 * ((--t) * (t - 2) - 1),\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => (t -= 1) * t * t + 1,\n  easeInOutCubic: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t\n    : 0.5 * ((t -= 2) * t * t + 2),\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => -((t -= 1) * t * t * t - 1),\n  easeInOutQuart: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t\n    : -0.5 * ((t -= 2) * t * t * t - 2),\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => (t -= 1) * t * t * t * t + 1,\n  easeInOutQuint: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t * t\n    : 0.5 * ((t -= 2) * t * t * t * t + 2),\n  easeInSine: t => -Math.cos(t * HALF_PI) + 1,\n  easeOutSine: t => Math.sin(t * HALF_PI),\n  easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),\n  easeInExpo: t => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),\n  easeOutExpo: t => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,\n  easeInOutExpo: t => atEdge(t) ? t : t < 0.5\n    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))\n    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n  easeInCirc: t => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),\n  easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),\n  easeInOutCirc: t => ((t /= 0.5) < 1)\n    ? -0.5 * (Math.sqrt(1 - t * t) - 1)\n    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n  easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n  easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n  easeInOutElastic(t) {\n    const s = 0.1125;\n    const p = 0.45;\n    return atEdge(t) ? t :\n      t < 0.5\n        ? 0.5 * elasticIn(t * 2, s, p)\n        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n  },\n  easeInBack(t) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n  },\n  easeOutBack(t) {\n    const s = 1.70158;\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\n  },\n  easeInOutBack(t) {\n    let s = 1.70158;\n    if ((t /= 0.5) < 1) {\n      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n    }\n    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n  },\n  easeInBounce: t => 1 - effects.easeOutBounce(1 - t),\n  easeOutBounce(t) {\n    const m = 7.5625;\n    const d = 2.75;\n    if (t < (1 / d)) {\n      return m * t * t;\n    }\n    if (t < (2 / d)) {\n      return m * (t -= (1.5 / d)) * t + 0.75;\n    }\n    if (t < (2.5 / d)) {\n      return m * (t -= (2.25 / d)) * t + 0.9375;\n    }\n    return m * (t -= (2.625 / d)) * t + 0.984375;\n  },\n  easeInOutBounce: t => (t < 0.5)\n    ? effects.easeInBounce(t * 2) * 0.5\n    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,\n};\n\n/*!\n * @kurkle/color v0.2.1\n * https://github.com/kurkle/color#readme\n * (c) 2022 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nfunction isPatternOrGradient(value) {\n  if (value && typeof value === 'object') {\n    const type = value.toString();\n    return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n  }\n  return false;\n}\nfunction color(value) {\n  return isPatternOrGradient(value) ? value : index_esm(value);\n}\nfunction getHoverColor(value) {\n  return isPatternOrGradient(value)\n    ? value\n    : index_esm(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\nfunction getScope$1(node, key) {\n  if (!key) {\n    return node;\n  }\n  const keys = key.split('.');\n  for (let i = 0, n = keys.length; i < n; ++i) {\n    const k = keys[i];\n    node = node[k] || (node[k] = Object.create(null));\n  }\n  return node;\n}\nfunction set(root, scope, values) {\n  if (typeof scope === 'string') {\n    return merge(getScope$1(root, scope), values);\n  }\n  return merge(getScope$1(root, ''), scope);\n}\nclass Defaults {\n  constructor(_descriptors) {\n    this.animation = undefined;\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\n    this.borderColor = 'rgba(0,0,0,0.1)';\n    this.color = '#666';\n    this.datasets = {};\n    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();\n    this.elements = {};\n    this.events = [\n      'mousemove',\n      'mouseout',\n      'click',\n      'touchstart',\n      'touchmove'\n    ];\n    this.font = {\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n      size: 12,\n      style: 'normal',\n      lineHeight: 1.2,\n      weight: null\n    };\n    this.hover = {};\n    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\n    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\n    this.hoverColor = (ctx, options) => getHoverColor(options.color);\n    this.indexAxis = 'x';\n    this.interaction = {\n      mode: 'nearest',\n      intersect: true,\n      includeInvisible: false\n    };\n    this.maintainAspectRatio = true;\n    this.onHover = null;\n    this.onClick = null;\n    this.parsing = true;\n    this.plugins = {};\n    this.responsive = true;\n    this.scale = undefined;\n    this.scales = {};\n    this.showLine = true;\n    this.drawActiveElementsOnTop = true;\n    this.describe(_descriptors);\n  }\n  set(scope, values) {\n    return set(this, scope, values);\n  }\n  get(scope) {\n    return getScope$1(this, scope);\n  }\n  describe(scope, values) {\n    return set(descriptors, scope, values);\n  }\n  override(scope, values) {\n    return set(overrides, scope, values);\n  }\n  route(scope, name, targetScope, targetName) {\n    const scopeObject = getScope$1(this, scope);\n    const targetScopeObject = getScope$1(this, targetScope);\n    const privateName = '_' + name;\n    Object.defineProperties(scopeObject, {\n      [privateName]: {\n        value: scopeObject[name],\n        writable: true\n      },\n      [name]: {\n        enumerable: true,\n        get() {\n          const local = this[privateName];\n          const target = targetScopeObject[targetName];\n          if (isObject(local)) {\n            return Object.assign({}, target, local);\n          }\n          return valueOrDefault(local, target);\n        },\n        set(value) {\n          this[privateName] = value;\n        }\n      }\n    });\n  }\n}\nvar defaults = new Defaults({\n  _scriptable: (name) => !name.startsWith('on'),\n  _indexable: (name) => name !== 'events',\n  hover: {\n    _fallback: 'interaction'\n  },\n  interaction: {\n    _scriptable: false,\n    _indexable: false,\n  }\n});\n\nfunction toFontString(font) {\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n    return null;\n  }\n  return (font.style ? font.style + ' ' : '')\n\t\t+ (font.weight ? font.weight + ' ' : '')\n\t\t+ font.size + 'px '\n\t\t+ font.family;\n}\nfunction _measureText(ctx, data, gc, longest, string) {\n  let textWidth = data[string];\n  if (!textWidth) {\n    textWidth = data[string] = ctx.measureText(string).width;\n    gc.push(string);\n  }\n  if (textWidth > longest) {\n    longest = textWidth;\n  }\n  return longest;\n}\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n  cache = cache || {};\n  let data = cache.data = cache.data || {};\n  let gc = cache.garbageCollect = cache.garbageCollect || [];\n  if (cache.font !== font) {\n    data = cache.data = {};\n    gc = cache.garbageCollect = [];\n    cache.font = font;\n  }\n  ctx.save();\n  ctx.font = font;\n  let longest = 0;\n  const ilen = arrayOfThings.length;\n  let i, j, jlen, thing, nestedThing;\n  for (i = 0; i < ilen; i++) {\n    thing = arrayOfThings[i];\n    if (thing !== undefined && thing !== null && isArray(thing) !== true) {\n      longest = _measureText(ctx, data, gc, longest, thing);\n    } else if (isArray(thing)) {\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\n        nestedThing = thing[j];\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\n        }\n      }\n    }\n  }\n  ctx.restore();\n  const gcLen = gc.length / 2;\n  if (gcLen > arrayOfThings.length) {\n    for (i = 0; i < gcLen; i++) {\n      delete data[gc[i]];\n    }\n    gc.splice(0, gcLen);\n  }\n  return longest;\n}\nfunction _alignPixel(chart, pixel, width) {\n  const devicePixelRatio = chart.currentDevicePixelRatio;\n  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\nfunction clearCanvas(canvas, ctx) {\n  ctx = ctx || canvas.getContext('2d');\n  ctx.save();\n  ctx.resetTransform();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n  drawPointLegend(ctx, options, x, y, null);\n}\nfunction drawPointLegend(ctx, options, x, y, w) {\n  let type, xOffset, yOffset, size, cornerRadius, width;\n  const style = options.pointStyle;\n  const rotation = options.rotation;\n  const radius = options.radius;\n  let rad = (rotation || 0) * RAD_PER_DEG;\n  if (style && typeof style === 'object') {\n    type = style.toString();\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(rad);\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n      ctx.restore();\n      return;\n    }\n  }\n  if (isNaN(radius) || radius <= 0) {\n    return;\n  }\n  ctx.beginPath();\n  switch (style) {\n  default:\n    if (w) {\n      ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n    } else {\n      ctx.arc(x, y, radius, 0, TAU);\n    }\n    ctx.closePath();\n    break;\n  case 'triangle':\n    ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    rad += TWO_THIRDS_PI;\n    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    rad += TWO_THIRDS_PI;\n    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    ctx.closePath();\n    break;\n  case 'rectRounded':\n    cornerRadius = radius * 0.516;\n    size = radius - cornerRadius;\n    xOffset = Math.cos(rad + QUARTER_PI) * size;\n    yOffset = Math.sin(rad + QUARTER_PI) * size;\n    ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n    ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n    ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n    ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n    ctx.closePath();\n    break;\n  case 'rect':\n    if (!rotation) {\n      size = Math.SQRT1_2 * radius;\n      width = w ? w / 2 : size;\n      ctx.rect(x - width, y - size, 2 * width, 2 * size);\n      break;\n    }\n    rad += QUARTER_PI;\n  case 'rectRot':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    ctx.closePath();\n    break;\n  case 'crossRot':\n    rad += QUARTER_PI;\n  case 'cross':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    break;\n  case 'star':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    rad += QUARTER_PI;\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    break;\n  case 'line':\n    xOffset = w ? w / 2 : Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    break;\n  case 'dash':\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n    break;\n  }\n  ctx.fill();\n  if (options.borderWidth > 0) {\n    ctx.stroke();\n  }\n}\nfunction _isPointInArea(point, area, margin) {\n  margin = margin || 0.5;\n  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&\n\t\tpoint.y > area.top - margin && point.y < area.bottom + margin);\n}\nfunction clipArea(ctx, area) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n  ctx.clip();\n}\nfunction unclipArea(ctx) {\n  ctx.restore();\n}\nfunction _steppedLineTo(ctx, previous, target, flip, mode) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  if (mode === 'middle') {\n    const midpoint = (previous.x + target.x) / 2.0;\n    ctx.lineTo(midpoint, previous.y);\n    ctx.lineTo(midpoint, target.y);\n  } else if (mode === 'after' !== !!flip) {\n    ctx.lineTo(previous.x, target.y);\n  } else {\n    ctx.lineTo(target.x, previous.y);\n  }\n  ctx.lineTo(target.x, target.y);\n}\nfunction _bezierCurveTo(ctx, previous, target, flip) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  ctx.bezierCurveTo(\n    flip ? previous.cp1x : previous.cp2x,\n    flip ? previous.cp1y : previous.cp2y,\n    flip ? target.cp2x : target.cp1x,\n    flip ? target.cp2y : target.cp1y,\n    target.x,\n    target.y);\n}\nfunction renderText(ctx, text, x, y, font, opts = {}) {\n  const lines = isArray(text) ? text : [text];\n  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n  let i, line;\n  ctx.save();\n  ctx.font = font.string;\n  setRenderOpts(ctx, opts);\n  for (i = 0; i < lines.length; ++i) {\n    line = lines[i];\n    if (stroke) {\n      if (opts.strokeColor) {\n        ctx.strokeStyle = opts.strokeColor;\n      }\n      if (!isNullOrUndef(opts.strokeWidth)) {\n        ctx.lineWidth = opts.strokeWidth;\n      }\n      ctx.strokeText(line, x, y, opts.maxWidth);\n    }\n    ctx.fillText(line, x, y, opts.maxWidth);\n    decorateText(ctx, x, y, line, opts);\n    y += font.lineHeight;\n  }\n  ctx.restore();\n}\nfunction setRenderOpts(ctx, opts) {\n  if (opts.translation) {\n    ctx.translate(opts.translation[0], opts.translation[1]);\n  }\n  if (!isNullOrUndef(opts.rotation)) {\n    ctx.rotate(opts.rotation);\n  }\n  if (opts.color) {\n    ctx.fillStyle = opts.color;\n  }\n  if (opts.textAlign) {\n    ctx.textAlign = opts.textAlign;\n  }\n  if (opts.textBaseline) {\n    ctx.textBaseline = opts.textBaseline;\n  }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n  if (opts.strikethrough || opts.underline) {\n    const metrics = ctx.measureText(line);\n    const left = x - metrics.actualBoundingBoxLeft;\n    const right = x + metrics.actualBoundingBoxRight;\n    const top = y - metrics.actualBoundingBoxAscent;\n    const bottom = y + metrics.actualBoundingBoxDescent;\n    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.beginPath();\n    ctx.lineWidth = opts.decorationWidth || 2;\n    ctx.moveTo(left, yDecoration);\n    ctx.lineTo(right, yDecoration);\n    ctx.stroke();\n  }\n}\nfunction addRoundedRectPath(ctx, rect) {\n  const {x, y, w, h, radius} = rect;\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\n  ctx.lineTo(x, y + h - radius.bottomLeft);\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n  ctx.lineTo(x + w, y + radius.topRight);\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n  ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\nconst FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\nfunction toLineHeight(value, size) {\n  const matches = ('' + value).match(LINE_HEIGHT);\n  if (!matches || matches[1] === 'normal') {\n    return size * 1.2;\n  }\n  value = +matches[2];\n  switch (matches[3]) {\n  case 'px':\n    return value;\n  case '%':\n    value /= 100;\n    break;\n  }\n  return size * value;\n}\nconst numberOrZero = v => +v || 0;\nfunction _readValueToProps(value, props) {\n  const ret = {};\n  const objProps = isObject(props);\n  const keys = objProps ? Object.keys(props) : props;\n  const read = isObject(value)\n    ? objProps\n      ? prop => valueOrDefault(value[prop], value[props[prop]])\n      : prop => value[prop]\n    : () => value;\n  for (const prop of keys) {\n    ret[prop] = numberOrZero(read(prop));\n  }\n  return ret;\n}\nfunction toTRBL(value) {\n  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});\n}\nfunction toTRBLCorners(value) {\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\n}\nfunction toPadding(value) {\n  const obj = toTRBL(value);\n  obj.width = obj.left + obj.right;\n  obj.height = obj.top + obj.bottom;\n  return obj;\n}\nfunction toFont(options, fallback) {\n  options = options || {};\n  fallback = fallback || defaults.font;\n  let size = valueOrDefault(options.size, fallback.size);\n  if (typeof size === 'string') {\n    size = parseInt(size, 10);\n  }\n  let style = valueOrDefault(options.style, fallback.style);\n  if (style && !('' + style).match(FONT_STYLE)) {\n    console.warn('Invalid font style specified: \"' + style + '\"');\n    style = '';\n  }\n  const font = {\n    family: valueOrDefault(options.family, fallback.family),\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n    size,\n    style,\n    weight: valueOrDefault(options.weight, fallback.weight),\n    string: ''\n  };\n  font.string = toFontString(font);\n  return font;\n}\nfunction resolve(inputs, context, index, info) {\n  let cacheable = true;\n  let i, ilen, value;\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n    value = inputs[i];\n    if (value === undefined) {\n      continue;\n    }\n    if (context !== undefined && typeof value === 'function') {\n      value = value(context);\n      cacheable = false;\n    }\n    if (index !== undefined && isArray(value)) {\n      value = value[index % value.length];\n      cacheable = false;\n    }\n    if (value !== undefined) {\n      if (info && !cacheable) {\n        info.cacheable = false;\n      }\n      return value;\n    }\n  }\n}\nfunction _addGrace(minmax, grace, beginAtZero) {\n  const {min, max} = minmax;\n  const change = toDimension(grace, (max - min) / 2);\n  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;\n  return {\n    min: keepZero(min, -Math.abs(change)),\n    max: keepZero(max, change)\n  };\n}\nfunction createContext(parentContext, context) {\n  return Object.assign(Object.create(parentContext), context);\n}\n\nfunction _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {\n  if (!defined(fallback)) {\n    fallback = _resolve('_fallback', scopes);\n  }\n  const cache = {\n    [Symbol.toStringTag]: 'Object',\n    _cacheable: true,\n    _scopes: scopes,\n    _rootScopes: rootScopes,\n    _fallback: fallback,\n    _getTarget: getTarget,\n    override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete target._keys;\n      delete scopes[0][prop];\n      return true;\n    },\n    get(target, prop) {\n      return _cached(target, prop,\n        () => _resolveWithPrefixes(prop, prefixes, scopes, target));\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(scopes[0]);\n    },\n    has(target, prop) {\n      return getKeysFromAllScopes(target).includes(prop);\n    },\n    ownKeys(target) {\n      return getKeysFromAllScopes(target);\n    },\n    set(target, prop, value) {\n      const storage = target._storage || (target._storage = getTarget());\n      target[prop] = storage[prop] = value;\n      delete target._keys;\n      return true;\n    }\n  });\n}\nfunction _attachContext(proxy, context, subProxy, descriptorDefaults) {\n  const cache = {\n    _cacheable: false,\n    _proxy: proxy,\n    _context: context,\n    _subProxy: subProxy,\n    _stack: new Set(),\n    _descriptors: _descriptors(proxy, descriptorDefaults),\n    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\n    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete proxy[prop];\n      return true;\n    },\n    get(target, prop, receiver) {\n      return _cached(target, prop,\n        () => _resolveWithContext(target, prop, receiver));\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      return target._descriptors.allKeys\n        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined\n        : Reflect.getOwnPropertyDescriptor(proxy, prop);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(proxy);\n    },\n    has(target, prop) {\n      return Reflect.has(proxy, prop);\n    },\n    ownKeys() {\n      return Reflect.ownKeys(proxy);\n    },\n    set(target, prop, value) {\n      proxy[prop] = value;\n      delete target[prop];\n      return true;\n    }\n  });\n}\nfunction _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {\n  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;\n  return {\n    allKeys: _allKeys,\n    scriptable: _scriptable,\n    indexable: _indexable,\n    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\n    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\n  };\n}\nconst readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters' &&\n  (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n  if (Object.prototype.hasOwnProperty.call(target, prop)) {\n    return target[prop];\n  }\n  const value = resolve();\n  target[prop] = value;\n  return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  let value = _proxy[prop];\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\n    value = _resolveScriptable(prop, value, target, receiver);\n  }\n  if (isArray(value) && value.length) {\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\n  }\n  if (needsSubResolver(prop, value)) {\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n  }\n  return value;\n}\nfunction _resolveScriptable(prop, value, target, receiver) {\n  const {_proxy, _context, _subProxy, _stack} = target;\n  if (_stack.has(prop)) {\n    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n  }\n  _stack.add(prop);\n  value = value(_context, _subProxy || receiver);\n  _stack.delete(prop);\n  if (needsSubResolver(prop, value)) {\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n  }\n  return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  if (defined(_context.index) && isIndexable(prop)) {\n    value = value[_context.index % value.length];\n  } else if (isObject(value[0])) {\n    const arr = value;\n    const scopes = _proxy._scopes.filter(s => s !== arr);\n    value = [];\n    for (const item of arr) {\n      const resolver = createSubResolver(scopes, _proxy, prop, item);\n      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n    }\n  }\n  return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent) => key === true ? parent\n  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n  for (const parent of parentScopes) {\n    const scope = getScope(key, parent);\n    if (scope) {\n      set.add(scope);\n      const fallback = resolveFallback(scope._fallback, key, value);\n      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {\n        return fallback;\n      }\n    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {\n      return null;\n    }\n  }\n  return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n  const rootScopes = resolver._rootScopes;\n  const fallback = resolveFallback(resolver._fallback, prop, value);\n  const allScopes = [...parentScopes, ...rootScopes];\n  const set = new Set();\n  set.add(value);\n  let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n  if (key === null) {\n    return false;\n  }\n  if (defined(fallback) && fallback !== prop) {\n    key = addScopesFromKey(set, allScopes, fallback, key, value);\n    if (key === null) {\n      return false;\n    }\n  }\n  return _createResolver(Array.from(set), [''], rootScopes, fallback,\n    () => subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n  while (key) {\n    key = addScopes(set, allScopes, key, fallback, item);\n  }\n  return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n  const parent = resolver._getTarget();\n  if (!(prop in parent)) {\n    parent[prop] = {};\n  }\n  const target = parent[prop];\n  if (isArray(target) && isObject(value)) {\n    return value;\n  }\n  return target;\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n  let value;\n  for (const prefix of prefixes) {\n    value = _resolve(readKey(prefix, prop), scopes);\n    if (defined(value)) {\n      return needsSubResolver(prop, value)\n        ? createSubResolver(scopes, proxy, prop, value)\n        : value;\n    }\n  }\n}\nfunction _resolve(key, scopes) {\n  for (const scope of scopes) {\n    if (!scope) {\n      continue;\n    }\n    const value = scope[key];\n    if (defined(value)) {\n      return value;\n    }\n  }\n}\nfunction getKeysFromAllScopes(target) {\n  let keys = target._keys;\n  if (!keys) {\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n  }\n  return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n  const set = new Set();\n  for (const scope of scopes) {\n    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\n      set.add(key);\n    }\n  }\n  return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n  const {iScale} = meta;\n  const {key = 'r'} = this._parsing;\n  const parsed = new Array(count);\n  let i, ilen, index, item;\n  for (i = 0, ilen = count; i < ilen; ++i) {\n    index = i + start;\n    item = data[index];\n    parsed[i] = {\n      r: iScale.parse(resolveObjectKey(item, key), index)\n    };\n  }\n  return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i) => i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis) => indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n  const previous = firstPoint.skip ? middlePoint : firstPoint;\n  const current = middlePoint;\n  const next = afterPoint.skip ? middlePoint : afterPoint;\n  const d01 = distanceBetweenPoints(current, previous);\n  const d12 = distanceBetweenPoints(next, current);\n  let s01 = d01 / (d01 + d12);\n  let s12 = d12 / (d01 + d12);\n  s01 = isNaN(s01) ? 0 : s01;\n  s12 = isNaN(s12) ? 0 : s12;\n  const fa = t * s01;\n  const fb = t * s12;\n  return {\n    previous: {\n      x: current.x - fa * (next.x - previous.x),\n      y: current.y - fa * (next.y - previous.y)\n    },\n    next: {\n      x: current.x + fb * (next.x - previous.x),\n      y: current.y + fb * (next.y - previous.y)\n    }\n  };\n}\nfunction monotoneAdjust(points, deltaK, mK) {\n  const pointsLen = points.length;\n  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen - 1; ++i) {\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent || !pointAfter) {\n      continue;\n    }\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\n      mK[i] = mK[i + 1] = 0;\n      continue;\n    }\n    alphaK = mK[i] / deltaK[i];\n    betaK = mK[i + 1] / deltaK[i];\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n    if (squaredMagnitude <= 9) {\n      continue;\n    }\n    tauK = 3 / Math.sqrt(squaredMagnitude);\n    mK[i] = alphaK * tauK * deltaK[i];\n    mK[i + 1] = betaK * tauK * deltaK[i];\n  }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  let delta, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n    const iPixel = pointCurrent[indexAxis];\n    const vPixel = pointCurrent[valueAxis];\n    if (pointBefore) {\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\n      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n    }\n    if (pointAfter) {\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\n      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n    }\n  }\n}\nfunction splineCurveMonotone(points, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  const deltaK = Array(pointsLen).fill(0);\n  const mK = Array(pointsLen);\n  let i, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n    if (pointAfter) {\n      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n    }\n    mK[i] = !pointBefore ? deltaK[i]\n      : !pointAfter ? deltaK[i - 1]\n      : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0\n      : (deltaK[i - 1] + deltaK[i]) / 2;\n  }\n  monotoneAdjust(points, deltaK, mK);\n  monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n  return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n  let i, ilen, point, inArea, inAreaPrev;\n  let inAreaNext = _isPointInArea(points[0], area);\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\n    inAreaPrev = inArea;\n    inArea = inAreaNext;\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n    if (!inArea) {\n      continue;\n    }\n    point = points[i];\n    if (inAreaPrev) {\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n    }\n    if (inAreaNext) {\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n    }\n  }\n}\nfunction _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n  let i, ilen, point, controlPoints;\n  if (options.spanGaps) {\n    points = points.filter((pt) => !pt.skip);\n  }\n  if (options.cubicInterpolationMode === 'monotone') {\n    splineCurveMonotone(points, indexAxis);\n  } else {\n    let prev = loop ? points[points.length - 1] : points[0];\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\n      point = points[i];\n      controlPoints = splineCurve(\n        prev,\n        point,\n        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],\n        options.tension\n      );\n      point.cp1x = controlPoints.previous.x;\n      point.cp1y = controlPoints.previous.y;\n      point.cp2x = controlPoints.next.x;\n      point.cp2y = controlPoints.next.y;\n      prev = point;\n    }\n  }\n  if (options.capBezierPoints) {\n    capBezierPoints(points, area);\n  }\n}\n\nfunction _isDomSupported() {\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\nfunction _getParentNode(domNode) {\n  let parent = domNode.parentNode;\n  if (parent && parent.toString() === '[object ShadowRoot]') {\n    parent = parent.host;\n  }\n  return parent;\n}\nfunction parseMaxStyle(styleValue, node, parentProperty) {\n  let valueInPixels;\n  if (typeof styleValue === 'string') {\n    valueInPixels = parseInt(styleValue, 10);\n    if (styleValue.indexOf('%') !== -1) {\n      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n    }\n  } else {\n    valueInPixels = styleValue;\n  }\n  return valueInPixels;\n}\nconst getComputedStyle = (element) => window.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n  return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = ['top', 'right', 'bottom', 'left'];\nfunction getPositionedStyle(styles, style, suffix) {\n  const result = {};\n  suffix = suffix ? '-' + suffix : '';\n  for (let i = 0; i < 4; i++) {\n    const pos = positions[i];\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n  }\n  result.width = result.left + result.right;\n  result.height = result.top + result.bottom;\n  return result;\n}\nconst useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);\nfunction getCanvasPosition(e, canvas) {\n  const touches = e.touches;\n  const source = touches && touches.length ? touches[0] : e;\n  const {offsetX, offsetY} = source;\n  let box = false;\n  let x, y;\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\n    x = offsetX;\n    y = offsetY;\n  } else {\n    const rect = canvas.getBoundingClientRect();\n    x = source.clientX - rect.left;\n    y = source.clientY - rect.top;\n    box = true;\n  }\n  return {x, y, box};\n}\nfunction getRelativePosition(evt, chart) {\n  if ('native' in evt) {\n    return evt;\n  }\n  const {canvas, currentDevicePixelRatio} = chart;\n  const style = getComputedStyle(canvas);\n  const borderBox = style.boxSizing === 'border-box';\n  const paddings = getPositionedStyle(style, 'padding');\n  const borders = getPositionedStyle(style, 'border', 'width');\n  const {x, y, box} = getCanvasPosition(evt, canvas);\n  const xOffset = paddings.left + (box && borders.left);\n  const yOffset = paddings.top + (box && borders.top);\n  let {width, height} = chart;\n  if (borderBox) {\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  return {\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n  };\n}\nfunction getContainerSize(canvas, width, height) {\n  let maxWidth, maxHeight;\n  if (width === undefined || height === undefined) {\n    const container = _getParentNode(canvas);\n    if (!container) {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    } else {\n      const rect = container.getBoundingClientRect();\n      const containerStyle = getComputedStyle(container);\n      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n      const containerPadding = getPositionedStyle(containerStyle, 'padding');\n      width = rect.width - containerPadding.width - containerBorder.width;\n      height = rect.height - containerPadding.height - containerBorder.height;\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n    }\n  }\n  return {\n    width,\n    height,\n    maxWidth: maxWidth || INFINITY,\n    maxHeight: maxHeight || INFINITY\n  };\n}\nconst round1 = v => Math.round(v * 10) / 10;\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n  const style = getComputedStyle(canvas);\n  const margins = getPositionedStyle(style, 'margin');\n  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n  let {width, height} = containerSize;\n  if (style.boxSizing === 'content-box') {\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const paddings = getPositionedStyle(style, 'padding');\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  width = Math.max(0, width - margins.width);\n  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n  if (width && !height) {\n    height = round1(width / 2);\n  }\n  return {\n    width,\n    height\n  };\n}\nfunction retinaScale(chart, forceRatio, forceStyle) {\n  const pixelRatio = forceRatio || 1;\n  const deviceHeight = Math.floor(chart.height * pixelRatio);\n  const deviceWidth = Math.floor(chart.width * pixelRatio);\n  chart.height = deviceHeight / pixelRatio;\n  chart.width = deviceWidth / pixelRatio;\n  const canvas = chart.canvas;\n  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {\n    canvas.style.height = `${chart.height}px`;\n    canvas.style.width = `${chart.width}px`;\n  }\n  if (chart.currentDevicePixelRatio !== pixelRatio\n      || canvas.height !== deviceHeight\n      || canvas.width !== deviceWidth) {\n    chart.currentDevicePixelRatio = pixelRatio;\n    canvas.height = deviceHeight;\n    canvas.width = deviceWidth;\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    return true;\n  }\n  return false;\n}\nconst supportsEventListenerOptions = (function() {\n  let passiveSupported = false;\n  try {\n    const options = {\n      get passive() {\n        passiveSupported = true;\n        return false;\n      }\n    };\n    window.addEventListener('test', null, options);\n    window.removeEventListener('test', null, options);\n  } catch (e) {\n  }\n  return passiveSupported;\n}());\nfunction readUsedSize(element, property) {\n  const value = getStyle(element, property);\n  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n  return matches ? +matches[1] : undefined;\n}\n\nfunction _pointInLine(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: p1.y + t * (p2.y - p1.y)\n  };\n}\nfunction _steppedInterpolation(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y\n    : mode === 'after' ? t < 1 ? p1.y : p2.y\n    : t > 0 ? p2.y : p1.y\n  };\n}\nfunction _bezierInterpolation(p1, p2, t, mode) {\n  const cp1 = {x: p1.cp2x, y: p1.cp2y};\n  const cp2 = {x: p2.cp1x, y: p2.cp1y};\n  const a = _pointInLine(p1, cp1, t);\n  const b = _pointInLine(cp1, cp2, t);\n  const c = _pointInLine(cp2, p2, t);\n  const d = _pointInLine(a, b, t);\n  const e = _pointInLine(b, c, t);\n  return _pointInLine(d, e, t);\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n  options = options || {};\n  const cacheKey = locale + JSON.stringify(options);\n  let formatter = intlCache.get(cacheKey);\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(locale, options);\n    intlCache.set(cacheKey, formatter);\n  }\n  return formatter;\n}\nfunction formatNumber(num, locale, options) {\n  return getNumberFormat(locale, options).format(num);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n  return {\n    x(x) {\n      return rectX + rectX + width - x;\n    },\n    setWidth(w) {\n      width = w;\n    },\n    textAlign(align) {\n      if (align === 'center') {\n        return align;\n      }\n      return align === 'right' ? 'left' : 'right';\n    },\n    xPlus(x, value) {\n      return x - value;\n    },\n    leftForLtr(x, itemWidth) {\n      return x - itemWidth;\n    },\n  };\n};\nconst getLeftToRightAdapter = function() {\n  return {\n    x(x) {\n      return x;\n    },\n    setWidth(w) {\n    },\n    textAlign(align) {\n      return align;\n    },\n    xPlus(x, value) {\n      return x + value;\n    },\n    leftForLtr(x, _itemWidth) {\n      return x;\n    },\n  };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n  let style, original;\n  if (direction === 'ltr' || direction === 'rtl') {\n    style = ctx.canvas.style;\n    original = [\n      style.getPropertyValue('direction'),\n      style.getPropertyPriority('direction'),\n    ];\n    style.setProperty('direction', direction, 'important');\n    ctx.prevTextDirection = original;\n  }\n}\nfunction restoreTextDirection(ctx, original) {\n  if (original !== undefined) {\n    delete ctx.prevTextDirection;\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\n  }\n}\n\nfunction propertyFn(property) {\n  if (property === 'angle') {\n    return {\n      between: _angleBetween,\n      compare: _angleDiff,\n      normalize: _normalizeAngle,\n    };\n  }\n  return {\n    between: _isBetween,\n    compare: (a, b) => a - b,\n    normalize: x => x\n  };\n}\nfunction normalizeSegment({start, end, count, loop, style}) {\n  return {\n    start: start % count,\n    end: end % count,\n    loop: loop && (end - start + 1) % count === 0,\n    style\n  };\n}\nfunction getSegment(segment, points, bounds) {\n  const {property, start: startBound, end: endBound} = bounds;\n  const {between, normalize} = propertyFn(property);\n  const count = points.length;\n  let {start, end, loop} = segment;\n  let i, ilen;\n  if (loop) {\n    start += count;\n    end += count;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n        break;\n      }\n      start--;\n      end--;\n    }\n    start %= count;\n    end %= count;\n  }\n  if (end < start) {\n    end += count;\n  }\n  return {start, end, loop, style: segment.style};\n}\nfunction _boundSegment(segment, points, bounds) {\n  if (!bounds) {\n    return [segment];\n  }\n  const {property, start: startBound, end: endBound} = bounds;\n  const count = points.length;\n  const {compare, between, normalize} = propertyFn(property);\n  const {start, end, loop, style} = getSegment(segment, points, bounds);\n  const result = [];\n  let inside = false;\n  let subStart = null;\n  let value, point, prevValue;\n  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\n  const shouldStart = () => inside || startIsBefore();\n  const shouldStop = () => !inside || endIsBefore();\n  for (let i = start, prev = start; i <= end; ++i) {\n    point = points[i % count];\n    if (point.skip) {\n      continue;\n    }\n    value = normalize(point[property]);\n    if (value === prevValue) {\n      continue;\n    }\n    inside = between(value, startBound, endBound);\n    if (subStart === null && shouldStart()) {\n      subStart = compare(value, startBound) === 0 ? i : prev;\n    }\n    if (subStart !== null && shouldStop()) {\n      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));\n      subStart = null;\n    }\n    prev = i;\n    prevValue = value;\n  }\n  if (subStart !== null) {\n    result.push(normalizeSegment({start: subStart, end, loop, count, style}));\n  }\n  return result;\n}\nfunction _boundSegments(line, bounds) {\n  const result = [];\n  const segments = line.segments;\n  for (let i = 0; i < segments.length; i++) {\n    const sub = _boundSegment(segments[i], line.points, bounds);\n    if (sub.length) {\n      result.push(...sub);\n    }\n  }\n  return result;\n}\nfunction findStartAndEnd(points, count, loop, spanGaps) {\n  let start = 0;\n  let end = count - 1;\n  if (loop && !spanGaps) {\n    while (start < count && !points[start].skip) {\n      start++;\n    }\n  }\n  while (start < count && points[start].skip) {\n    start++;\n  }\n  start %= count;\n  if (loop) {\n    end += start;\n  }\n  while (end > start && points[end % count].skip) {\n    end--;\n  }\n  end %= count;\n  return {start, end};\n}\nfunction solidSegments(points, start, max, loop) {\n  const count = points.length;\n  const result = [];\n  let last = start;\n  let prev = points[start];\n  let end;\n  for (end = start + 1; end <= max; ++end) {\n    const cur = points[end % count];\n    if (cur.skip || cur.stop) {\n      if (!prev.skip) {\n        loop = false;\n        result.push({start: start % count, end: (end - 1) % count, loop});\n        start = last = cur.stop ? end : null;\n      }\n    } else {\n      last = end;\n      if (prev.skip) {\n        start = end;\n      }\n    }\n    prev = cur;\n  }\n  if (last !== null) {\n    result.push({start: start % count, end: last % count, loop});\n  }\n  return result;\n}\nfunction _computeSegments(line, segmentOptions) {\n  const points = line.points;\n  const spanGaps = line.options.spanGaps;\n  const count = points.length;\n  if (!count) {\n    return [];\n  }\n  const loop = !!line._loop;\n  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);\n  if (spanGaps === true) {\n    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);\n  }\n  const max = end < start ? end + count : end;\n  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\nfunction splitByStyles(line, segments, points, segmentOptions) {\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\n    return segments;\n  }\n  return doSplitByStyles(line, segments, points, segmentOptions);\n}\nfunction doSplitByStyles(line, segments, points, segmentOptions) {\n  const chartContext = line._chart.getContext();\n  const baseStyle = readStyle(line.options);\n  const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;\n  const count = points.length;\n  const result = [];\n  let prevStyle = baseStyle;\n  let start = segments[0].start;\n  let i = start;\n  function addStyle(s, e, l, st) {\n    const dir = spanGaps ? -1 : 1;\n    if (s === e) {\n      return;\n    }\n    s += count;\n    while (points[s % count].skip) {\n      s -= dir;\n    }\n    while (points[e % count].skip) {\n      e += dir;\n    }\n    if (s % count !== e % count) {\n      result.push({start: s % count, end: e % count, loop: l, style: st});\n      prevStyle = st;\n      start = e % count;\n    }\n  }\n  for (const segment of segments) {\n    start = spanGaps ? start : segment.start;\n    let prev = points[start % count];\n    let style;\n    for (i = start + 1; i <= segment.end; i++) {\n      const pt = points[i % count];\n      style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n        type: 'segment',\n        p0: prev,\n        p1: pt,\n        p0DataIndex: (i - 1) % count,\n        p1DataIndex: i % count,\n        datasetIndex\n      })));\n      if (styleChanged(style, prevStyle)) {\n        addStyle(start, i - 1, segment.loop, prevStyle);\n      }\n      prev = pt;\n      prevStyle = style;\n    }\n    if (start < i - 1) {\n      addStyle(start, i - 1, segment.loop, prevStyle);\n    }\n  }\n  return result;\n}\nfunction readStyle(options) {\n  return {\n    backgroundColor: options.backgroundColor,\n    borderCapStyle: options.borderCapStyle,\n    borderDash: options.borderDash,\n    borderDashOffset: options.borderDashOffset,\n    borderJoinStyle: options.borderJoinStyle,\n    borderWidth: options.borderWidth,\n    borderColor: options.borderColor\n  };\n}\nfunction styleChanged(style, prevStyle) {\n  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);\n}\n\nexport { _isPointInArea as $, _factorize as A, finiteOrDefault as B, callback as C, _addGrace as D, _limitValue as E, toDegrees as F, _measureText as G, HALF_PI as H, _int16Range as I, _alignPixel as J, toPadding as K, clipArea as L, renderText as M, unclipArea as N, toFont as O, PI as P, each as Q, _toLeftRightCenter as R, _alignStartEnd as S, TAU as T, overrides as U, merge as V, _capitalize as W, getRelativePosition as X, _rlookupByKey as Y, _lookupByKey as Z, _arrayUnique as _, resolve as a, toLineHeight as a$, getAngleFromPoint as a0, getMaximumSize as a1, _getParentNode as a2, readUsedSize as a3, throttled as a4, supportsEventListenerOptions as a5, _isDomSupported as a6, descriptors as a7, isFunction as a8, _attachContext as a9, getRtlAdapter as aA, overrideTextDirection as aB, _textX as aC, restoreTextDirection as aD, drawPointLegend as aE, noop as aF, distanceBetweenPoints as aG, _setMinAndMaxByKey as aH, niceNum as aI, almostWhole as aJ, almostEquals as aK, _decimalPlaces as aL, _longestText as aM, _filterBetween as aN, _lookup as aO, isPatternOrGradient as aP, getHoverColor as aQ, clone$1 as aR, _merger as aS, _mergerIf as aT, _deprecated as aU, _splitKey as aV, toFontString as aW, splineCurve as aX, splineCurveMonotone as aY, getStyle as aZ, fontString as a_, _createResolver as aa, _descriptors as ab, mergeIf as ac, uid as ad, debounce as ae, retinaScale as af, clearCanvas as ag, setsEqual as ah, _elementsEqual as ai, _isClickEvent as aj, _isBetween as ak, _readValueToProps as al, _updateBezierControlPoints as am, _computeSegments as an, _boundSegments as ao, _steppedInterpolation as ap, _bezierInterpolation as aq, _pointInLine as ar, _steppedLineTo as as, _bezierCurveTo as at, drawPoint as au, addRoundedRectPath as av, toTRBL as aw, toTRBLCorners as ax, _boundSegment as ay, _normalizeAngle as az, isArray as b, PITAU as b0, INFINITY as b1, RAD_PER_DEG as b2, QUARTER_PI as b3, TWO_THIRDS_PI as b4, _angleDiff as b5, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, createContext as h, isObject as i, defined as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, log10 as z };\n","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/core-js/modules/web.dom.iterable.js\");","import ChartJS from 'chart.js/auto';\nexport { default as Chart } from 'chart.js/auto';\nexport { defaults } from 'chart.js';\nimport React, { forwardRef, useRef, useState, useEffect } from 'react';\n\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n\nfunction _objectSpread(target) {\n    var _arguments = arguments, _loop = function(i) {\n        var source = _arguments[i] != null ? _arguments[i] : {\n        };\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === 'function') {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    };\n    for(var i = 1; i < arguments.length; i++)_loop(i);\n    return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {\n    };\n    var target = {\n    };\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {\n    };\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\n\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n}\n\nfunction reforwardRef(ref, value) {\n    if (typeof ref === 'function') {\n        ref(value);\n    } else if (ref) {\n        ref.current = value;\n    }\n}\nfunction setOptions(chart, nextOptions) {\n    chart.options = _objectSpread({\n    }, nextOptions);\n}\nfunction setLabels(currentData, nextLabels) {\n    currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets) {\n    currentData.datasets = nextDatasets.map(function(nextDataset) {\n        // given the new set, find it's current match\n        var currentDataset = currentData.datasets.find(function(dataset) {\n            return dataset.label === nextDataset.label && dataset.type === nextDataset.type;\n        });\n        // There is no original to update, so simply add new one\n        if (!currentDataset || !nextDataset.data) return _objectSpread({\n        }, nextDataset);\n        Object.assign(currentDataset, nextDataset);\n        return currentDataset;\n    });\n}\nfunction cloneData(data) {\n    var nextData = {\n        labels: [],\n        datasets: []\n    };\n    setLabels(nextData, data.labels);\n    setDatasets(nextData, data.datasets);\n    return nextData;\n}\n\nvar noopData = {\n    datasets: []\n};\nfunction ChartComponent(_param, ref) {\n    var _height = _param.height, height = _height === void 0 ? 150 : _height, _width = _param.width, width = _width === void 0 ? 300 : _width, _redraw = _param.redraw, redraw = _redraw === void 0 ? false : _redraw, type = _param.type, dataProp = _param.data, options = _param.options, _plugins = _param.plugins, plugins = _plugins === void 0 ? [] : _plugins, getDatasetAtEvent = _param.getDatasetAtEvent, getElementAtEvent = _param.getElementAtEvent, getElementsAtEvent = _param.getElementsAtEvent, fallbackContent = _param.fallbackContent, onClickProp = _param.onClick, props = _objectWithoutProperties(_param, [\n        \"height\",\n        \"width\",\n        \"redraw\",\n        \"type\",\n        \"data\",\n        \"options\",\n        \"plugins\",\n        \"getDatasetAtEvent\",\n        \"getElementAtEvent\",\n        \"getElementsAtEvent\",\n        \"fallbackContent\",\n        \"onClick\"\n    ]);\n    var canvasRef = useRef(null);\n    var chartRef = useRef();\n    /**\n   * In case `dataProp` is function use internal state\n   */ var ref1 = _slicedToArray(useState()), computedData = ref1[0], setComputedData = ref1[1];\n    var data = computedData || (typeof dataProp === 'function' ? noopData : dataProp);\n    var renderChart = function() {\n        if (!canvasRef.current) return;\n        chartRef.current = new ChartJS(canvasRef.current, {\n            type: type,\n            data: cloneData(data),\n            options: options,\n            plugins: plugins\n        });\n        reforwardRef(ref, chartRef.current);\n    };\n    var destroyChart = function() {\n        reforwardRef(ref, null);\n        if (chartRef.current) {\n            chartRef.current.destroy();\n            chartRef.current = null;\n        }\n    };\n    var onClick = function(event) {\n        if (onClickProp) {\n            onClickProp(event);\n        }\n        var chart = chartRef.current;\n        if (!chart) return;\n        getDatasetAtEvent && getDatasetAtEvent(chart.getElementsAtEventForMode(event.nativeEvent, 'dataset', {\n            intersect: true\n        }, false), event);\n        getElementAtEvent && getElementAtEvent(chart.getElementsAtEventForMode(event.nativeEvent, 'nearest', {\n            intersect: true\n        }, false), event);\n        getElementsAtEvent && getElementsAtEvent(chart.getElementsAtEventForMode(event.nativeEvent, 'index', {\n            intersect: true\n        }, false), event);\n    };\n    /**\n   * In case `dataProp` is function,\n   * then update internal state\n   */ useEffect(function() {\n        if (typeof dataProp === 'function' && canvasRef.current) {\n            setComputedData(dataProp(canvasRef.current));\n        }\n    }, [\n        dataProp\n    ]);\n    useEffect(function() {\n        if (!redraw && chartRef.current && options) {\n            setOptions(chartRef.current, options);\n        }\n    }, [\n        redraw,\n        options\n    ]);\n    useEffect(function() {\n        if (!redraw && chartRef.current) {\n            setLabels(chartRef.current.config.data, data.labels);\n        }\n    }, [\n        redraw,\n        data.labels\n    ]);\n    useEffect(function() {\n        if (!redraw && chartRef.current && data.datasets) {\n            setDatasets(chartRef.current.config.data, data.datasets);\n        }\n    }, [\n        redraw,\n        data.datasets\n    ]);\n    useEffect(function() {\n        if (!chartRef.current) return;\n        if (redraw) {\n            destroyChart();\n            setTimeout(renderChart);\n        } else {\n            chartRef.current.update();\n        }\n    }, [\n        redraw,\n        options,\n        data.labels,\n        data.datasets\n    ]);\n    useEffect(function() {\n        renderChart();\n        return function() {\n            return destroyChart();\n        };\n    }, []);\n    return(/*#__PURE__*/ React.createElement(\"canvas\", Object.assign({\n        ref: canvasRef,\n        role: \"img\",\n        height: height,\n        width: width,\n        onClick: onClick\n    }, props), fallbackContent));\n}\nvar Chart = /*#__PURE__*/ forwardRef(ChartComponent);\n\nfunction createTypedChart(type) {\n    return(/*#__PURE__*/ forwardRef(function(props, ref) {\n         return React.createElement(Chart, Object.assign({\n        }, props, {\n            ref: ref,\n            type: type\n        }));\n    }));\n}\nvar Line = createTypedChart('line');\nvar Bar = createTypedChart('bar');\nvar Radar = createTypedChart('radar');\nvar Doughnut = createTypedChart('doughnut');\nvar PolarArea = createTypedChart('polarArea');\nvar Bubble = createTypedChart('bubble');\nvar Pie = createTypedChart('pie');\nvar Scatter = createTypedChart('scatter');\n\nexport { Bar, Bubble, Doughnut, Line, Pie, PolarArea, Radar, Scatter, Chart as default };\n//# sourceMappingURL=index.modern.js.map\n","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/react-router-dom/esm/react-router-dom.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/react/index.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/react/jsx-runtime.js\");","module.exports = (__webpack_require__(\"dll-reference app\"))(\"../../node_modules/regenerator-runtime/runtime.js\");","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\n\nimport { requestRest, requestRestExt } from '../../../../framework/src/services/restService';\nimport { convertPropertyNames, replaceHyphen } from '../../../../framework/src/utilities/yangHelper';\n\nimport { NetworkElementConnection } from '../models/networkElementConnection';\n\ntype ImportOnlyResponse = {\n  'ietf-yang-library:yang-library': {\n    'module-set': {\n      'import-only-module': {\n        'name': string;\n        'revision': string;\n      }[];\n    }[];\n  };\n};\n\n\ntype CapabilityResponse = {\n  'network-topology:node': {\n    'node-id': string;\n    'netconf-node-topology:available-capabilities': {\n      'available-capability': {\n        'capability-origin': string;\n        'capability': string;\n      }[];\n    };\n    'netconf-node-topology:unavailable-capabilities': {\n      'unavailable-capability': {\n        'capability': string;\n        'failure-reason': string;\n      }[];\n    };\n  }[];\n};\n\ntype CapabilityAnswer = {\n  availableCapabilities: {\n    capabilityOrigin: string;\n    capability: string;\n    version: string;\n  }[] | null;\n  unavailableCapabilities: {\n    failureReason: string;\n    capability: string;\n    version: string;\n  }[] | null;\n  importOnlyModules: {\n    name: string;\n    revision: string;\n  }[] | null;\n};\n\nconst capParser = /^\\(.*\\?revision=(\\d{4}-\\d{2}-\\d{2})\\)(\\S+)$/i;\n\nclass ConfigurationRestService {\n  public getNetworkElementUri = (nodeId: string) => '/rests/data/network-topology:network-topology/topology=topology-netconf/node=' + nodeId;\n\n  public async getImportOnlyModules(nodeId: string): Promise<{ name: string; revision: string }[]> {\n    const path = `${this.getNetworkElementUri(nodeId)}/yang-ext:mount/ietf-yang-library:yang-library?content=nonconfig&fields=module-set(import-only-module(name;revision))`;\n    const importOnlyResult = await requestRest<ImportOnlyResponse>(path, { method: 'GET' });\n    const importOnlyModules = importOnlyResult\n      ? importOnlyResult['ietf-yang-library:yang-library']['module-set'][0]['import-only-module']\n      : [];\n    return importOnlyModules;\n  }\n\n  public async getCapabilitiesByMountId(nodeId: string): Promise<CapabilityAnswer> {\n\n    const path = this.getNetworkElementUri(nodeId);\n    const capabilitiesResult = await requestRest<CapabilityResponse>(path, { method: 'GET' });\n    const availableCapabilities = capabilitiesResult && capabilitiesResult['network-topology:node'] && capabilitiesResult['network-topology:node'].length > 0 &&\n      (capabilitiesResult['network-topology:node'][0]['netconf-node-topology:available-capabilities'] &&\n        capabilitiesResult['network-topology:node'][0]['netconf-node-topology:available-capabilities']['available-capability'] &&\n        capabilitiesResult['network-topology:node'][0]['netconf-node-topology:available-capabilities']['available-capability'].map<any>(obj => convertPropertyNames(obj, replaceHyphen)) || [])\n        .map(cap => {\n          const capMatch = cap && capParser.exec(cap.capability);\n          return capMatch ? {\n            capabilityOrigin: cap.capabilityOrigin,\n            capability: capMatch && capMatch[2] || '',\n            version: capMatch && capMatch[1] || '',\n          } : null ;\n        }).filter((cap) => cap != null) || [] as any;\n\n    const unavailableCapabilities = capabilitiesResult && capabilitiesResult['network-topology:node'] && capabilitiesResult['network-topology:node'].length > 0 &&\n      (capabilitiesResult['network-topology:node'][0]['netconf-node-topology:unavailable-capabilities'] &&\n      capabilitiesResult['network-topology:node'][0]['netconf-node-topology:unavailable-capabilities']['unavailable-capability'] &&\n      capabilitiesResult['network-topology:node'][0]['netconf-node-topology:unavailable-capabilities']['unavailable-capability'].map<any>(obj => convertPropertyNames(obj, replaceHyphen)) || [])\n        .map(cap => {\n          const capMatch = cap && capParser.exec(cap.capability);\n          return capMatch ? {\n            failureReason: cap.failureReason,\n            capability: capMatch && capMatch[2] || '',\n            version: capMatch && capMatch[1] || '',\n          } : null ;\n        }).filter((cap) => cap != null) || [] as any;\n\n    const importOnlyModules = availableCapabilities && availableCapabilities.findIndex((ac: { capability: string }) => ac.capability && ac.capability.toLowerCase() === 'ietf-yang-library') > -1\n      ? await this.getImportOnlyModules(nodeId)\n      : null;\n\n    return { availableCapabilities, unavailableCapabilities, importOnlyModules };\n  }\n\n  public async getMountedNetworkElementByMountId(nodeId: string): Promise<NetworkElementConnection | null> {\n    // const path = 'restconf/operational/network-topology:network-topology/topology/topology-netconf/node/' + nodeId;\n    // const connectedNetworkElement = await requestRest<NetworkElementConnection>(path, { method: \"GET\" });\n    // return connectedNetworkElement || null;\n\n    const path = '/rests/operations/data-provider:read-network-element-connection-list';\n    const body = { 'data-provider:input': { 'filter': [{ 'property': 'node-id', 'filtervalue': nodeId }], 'sortorder': [], 'pagination': { 'size': 1, 'page': 1 } } };\n    const networkElementResult = await requestRest<{ 'data-provider:output': { data: NetworkElementConnection[] } }>(path, { method: 'POST', body: JSON.stringify(body) });\n    return networkElementResult && networkElementResult['data-provider:output'] && networkElementResult['data-provider:output'].data &&\n      networkElementResult['data-provider:output'].data.map(obj => convertPropertyNames(obj, replaceHyphen))[0] || null;\n  }\n\n  /** Reads the config data by restconf path.\n  * @param path The restconf path to be used for read.\n  * @returns The data.\n  */\n  public getConfigData(path: string) {\n    return requestRestExt<{ [key: string]: any }>(path, { method: 'GET' });\n  }\n\n  /** Updates or creates the config data by restconf path using data.\n   * @param path The restconf path to identify the note to update.\n   * @param data The data to be updated.\n   * @returns The written data.\n   */\n  public setConfigData(path: string, data: any) {\n    return requestRestExt<{ [key: string]: any }>(path, { method: 'PUT', body: JSON.stringify(data) });\n  }\n\n  public executeRpc(path: string, data: any) {\n    return requestRestExt<{ [key: string]: any }>(path, { method: 'POST', body: JSON.stringify(data) });\n  }\n\n  /** Removes the element by restconf path.\n  * @param path The restconf path to identify the note to update.\n  * @returns The restconf result.\n  */\n  public removeConfigElement(path: string) {\n    return requestRestExt<{ [key: string]: any }>(path, { method: 'DELETE' });\n  }\n}\n\nexport const configurationRestService = new ConfigurationRestService();\nexport default configurationRestService;","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\n\nconst cache: { [path: string]: string } = { };\nconst getCapability = async (capability: string, nodeId: string, version?: string) => {\n  const url = `/yang-schema/${capability}${version ? `/${version}` : ''}?node=${nodeId}`;\n\n  const cacheHit = cache[url];\n  if (cacheHit) return cacheHit;\n\n  const res = await  Promise.resolve(fetch(url));\n  const yangFile = res.ok && (await res.text());\n  if (yangFile !== false && yangFile !== null) {\n    cache[url] = yangFile;\n  }\n  return yangFile;\n};\n\nexport const yangService = {\n  getCapability,\n};\nexport default yangService;","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\n\n\nimport { Dispatch } from '../../../../framework/src/flux/store';\n\nimport { clearStuckAlarms } from '../services/faultStatusService';\nimport { FaultApplicationBaseAction } from './notificationActions';\n\nexport class AreStuckAlarmsCleared extends FaultApplicationBaseAction {\n  constructor(public isBusy: boolean) {\n    super();\n  }\n}\n\n\nexport const clearStuckAlarmAsyncAction = (dispatch: Dispatch) => async (nodeNames: string[]) => {\n  dispatch(new AreStuckAlarmsCleared(true));\n  const result = await clearStuckAlarms(nodeNames).catch(error => { console.error(error); return undefined; });\n  dispatch(new AreStuckAlarmsCleared(false));\n  return result;\n};","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\nimport { Action } from '../../../../framework/src/flux/action';\n\nimport { FaultAlarmNotification } from '../models/fault';\n\nexport class FaultApplicationBaseAction extends Action { }\n\n\nexport class AddFaultNotificationAction extends FaultApplicationBaseAction {\n  constructor(public fault:FaultAlarmNotification) {\n    super();\n  }\n}\n\nexport class ResetFaultNotificationsAction extends FaultApplicationBaseAction {\n \n}\n","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\nimport { Action } from '../../../../framework/src/flux/action';\n\nimport { PanelId } from '../models/panelId';\n\nexport class SetPanelAction extends Action {\n  constructor(public panelId: PanelId) {\n    super();\n  }\n}\n\nexport class RememberCurrentPanelAction extends Action {\n  constructor(public panelId: PanelId) {\n    super();\n  }\n}\n\nexport const setPanelAction = (panelId: PanelId) => {\n  return new SetPanelAction(panelId);\n};\n\n","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\nimport { Dispatch } from '../../../../framework/src/flux/store';\n\nimport { getFaultStateFromDatabase } from '../services/faultStatusService';\nimport { FaultApplicationBaseAction } from './notificationActions';\n\n\nexport class SetFaultStatusAction extends FaultApplicationBaseAction {\n  constructor(public criticalFaults: number, public majorFaults: number, public minorFaults: number, public warnings: number,\n    public isLoadingAlarmStatusChart: boolean, public ConnectedCount: number, public ConnectingCount: number, public DisconnectedCount: number,\n    public MountedCount: number, public UnableToConnectCount: number, public UndefinedCount: number, public UnmountedCount: number,\n    public totalCount: number, public isLoadingConnectionStatusChart: boolean) {\n    super();\n  }\n}\n\n\nexport const refreshFaultStatusAsyncAction = async (dispatch: Dispatch) => {\n\n  // dispatch(new SetFaultStatusAction(0, 0, 0, 0, true, 0, 0, 0, 0, 0, 0, 0, 0, true));\n  const result = await getFaultStateFromDatabase().catch(_ => null);\n  if (result) {\n    const statusAction = new SetFaultStatusAction(\n      result.Critical || 0,\n      result.Major || 0,\n      result.Minor || 0,\n      result.Warning || 0,\n      false,\n      result.Connected || 0,\n      result.Connecting || 0,\n      result.Disconnected || 0,\n      result.Mounted || 0,\n      result.UnableToConnect || 0,\n      result.Undefined || 0,\n      result.Unmounted || 0,\n      result.total || 0,\n      false,\n    );\n    dispatch(statusAction);\n    return;\n  } else {\n    dispatch(new SetFaultStatusAction(0, 0, 0, 0, false, 0, 0, 0, 0, 0, 0, 0, 0, false));\n  }\n};\n","module.exports = __webpack_public_path__ + \"./images/faultAppIcon.svg\";","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\n\nimport React from 'react';\n\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material';\n\nimport { connect, Connect, IDispatcher } from '../../../../framework/src/flux/connect';\n\nimport { clearStuckAlarmAsyncAction } from '../actions/clearStuckAlarmsAction';\nimport { currentAlarmsReloadAction } from '../handlers/currentAlarmsHandler';\n\nexport enum ClearStuckAlarmsDialogMode {\n  None = 'none',\n  Show = 'show',\n}\n\nconst mapDispatch = (dispatcher: IDispatcher) => ({\n  clearStuckAlarmsAsync: clearStuckAlarmAsyncAction(dispatcher.dispatch),\n  reloadCurrentAlarmsAction: () => dispatcher.dispatch(currentAlarmsReloadAction),\n});\n\ntype clearStuckAlarmsProps = Connect<typeof undefined, typeof mapDispatch> & {\n  numberDevices: Number;\n  mode: ClearStuckAlarmsDialogMode;\n  stuckAlarms: string[];\n  onClose: () => void;\n};\n\ntype ClearStuckAlarmsState = {\n  clearAlarmsSuccessful: boolean;\n  errormessage: string;\n  unclearedAlarms: string[];\n};\n\nclass ClearStuckAlarmsDialogComponent extends React.Component<clearStuckAlarmsProps, ClearStuckAlarmsState> {\n  constructor(props: clearStuckAlarmsProps) {\n    super(props);\n    this.state = {\n      clearAlarmsSuccessful: true,\n      errormessage: '',\n      unclearedAlarms: [],\n    };\n  }\n\n  onClose = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    this.props.onClose();\n  };\n\n  onRefresh = async (event: React.MouseEvent) => {\n    event.stopPropagation();\n    event.preventDefault();\n    const result = await this.props.clearStuckAlarmsAsync(this.props.stuckAlarms);\n\n    if (result && result['devicemanager:output'].nodenames && result['devicemanager:output'].nodenames.length !== this.props.stuckAlarms.length) { //show errormessage if not all devices were cleared\n      const undeletedAlarm = this.props.stuckAlarms.filter(item => !result['devicemanager:output'].nodenames.includes(item));\n      const error = 'The alarms of the following devices couldn\\'t be refreshed: ';\n      this.setState({ clearAlarmsSuccessful: false, errormessage: error, unclearedAlarms: undeletedAlarm });\n      return;\n\n    } else { //show errormessage if no devices were cleared\n      this.setState({ clearAlarmsSuccessful: false, errormessage: 'Alarms couldn\\'t be refreshed.', unclearedAlarms: [] });\n    }\n\n    this.props.reloadCurrentAlarmsAction();\n    this.props.onClose();\n  };\n\n  onOk = (event: React.MouseEvent) => {\n\n    event.stopPropagation();\n    event.preventDefault();\n    if (this.state.unclearedAlarms.length > 0)\n      this.props.reloadCurrentAlarmsAction();\n    this.props.onClose();\n  };\n\n  render() {\n    console.log(this.props.stuckAlarms);\n    const device = this.props.numberDevices > 1 ? 'devices' : 'device';\n    const defaultMessage = 'Are you sure you want to refresh all alarms for ' + this.props.numberDevices + ' ' + device + '?';\n    const message = this.state.clearAlarmsSuccessful ? defaultMessage : this.state.errormessage;\n\n    const defaultTitle = 'Refresh Confirmation';\n    const title = this.state.clearAlarmsSuccessful ? defaultTitle : 'Refresh Result';\n\n    return (\n      <Dialog open={this.props.mode !== ClearStuckAlarmsDialogMode.None}>\n        <DialogTitle>{title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {message}\n          </DialogContentText>\n          {\n            this.state.unclearedAlarms.map(item =>\n              <DialogContentText>\n                {item}\n              </DialogContentText>,\n            )\n          }\n        </DialogContent>\n        <DialogActions>\n          {\n            this.state.clearAlarmsSuccessful &&\n            <>\n              <Button color=\"inherit\" onClick={this.onRefresh}>Yes</Button>\n              <Button color=\"inherit\" onClick={this.onClose}>No</Button>\n            </>\n          }\n\n          {\n            !this.state.clearAlarmsSuccessful && <Button color=\"inherit\" onClick={this.onOk}>Ok</Button>\n          }\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nconst ClearStuckAlarmsDialog = connect(undefined, mapDispatch)(ClearStuckAlarmsDialogComponent);\nexport default ClearStuckAlarmsDialog;\n","/**\r\n * ============LICENSE_START========================================================================\r\n * ONAP : ccsdk feature sdnr wt odlux\r\n * =================================================================================================\r\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\r\n * =================================================================================================\r\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\r\n * =================================================================================================\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n * ============LICENSE_END==========================================================================\r\n */\r\nimport React from 'react';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\n\r\nimport { WithStyles } from '@mui/styles';\r\nimport createStyles from '@mui/styles/createStyles';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { connect, Connect, IDispatcher, useSelectApplicationState } from '../../../../framework/src/flux/connect';\r\n\r\nimport { NavigateToApplication } from '../../../../framework/src/actions/navigationActions';\r\nimport { IApplicationStoreState } from '../../../../framework/src/store/applicationStore';\r\nimport { configurationRestService } from '../../../configurationApp/src/services/configurationrestServices';\r\nimport { yangService } from '../../../configurationApp/src/services/yangService';\r\nimport axios from 'axios';\r\nimport { render } from 'react-dom';\r\nconst styles = () => createStyles({\r\n  pageWidthSettings: {\r\n    width: '50%',\r\n    float: 'left',\r\n  },\r\n});\r\n\r\n//const netWorkElements = useSelectApplicationState(state => state.connect.networkElements);\r\n\r\nconst scrollbar = { overflow: 'auto', paddingRight: '20px' };\r\n\r\nlet connectionStatusinitialLoad = true;\r\nlet connectionStatusinitialStateChanged = false;\r\nlet connectionStatusDataLoad: number[] = [0, 0, 0, 0];\r\nlet connectionTotalCount = 0;\r\n\r\nlet alarmStatusinitialLoad = true;\r\nlet alarmStatusinitialStateChanged = false;\r\nlet alarmStatusDataLoad: number[] = [0, 0, 0, 0];\r\nlet alarmTotalCount = 0;\r\n\r\nconst mapProps = (state: IApplicationStoreState) => ({\r\n  alarmStatus: state.fault.faultStatus,\r\n});\r\n\r\nconst mapDispatch = (dispatcher: IDispatcher) => ({\r\n  navigateToApplication: (applicationName: string, path?: string) => dispatcher.dispatch(new NavigateToApplication(applicationName, path)),\r\n});\r\n// React.useEffect(()=>{\r\n\r\n//   const networkElements=['O-RU-11221','O-RU-11222'];\r\n\r\n//   if (networkElements.length > 0) {\r\n  \r\n//     let confdata: { id: string; cndata: { availableCapabilities: { capabilityOrigin: string; capability: string; version: string; }[] | null; unavailableCapabilities: { failureReason: string; capability: string; version: string; }[] | null; importOnlyModules: { name: string; revision: string; }[] | null; }; }[]  = []\r\n//     let nodedata:any;\r\n//     let yangdata:any;\r\n//    let  yangdataArray: { id: string;  capability: string; }[]=[];\r\n//       for(var i = 0; i < networkElements.length; i++){\r\n//        let nid:any;\r\n//        nid =  networkElements[i]? networkElements[i]:\"0\";\r\n//         configurationRestService.getCapabilitiesByMountId(nid)\r\n//         .then(async (res: any) => {\r\n//             localStorage.removeItem(\"configData\");\r\n//             localStorage.removeItem(\"yangdataArray\");\r\n//             nodedata={id:nid.toString(), cndata:res};\r\n//             for (let i = 0; i < nodedata.cndata.availableCapabilities.length; ++i) \r\n//             {\r\n//                 const capRaw = nodedata.cndata.availableCapabilities[i];\r\n//                 const data =  await yangService.getCapability(capRaw.capability, nid, capRaw.version);\r\n//                 yangdata={nid, capability:capRaw.capability, ydata:data};\r\n//                 yangdataArray.push(yangdata)\r\n//             }\r\n//             confdata.push(nodedata)\r\n//             localStorage.setItem(\"yangdataArray\",JSON.stringify(yangdataArray));\r\n//             localStorage.setItem(\"configData\",JSON.stringify(confdata));\r\n//           }).catch((err: any) => {\r\n//             console.log(err);\r\n//         })\r\n//       }\r\n//   }\r\n// });\r\n\r\ntype HomeComponentProps = RouteComponentProps & Connect<typeof mapProps, typeof mapDispatch> & WithStyles<typeof styles>;\r\n\r\nclass DashboardHome extends React.Component<HomeComponentProps>  {\r\n  constructor(props: HomeComponentProps) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n    const networkElementsdta: any[]=[];\r\n\r\n    const baseUri = `${ window.location.origin }`;\r\n    //http://192.168.129.70:9200\r\n     axios.get(baseUri+'/networkelement-connection-v7/_search?_source=false').then((data: any) => {\r\n       // const data = data1.data.hits.hits;\r\n        for(var i =0;i<data.data.hits.hits.length;i++)\r\n        {\r\n          networkElementsdta.push(data.data.hits.hits[i]._id)\r\n        }\r\n        if (networkElementsdta.length > 0) {\r\n    \r\n          let confdata: { id: string; cndata: { availableCapabilities: { capabilityOrigin: string; capability: string; version: string; }[] | null; unavailableCapabilities: { failureReason: string; capability: string; version: string; }[] | null; importOnlyModules: { name: string; revision: string; }[] | null; }; }[]  = []\r\n          let nodedata:any;\r\n          let yangdata:any;\r\n         let  yangdataArray: { id: string;  capability: string; }[]=[];\r\n            for(var i = 0; i < networkElementsdta.length; i++){\r\n             let nid:any;\r\n             nid =  networkElementsdta[i]? networkElementsdta[i]:\"0\";\r\n              configurationRestService.getCapabilitiesByMountId(nid)\r\n              .then(async (res: any) => {\r\n                  localStorage.removeItem(\"configData\");\r\n                  localStorage.removeItem(\"yangdataArray\");\r\n                  nodedata={id:nid.toString(), cndata:res};\r\n                  confdata.push(nodedata)\r\n                  for (let i = 0; i < nodedata.cndata.availableCapabilities.length; ++i) \r\n                  {\r\n                      const capRaw = nodedata.cndata.availableCapabilities[i];\r\n                      const data =  await yangService.getCapability(capRaw.capability, nid, capRaw.version);\r\n                      yangdata={nid, capability:capRaw.capability, ydata:data};\r\n                      yangdataArray.push(yangdata)\r\n                  }\r\n                  localStorage.setItem(\"yangdataArray\",JSON.stringify(yangdataArray));\r\n                  localStorage.setItem(\"configData\",JSON.stringify(confdata));\r\n                }).catch((err: any) => {\r\n                  console.log(err);\r\n              })\r\n            }\r\n        }\r\n    \r\n       \r\n      }).catch((error) => {\r\n        console.error(\"Error networkelement-connection-v7: \", error);\r\n      })\r\n  \r\n  }\r\n  \r\n\r\n  render(): JSX.Element {\r\n    if (!this.props.alarmStatus.isLoadingConnectionStatusChart) {\r\n      connectionStatusDataLoad = [\r\n        this.props.alarmStatus.Connected,\r\n        this.props.alarmStatus.Connecting,\r\n        this.props.alarmStatus.Disconnected,\r\n        this.props.alarmStatus.UnableToConnect,\r\n        this.props.alarmStatus.Undefined,\r\n      ];\r\n      connectionTotalCount = this.props.alarmStatus.Connected + this.props.alarmStatus.Connecting\r\n        + this.props.alarmStatus.Disconnected + this.props.alarmStatus.UnableToConnect + this.props.alarmStatus.Undefined;\r\n\r\n    }\r\n\r\n    if (!this.props.alarmStatus.isLoadingAlarmStatusChart) {\r\n      alarmStatusDataLoad = [\r\n        this.props.alarmStatus.critical,\r\n        this.props.alarmStatus.major,\r\n        this.props.alarmStatus.minor,\r\n        this.props.alarmStatus.warning,\r\n      ];\r\n      alarmTotalCount = this.props.alarmStatus.critical + this.props.alarmStatus.major\r\n        + this.props.alarmStatus.minor + this.props.alarmStatus.warning;\r\n    }\r\n\r\n    /** Available Network Connection Status chart data */\r\n    const connectionStatusData = {\r\n      labels: [\r\n        'Connected: ' + this.props.alarmStatus.Connected,\r\n        'Connecting: ' + this.props.alarmStatus.Connecting,\r\n        'Disconnected: ' + this.props.alarmStatus.Disconnected,\r\n        'UnableToConnect: ' + this.props.alarmStatus.UnableToConnect,\r\n        'Undefined: ' + this.props.alarmStatus.Undefined,\r\n      ],\r\n      datasets: [{\r\n        labels: ['Connected', 'Connecting', 'Disconnected', 'UnableToConnect', 'Undefined'],\r\n        data: connectionStatusDataLoad,\r\n        backgroundColor: [\r\n          'rgb(0, 153, 51)',\r\n          'rgb(255, 102, 0)',\r\n          'rgb(240, 25, 10)',\r\n          'rgb(191, 191, 191)',\r\n          'rgb(242, 240, 240)',\r\n        ],\r\n      }],\r\n    };\r\n\r\n\r\n    /** No Devices available */\r\n    const connectionStatusUnavailableData = {\r\n      labels: ['No Devices available'],\r\n      datasets: [{\r\n        data: [1],\r\n        backgroundColor: [\r\n          'rgb(255, 255, 255)',\r\n        ],\r\n      }],\r\n    };\r\n\r\n    /** Loading Connection Status chart */\r\n    const connectionStatusisLoading = {\r\n      labels: ['Loading chart...'],\r\n      datasets: [{\r\n        data: [1],\r\n        backgroundColor: [\r\n          'rgb(255, 255, 255)',\r\n        ],\r\n      }],\r\n    };\r\n\r\n    /** Loading Alarm Status chart */\r\n    const alarmStatusisLoading = {\r\n      labels: ['Loading chart...'],\r\n      datasets: [{\r\n        data: [1],\r\n        backgroundColor: [\r\n          'rgb(255, 255, 255)',\r\n        ],\r\n      }],\r\n    };\r\n\r\n    /** Connection status options */\r\n    let labels: String[] = ['Connected', 'Connecting', 'Disconnected', 'UnableToConnect', 'Undefined'];\r\n    const connectionStatusOptions = {\r\n      tooltips: {\r\n        callbacks: {\r\n          label: (tooltipItem: any, data: any) => {\r\n            let label =\r\n              (data.datasets[tooltipItem.datasetIndex].labels &&\r\n                data.datasets[tooltipItem.datasetIndex].labels[\r\n                  tooltipItem.index\r\n                ]) ||\r\n              data.labels[tooltipItem.index] ||\r\n              '';\r\n            if (label) {\r\n              label += ': ';\r\n            }\r\n            label +=\r\n              data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] +\r\n              (data.datasets[tooltipItem.datasetIndex].labelSuffix || '');\r\n\r\n            return label;\r\n          },\r\n        },\r\n      },\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      animation: {\r\n        duration: 0,\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: true,\r\n          position: 'top',\r\n        },\r\n      },\r\n      onClick: (event: MouseEvent, item: any) => {\r\n        if (item[0]) {\r\n          let connectionStatus = labels[item[0]._index] + '';\r\n          this.props.navigateToApplication('connect', '/connectionStatus/' + connectionStatus);\r\n        }\r\n      },\r\n    };\r\n\r\n    /** Connection status unavailable options */\r\n    const connectionStatusUnavailableOptions = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      animation: {\r\n        duration: 0,\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: true,\r\n          position: 'top',\r\n        },\r\n        tooltip: {\r\n          enabled: false,\r\n        },\r\n      },\r\n    };\r\n\r\n    /** Add text inside the doughnut chart for Connection Status */\r\n    const connectionStatusPlugins = [{\r\n      beforeDraw: function (chart: any) {\r\n        var width = chart.width,\r\n          height = chart.height,\r\n          ctx = chart.ctx;\r\n        ctx.restore();\r\n        var fontSize = (height / 480).toFixed(2);\r\n        ctx.font = fontSize + 'em sans-serif';\r\n        ctx.textBaseline = 'top';\r\n        var text = 'Network Connection Status',\r\n          textX = Math.round((width - ctx.measureText(text).width) / 2),\r\n          textY = height / 2;\r\n        ctx.fillText(text, textX, textY);\r\n        ctx.save();\r\n      },\r\n    }];\r\n\r\n    /** Alarm status Data */\r\n    const alarmStatusData = {\r\n      labels: [\r\n        'Critical : ' + this.props.alarmStatus.critical,\r\n        'Major : ' + this.props.alarmStatus.major,\r\n        'Minor : ' + this.props.alarmStatus.minor,\r\n        'Warning : ' + this.props.alarmStatus.warning,\r\n      ],\r\n      datasets: [{\r\n        labels: ['Critical', 'Major', 'Minor', 'Warning'],\r\n        data: alarmStatusDataLoad,\r\n        backgroundColor: [\r\n          'rgb(240, 25, 10)',\r\n          'rgb(240, 133, 10)',\r\n          'rgb(240, 240, 10)',\r\n          'rgb(46, 115, 176)',\r\n        ],\r\n      }],\r\n    };\r\n\r\n    /** No Alarm status available */\r\n    const alarmStatusUnavailableData = {\r\n      labels: ['No Alarms available'],\r\n      datasets: [{\r\n        data: [1],\r\n        backgroundColor: [\r\n          'rgb(255, 255, 255)',\r\n        ],\r\n      }],\r\n    };\r\n\r\n    /** Alarm status Options */\r\n    let alarmLabels: String[] = ['Critical', 'Major', 'Minor', 'Warning'];\r\n    const alarmStatusOptions = {\r\n      tooltips: {\r\n        callbacks: {\r\n          label: (tooltipItem: any, data: any) => {\r\n            let label =\r\n              (data.datasets[tooltipItem.datasetIndex].labels &&\r\n                data.datasets[tooltipItem.datasetIndex].labels[\r\n                  tooltipItem.index\r\n                ]) ||\r\n              data.labels[tooltipItem.index] ||\r\n              '';\r\n            if (label) {\r\n              label += ': ';\r\n            }\r\n            label +=\r\n              data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] +\r\n              (data.datasets[tooltipItem.datasetIndex].labelSuffix || '');\r\n\r\n            return label;\r\n          },\r\n        },\r\n      },\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      animation: {\r\n        duration: 0,\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: true,\r\n          position: 'top',\r\n        },\r\n      },\r\n      onClick: (event: MouseEvent, item: any) => {\r\n        if (item[0]) {\r\n          let severity = alarmLabels[item[0]._index] + '';\r\n          this.props.navigateToApplication('fault', '/alarmStatus/' + severity);\r\n        }\r\n      },\r\n    };\r\n\r\n    /** Alarm status unavailable options */\r\n    const alarmStatusUnavailableOptions = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      animation: {\r\n        duration: 0,\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: true,\r\n          position: 'top',\r\n        },\r\n        tooltip: {\r\n          enabled: false,\r\n        },\r\n      },\r\n    };\r\n    /** Add text inside the doughnut chart for Alarm Status */\r\n    const alarmStatusPlugins = [{\r\n      beforeDraw: function (chart: any) {\r\n        var width = chart.width,\r\n          height = chart.height,\r\n          ctx = chart.ctx;\r\n        ctx.restore();\r\n        var fontSize = (height / 480).toFixed(2);\r\n        ctx.font = fontSize + 'em sans-serif';\r\n        ctx.textBaseline = 'top';\r\n        var text = 'Network Alarm Status',\r\n          textX = Math.round((width - ctx.measureText(text).width) / 2),\r\n          textY = height / 2;\r\n        ctx.fillText(text, textX, textY);\r\n        ctx.save();\r\n      },\r\n    }];\r\n\r\n    return (\r\n      <>\r\n        <div style={scrollbar} >\r\n          <h1 aria-label=\"welcome-to-odlux\">Welcome to Tejas Networks EMS</h1>\r\n          <div style={{ width: '38%', float: 'left' }}>\r\n            {this.checkElementsAreLoaded() ?\r\n              this.checkConnectionStatus() && connectionTotalCount != 0 ?\r\n                <Doughnut\r\n                  data={connectionStatusData}\r\n                  //type={Doughnut}\r\n                  width={500}\r\n                  height={500}\r\n                 //options={connectionStatusOptions}\r\n                  //plugins={connectionStatusPlugins}\r\n                />\r\n                : <Doughnut\r\n                  data={connectionStatusUnavailableData}\r\n                  //type={Doughnut}\r\n                  width={500}\r\n                  height={500}\r\n                 // options={connectionStatusUnavailableOptions}\r\n                 // plugins={connectionStatusPlugins}\r\n                  />\r\n              : <Doughnut\r\n                data={connectionStatusisLoading}\r\n                //type={Doughnut}\r\n                width={500}\r\n                height={500}\r\n                //options={connectionStatusUnavailableOptions}\r\n                //plugins={connectionStatusPlugins}\r\n              />\r\n            }\r\n          </div>\r\n          <div style={{ width: '38%', float: 'left' }}>\r\n            {this.checkAlarmsAreLoaded() ?\r\n              this.checkAlarmStatus() && alarmTotalCount != 0 ?\r\n                <Doughnut\r\n                  data={alarmStatusData}\r\n                  //type={Doughnut}\r\n                  width={500}\r\n                  height={500}\r\n                 // options={alarmStatusOptions}\r\n                  //plugins={alarmStatusPlugins}\r\n                />\r\n                : <Doughnut\r\n                  data={alarmStatusUnavailableData}\r\n                  //type={Doughnut}\r\n                  width={500}\r\n                  height={500}\r\n                  //options={alarmStatusUnavailableOptions}\r\n                  //plugins={alarmStatusPlugins}\r\n                />\r\n              : <Doughnut\r\n                data={alarmStatusisLoading}\r\n                //type={Doughnut}\r\n                width={500}\r\n                height={500}\r\n                //options={alarmStatusUnavailableOptions}\r\n               // plugins={alarmStatusPlugins}\r\n              />\r\n            }\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  /** Check if connection status data available */\r\n  public checkConnectionStatus = () => {\r\n    let statusCount = this.props.alarmStatus;\r\n    if (statusCount.isLoadingConnectionStatusChart) {\r\n      return true;\r\n    }\r\n    if (statusCount.Connected == 0 && statusCount.Connecting == 0 && statusCount.Disconnected == 0\r\n      && statusCount.UnableToConnect == 0 && statusCount.Undefined == 0) {\r\n      return true;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  /** Check if connection status chart data is loaded */\r\n  public checkElementsAreLoaded = () => {\r\n    let isLoadingCheck = this.props.alarmStatus;\r\n    if (connectionStatusinitialLoad && !isLoadingCheck.isLoadingConnectionStatusChart) {\r\n      if (this.checkConnectionStatus()) {\r\n        connectionStatusinitialLoad = false;\r\n        return true;\r\n      }\r\n      return false;\r\n    } else if (connectionStatusinitialLoad && isLoadingCheck.isLoadingConnectionStatusChart) {\r\n      connectionStatusinitialLoad = false;\r\n      connectionStatusinitialStateChanged = true;\r\n      return !isLoadingCheck.isLoadingConnectionStatusChart;\r\n    } else if (connectionStatusinitialStateChanged) {\r\n      if (!isLoadingCheck.isLoadingConnectionStatusChart) {\r\n        connectionStatusinitialStateChanged = false;\r\n      }\r\n      return !isLoadingCheck.isLoadingConnectionStatusChart;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /** Check if alarms data available */\r\n  public checkAlarmStatus = () => {\r\n    let alarmCount = this.props.alarmStatus;\r\n    if (alarmCount.isLoadingAlarmStatusChart) {\r\n      return true;\r\n    }\r\n    if (alarmCount.critical == 0 && alarmCount.major == 0 && alarmCount.minor == 0 && alarmCount.warning == 0) {\r\n      return true;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  /** Check if alarm status chart data is loaded */\r\n  public checkAlarmsAreLoaded = () => {\r\n    let isLoadingCheck = this.props.alarmStatus;\r\n    if (alarmStatusinitialLoad && !isLoadingCheck.isLoadingAlarmStatusChart) {\r\n      console.log(\"if eneterd\");\r\n      if (this.checkAlarmStatus()) {\r\n        alarmStatusinitialLoad = false;\r\n        return true;\r\n      }\r\n      return false;\r\n    } else if (alarmStatusinitialLoad && isLoadingCheck.isLoadingAlarmStatusChart) {\r\n      console.log(\"else if 1 eneterd\");\r\n      alarmStatusinitialLoad = false;\r\n      alarmStatusinitialStateChanged = true;\r\n      return !isLoadingCheck.isLoadingAlarmStatusChart;\r\n    } else if (alarmStatusinitialStateChanged) {\r\n      console.log(\"else if 2 eneterd\");\r\n      if (!isLoadingCheck.isLoadingAlarmStatusChart) {\r\n        alarmStatusinitialStateChanged = false;\r\n      }\r\n      return !isLoadingCheck.isLoadingAlarmStatusChart;\r\n    }\r\n    console.log(\"else eneterd\");\r\n    return true;\r\n  };\r\n}\r\n\r\nexport default (withRouter(connect(mapProps, mapDispatch)(DashboardHome)));\r\n","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\nimport React from 'react';\n\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons'; // select app icon\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Typography from '@mui/material/Typography';\nimport { WithStyles } from '@mui/styles';\nimport createStyles from '@mui/styles/createStyles';\nimport withStyles from '@mui/styles/withStyles';\nimport Tooltip from '@mui/material/Tooltip';\n\nimport { connect, Connect } from '../../../../framework/src/flux/connect';\nimport { IApplicationStoreState } from '../../../../framework/src/store/applicationStore';\n\n\nconst styles = () => createStyles({\n  icon: {\n    marginLeft: 8,\n    marginRight: 8,\n  },\n  critical: {\n    color: 'red',\n  },\n  major: {\n    color: 'orange',\n  },\n  minor: {\n    color: '#f7f700',\n  },\n  warning: {\n    color: '#428bca',\n  },\n});\n\nconst mapProps = (state: IApplicationStoreState) => ({\n  faultStatus: state.fault.faultStatus,\n});\n\n\ntype FaultStatusComponentProps = & WithStyles<typeof styles> & Connect<typeof mapProps>;\n\nclass FaultStatusComponent extends React.Component<FaultStatusComponentProps> {\n  render(): JSX.Element {\n    const { classes, faultStatus } = this.props;\n\n    return (\n      <>\n        <Typography variant=\"body1\" color=\"inherit\">\n          Alarm Status:\n          <Tooltip title=\"Critical Alarms\" arrow>\n            <span aria-label=\"critical-alarms\">\n              <FontAwesomeIcon className={`${classes.icon} ${classes.critical}`} icon={faExclamationTriangle} />\n            </span>\n          </Tooltip>\n          {faultStatus.critical} |\n        </Typography>\n\n        <Typography variant=\"body1\" color=\"inherit\">\n          <Tooltip title=\"Major Alarms\" arrow>\n            <span aria-label=\"major-alarms\">\n              <FontAwesomeIcon className={`${classes.icon} ${classes.major}`} icon={faExclamationTriangle} />\n            </span>\n          </Tooltip>\n          {faultStatus.major} |\n        </Typography>\n\n        <Typography variant=\"body1\" color=\"inherit\">\n          <Tooltip title=\"Minor Alarms\" arrow>\n            <span aria-label=\"minor-alarms\">\n              <FontAwesomeIcon className={`${classes.icon} ${classes.minor}`} icon={faExclamationTriangle} />\n            </span>\n          </Tooltip>\n          {faultStatus.minor} |\n        </Typography>\n\n        <Typography variant=\"body1\" color=\"inherit\">\n          <Tooltip title=\"Warning Alarms\" arrow>\n            <span aria-label=\"warning-alarms\">\n              <FontAwesomeIcon className={`${classes.icon} ${classes.warning}`} icon={faExclamationTriangle} />\n            </span>\n          </Tooltip>\n          {faultStatus.warning} |\n        </Typography>\n      </>\n    );\n  }\n}\n\nexport const FaultStatus = withStyles(styles)(connect(mapProps)(FaultStatusComponent));\nexport default FaultStatus;","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\nimport * as React from 'react';\n\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport { connect, Connect, IDispatcher } from '../../../../framework/src/flux/connect';\nimport { alarmLogEntriesReloadAction } from '../handlers/alarmLogEntriesHandler';\nimport { Fault } from '../models/fault';\n\nexport enum RefreshAlarmLogDialogMode {\n  None = 'none',\n  RefreshAlarmLogTable = 'RefreshAlarmLogTable',\n}\n\nconst mapDispatch = (dispatcher: IDispatcher) => ({\n  refreshAlarmLog: () => dispatcher.dispatch(alarmLogEntriesReloadAction),\n});\n\ntype DialogSettings = {\n  dialogTitle: string;\n  dialogDescription: string;\n  applyButtonText: string;\n  cancelButtonText: string;\n  enableMountIdEditor: boolean;\n  enableUsernameEditor: boolean;\n  enableExtendedEditor: boolean;\n};\n\nconst settings: { [key: string]: DialogSettings } = {\n  [RefreshAlarmLogDialogMode.None]: {\n    dialogTitle: '',\n    dialogDescription: '',\n    applyButtonText: '',\n    cancelButtonText: '',\n    enableMountIdEditor: false,\n    enableUsernameEditor: false,\n    enableExtendedEditor: false,\n  },\n  [RefreshAlarmLogDialogMode.RefreshAlarmLogTable]: {\n    dialogTitle: 'Do you want to refresh the Alarm Log?',\n    dialogDescription: '',\n    applyButtonText: 'Yes',\n    cancelButtonText: 'Cancel',\n    enableMountIdEditor: true,\n    enableUsernameEditor: true,\n    enableExtendedEditor: true,\n  },\n};\n\ntype RefreshAlarmLogDialogComponentProps = Connect<undefined, typeof mapDispatch> & {\n  mode: RefreshAlarmLogDialogMode;\n  onClose: () => void;\n};\n\ntype RefreshAlarmLogDialogComponentState = Fault & { isNameValid: boolean; isHostSet: boolean };\n\nclass RefreshAlarmLogDialogComponent extends React.Component<RefreshAlarmLogDialogComponentProps, RefreshAlarmLogDialogComponentState> {\n  render(): JSX.Element {\n    const setting = settings[this.props.mode];\n    return (\n      <Dialog open={this.props.mode !== RefreshAlarmLogDialogMode.None}>\n        <DialogTitle id=\"form-dialog-title\" aria-label={`${setting.dialogTitle.replace(/ /g, '-').toLowerCase()}-dialog`}>{setting.dialogTitle}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {setting.dialogDescription}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button aria-label=\"dialog-confirm-button\" onClick={() => {\n            this.onRefresh();\n          }} color=\"inherit\" > {setting.applyButtonText} </Button>\n          <Button aria-label=\"dialog-cancel-button\" onClick={() => {\n            this.onCancel();\n          }} color=\"secondary\"> {setting.cancelButtonText} </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  private onRefresh = () => {\n    this.props.refreshAlarmLog();\n    this.props.onClose();\n  };\n\n  private onCancel = () => {\n    this.props.onClose();\n  };\n}\n\nexport const RefreshAlarmLogDialog = connect(undefined, mapDispatch)(RefreshAlarmLogDialogComponent);\nexport default RefreshAlarmLogDialog;","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\nimport * as React from 'react';\n\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport { connect, Connect, IDispatcher } from '../../../../framework/src/flux/connect';\n\nimport { currentAlarmsReloadAction } from '../handlers/currentAlarmsHandler';\nimport { Fault } from '../models/fault';\n\nexport enum RefreshCurrentAlarmsDialogMode {\n  None = 'none',\n  RefreshCurrentAlarmsTable = 'RefreshCurrentAlarmsTable',\n}\n\nconst mapDispatch = (dispatcher: IDispatcher) => ({\n  refreshCurrentAlarms: () => dispatcher.dispatch(currentAlarmsReloadAction),\n});\n\ntype DialogSettings = {\n  dialogTitle: string;\n  dialogDescription: string;\n  applyButtonText: string;\n  cancelButtonText: string;\n  enableMountIdEditor: boolean;\n  enableUsernameEditor: boolean;\n  enableExtendedEditor: boolean;\n};\n\nconst settings: { [key: string]: DialogSettings } = {\n  [RefreshCurrentAlarmsDialogMode.None]: {\n    dialogTitle: '',\n    dialogDescription: '',\n    applyButtonText: '',\n    cancelButtonText: '',\n    enableMountIdEditor: false,\n    enableUsernameEditor: false,\n    enableExtendedEditor: false,\n  },\n  [RefreshCurrentAlarmsDialogMode.RefreshCurrentAlarmsTable]: {\n    dialogTitle: 'Do you want to refresh the Current Alarms List?',\n    dialogDescription: '',\n    applyButtonText: 'Yes',\n    cancelButtonText: 'Cancel',\n    enableMountIdEditor: true,\n    enableUsernameEditor: true,\n    enableExtendedEditor: true,\n  },\n};\n\ntype RefreshCurrentAlarmsDialogComponentProps = Connect<undefined, typeof mapDispatch> & {\n  mode: RefreshCurrentAlarmsDialogMode;\n  onClose: () => void;\n};\n\ntype RefreshCurrentAlarmsDialogComponentState = Fault & { isNameValid: boolean; isHostSet: boolean };\n\nclass RefreshCurrentAlarmsDialogComponent extends React.Component<RefreshCurrentAlarmsDialogComponentProps, RefreshCurrentAlarmsDialogComponentState> {\n  render(): JSX.Element {\n    const setting = settings[this.props.mode];\n    return (\n      <Dialog open={this.props.mode !== RefreshCurrentAlarmsDialogMode.None}>\n        <DialogTitle id=\"form-dialog-title\" aria-label={`${setting.dialogTitle.replace(/ /g, '-').toLowerCase()}-dialog`}>{setting.dialogTitle}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {setting.dialogDescription}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button aria-label=\"dialog-confirm-button\" onClick={() => {\n            this.onRefresh();\n          }} color=\"inherit\" > {setting.applyButtonText} </Button>\n          <Button aria-label=\"dialog-cancel-button\" onClick={() => {\n            this.onCancel();\n          }} color=\"secondary\"> {setting.cancelButtonText} </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  private onRefresh = () => {\n    this.props.refreshCurrentAlarms();\n    this.props.onClose();\n  };\n\n  private onCancel = () => {\n    this.props.onClose();\n  };\n}\n\nexport const RefreshCurrentAlarmsDialog = connect(undefined, mapDispatch)(RefreshCurrentAlarmsDialogComponent);\nexport default RefreshCurrentAlarmsDialog;","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\nimport { createExternal, IExternalTableState } from '../../../../framework/src/components/material-table/utilities';\nimport { createSearchDataHandler } from '../../../../framework/src/utilities/elasticSearch';\n\nimport { Fault } from '../models/fault';\n\nexport interface IAlarmLogEntriesState extends IExternalTableState<Fault> { }\n\n// create eleactic search data fetch handler\nconst alarmLogEntriesSearchHandler = createSearchDataHandler< Fault>('faultlog');\n\nexport const {\n  actionHandler: alarmLogEntriesActionHandler,\n  createActions: createAlarmLogEntriesActions,\n  createProperties: createAlarmLogEntriesProperties,\n  reloadAction: alarmLogEntriesReloadAction,\n\n  // set value action, to change a value\n} = createExternal<Fault>(alarmLogEntriesSearchHandler, appState => appState.fault.alarmLogEntries);\n\n","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\nimport { createExternal, IExternalTableState } from '../../../../framework/src/components/material-table/utilities';\nimport { createSearchDataHandler } from '../../../../framework/src/utilities/elasticSearch';\n\nimport { Fault } from '../models/fault';\n\nexport interface ICurrentAlarmsState extends IExternalTableState<Fault> { }\n\n// create eleactic search data fetch handler\nconst currentAlarmsSearchHandler = createSearchDataHandler<Fault>('faultcurrent');\n\nexport const {\n  actionHandler: currentAlarmsActionHandler,\n  createActions: createCurrentAlarmsActions,\n  createProperties: createCurrentAlarmsProperties,\n  reloadAction: currentAlarmsReloadAction,\n\n  // set value action, to change a value\n} = createExternal<Fault>(currentAlarmsSearchHandler, appState => appState.fault.currentAlarms);\n\n","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\n// main state handler\n\nimport { IActionHandler } from '../../../../framework/src/flux/action';\nimport { combineActionHandler } from '../../../../framework/src/flux/middleware';\n// ** do not remove **\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { IApplicationStoreState } from '../../../../framework/src/store/applicationStore';\n\nimport { SetPanelAction } from '../actions/panelChangeActions';\nimport { PanelId } from '../models/panelId';\nimport { alarmLogEntriesActionHandler, IAlarmLogEntriesState } from './alarmLogEntriesHandler';\nimport { currentAlarmsActionHandler, ICurrentAlarmsState } from './currentAlarmsHandler';\nimport { faultStatusHandler, IFaultStatus } from './faultStatusHandler';\nimport { faultNotificationsHandler, IFaultNotifications } from './notificationsHandler';\n\nexport interface IFaultAppStoreState {\n  currentAlarms: ICurrentAlarmsState;\n  faultNotifications: IFaultNotifications;\n  alarmLogEntries: IAlarmLogEntriesState;\n  currentOpenPanel: PanelId | null;\n  faultStatus: IFaultStatus;\n}\n\nconst currentOpenPanelHandler: IActionHandler<PanelId | null> = (state = null, action) => {\n  if (action instanceof SetPanelAction) {\n    state = action.panelId;\n  }\n  return state;\n};\n\ndeclare module '../../../../framework/src/store/applicationStore' {\n  interface IApplicationStoreState {\n    fault: IFaultAppStoreState;\n  }\n}\n\nconst actionHandlers = {\n  currentAlarms: currentAlarmsActionHandler,\n  faultNotifications: faultNotificationsHandler,\n  alarmLogEntries: alarmLogEntriesActionHandler,\n  currentOpenPanel: currentOpenPanelHandler,\n  faultStatus: faultStatusHandler,\n};\n\nexport const faultAppRootHandler = combineActionHandler<IFaultAppStoreState>(actionHandlers);\nexport default faultAppRootHandler;\n","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\nimport { IActionHandler } from '../../../../framework/src/flux/action';\n\nimport { SetFaultStatusAction } from '../actions/statusActions';\n\nexport interface IFaultStatus {\n  critical: number;\n  major: number;\n  minor: number;\n  warning: number;\n  isLoadingAlarmStatusChart: boolean;\n  Connected: number;\n  Connecting: number;\n  Disconnected: number;\n  Mounted: number;\n  UnableToConnect: number;\n  Undefined: number;\n  Unmounted: number;\n  total: number;\n  isLoadingConnectionStatusChart: boolean;\n}\n\nconst faultStatusInit: IFaultStatus = {\n  critical: 0,\n  major: 0,\n  minor: 0,\n  warning: 0,\n  isLoadingAlarmStatusChart: false,\n  Connected: 0,\n  Connecting: 0,\n  Disconnected: 0,\n  Mounted: 0,\n  UnableToConnect: 0,\n  Undefined: 0,\n  Unmounted: 0,\n  total: 0,\n  isLoadingConnectionStatusChart: false,\n};\n\nexport const faultStatusHandler: IActionHandler<IFaultStatus> = (state = faultStatusInit, action) => {\n  if (action instanceof SetFaultStatusAction) {\n    state = {\n      critical: action.criticalFaults,\n      major: action.majorFaults,\n      minor: action.minorFaults,\n      warning: action.warnings,\n      isLoadingAlarmStatusChart: action.isLoadingAlarmStatusChart,\n      Connected: action.ConnectedCount,\n      Connecting: action.ConnectingCount,\n      Disconnected: action.DisconnectedCount,\n      Mounted: action.MountedCount,\n      UnableToConnect: action.UnableToConnectCount,\n      Undefined: action.UndefinedCount,\n      Unmounted: action.UnmountedCount,\n      total: action.totalCount,\n      isLoadingConnectionStatusChart: action.isLoadingConnectionStatusChart,\n    };\n  }\n\n  return state;\n};","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\nimport { IActionHandler } from '../../../../framework/src/flux/action';\n\nimport { AddFaultNotificationAction, ResetFaultNotificationsAction } from '../actions/notificationActions';\nimport { FaultAlarmNotification } from '../models/fault';\n\nexport interface IFaultNotifications {\n  faults: FaultAlarmNotification[];\n  since: Date;\n}\n\nconst faultNotoficationsInit: IFaultNotifications = {\n  faults: [],\n  since: new Date(),\n};\n\nexport const faultNotificationsHandler: IActionHandler<IFaultNotifications> = (state = faultNotoficationsInit, action) => {\n  if (action instanceof AddFaultNotificationAction) {\n    state = {\n      ...state,\n      faults: [...state.faults, action.fault],\n    };\n  } else if (action instanceof ResetFaultNotificationsAction) {\n    state = {\n      ...state,\n      faults: [],\n      since: new Date(),\n    };\n  }\n\n  return state;\n};","/**\r\n * ============LICENSE_START========================================================================\r\n * ONAP : ccsdk feature sdnr wt odlux\r\n * =================================================================================================\r\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\r\n * =================================================================================================\r\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\r\n * =================================================================================================\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n * ============LICENSE_END==========================================================================\r\n */\r\n// app configuration and main entry point for the app\r\n\r\nimport React from 'react';\r\nimport { Redirect, Route, RouteComponentProps, Switch, withRouter } from 'react-router-dom';\r\n\r\nimport { connect, Connect, IDispatcher } from '../../../framework/src/flux/connect';\r\nimport applicationManager from '../../../framework/src/services/applicationManager';\r\nimport { IFormatedMessage, subscribe } from '../../../framework/src/services/notificationService';\r\nimport { IApplicationStoreState } from '../../../framework/src/store/applicationStore';\r\n\r\nimport { AddFaultNotificationAction } from './actions/notificationActions';\r\nimport { SetPanelAction } from './actions/panelChangeActions';\r\nimport { refreshFaultStatusAsyncAction, SetFaultStatusAction } from './actions/statusActions';\r\nimport DashboardHome from './components/dashboardHome';\r\nimport { FaultStatus } from './components/faultStatus';\r\nimport { createCurrentAlarmsActions, createCurrentAlarmsProperties, currentAlarmsReloadAction } from './handlers/currentAlarmsHandler';\r\nimport { faultAppRootHandler } from './handlers/faultAppRootHandler';\r\nimport { FaultAlarmNotificationWS } from './models/fault';\r\nimport { PanelId } from './models/panelId';\r\nimport { FaultApplication } from './views/faultApplication';\r\n\r\nconst appIcon = require('./assets/icons/faultAppIcon.svg');  // select app icon\r\n\r\nlet currentMountId: string | undefined = undefined;\r\nlet currentSeverity: string | undefined = undefined;\r\nlet refreshInterval: ReturnType<typeof window.setInterval> | null = null;\r\n\r\nconst mapProps = (state: IApplicationStoreState) => ({\r\n  currentAlarmsProperties: createCurrentAlarmsProperties(state),\r\n});\r\n\r\nconst mapDispatch = (dispatcher: IDispatcher) => ({\r\n  currentAlarmsActions: createCurrentAlarmsActions(dispatcher.dispatch, true),\r\n  setCurrentPanel: (panelId: PanelId) => dispatcher.dispatch(new SetPanelAction(panelId)),\r\n});\r\n\r\nconst FaultApplicationRouteAdapter = connect(mapProps, mapDispatch)((props: RouteComponentProps<{ mountId?: string }> & Connect<typeof mapProps, typeof mapDispatch>) => {\r\n  if (currentMountId !== props.match.params.mountId) {\r\n    // route parameter has changed\r\n    currentMountId = props.match.params.mountId || undefined;\r\n    // Hint: This timeout is need, since it is not recommended to change the state while rendering is in progress !\r\n    window.setTimeout(() => {\r\n      if (currentMountId) {\r\n        props.setCurrentPanel('CurrentAlarms');\r\n        props.currentAlarmsActions.onFilterChanged('sourceName', currentMountId);\r\n        if (!props.currentAlarmsProperties.showFilter) {\r\n          props.currentAlarmsActions.onToggleFilter(false);\r\n          props.currentAlarmsActions.onRefresh();\r\n        } else\r\n          props.currentAlarmsActions.onRefresh();\r\n      }\r\n    });\r\n  }\r\n  return (\r\n    <FaultApplication />\r\n  );\r\n});\r\n\r\nconst FaultApplicationAlarmStatusRouteAdapter = connect(mapProps, mapDispatch)((props: RouteComponentProps<{ eventSeverity?: string }> & Connect<typeof mapProps, typeof mapDispatch>) => {\r\n  if (currentSeverity !== props.match.params.eventSeverity) {\r\n    currentSeverity = props.match.params.eventSeverity || undefined;\r\n    window.setTimeout(() => {\r\n      if (currentSeverity) {\r\n        props.setCurrentPanel('CurrentAlarms');\r\n        props.currentAlarmsActions.onFilterChanged('eventSeverity', currentSeverity);\r\n        if (!props.currentAlarmsProperties.showFilter) {\r\n          props.currentAlarmsActions.onToggleFilter(false);\r\n          props.currentAlarmsActions.onRefresh();\r\n        } else\r\n          props.currentAlarmsActions.onRefresh();\r\n      }\r\n    });\r\n  }\r\n  return (\r\n    <FaultApplication />\r\n  );\r\n});\r\n\r\nconst App = withRouter((props: RouteComponentProps) => (\r\n  <Switch>\r\n    <Route path={`${props.match.path}/alarmStatus/:severity?`} component={FaultApplicationAlarmStatusRouteAdapter} />\r\n    <Route path={`${props.match.path}/:mountId?`} component={FaultApplicationRouteAdapter} />\r\n    <Redirect to={`${props.match.path}`} />\r\n  </Switch>\r\n));\r\n\r\nexport function register() {\r\n  const applicationApi = applicationManager.registerApplication({\r\n    name: 'fault',\r\n    icon: appIcon,\r\n    rootComponent: App,\r\n    rootActionHandler: faultAppRootHandler,\r\n    statusBarElement: FaultStatus,\r\n    dashbaordElement: DashboardHome,\r\n    menuEntry: 'Fault',\r\n  });\r\n\r\n  let counter = 0;\r\n  // subscribe to the websocket notifications\r\n  subscribe<FaultAlarmNotificationWS & IFormatedMessage>('problem-notification', (fault => {\r\n    const store = applicationApi && applicationApi.applicationStore;\r\n    if (fault && store) {\r\n\r\n      store.dispatch(new AddFaultNotificationAction({\r\n        id: String(counter++),\r\n        nodeName: fault['node-id'],\r\n        counter: +fault.data.counter,\r\n        objectId: fault.data['object-id-ref'],\r\n        problem: fault.data.problem,\r\n        severity: fault.data.severity || '',\r\n        timeStamp: fault.data['time-stamp'],\r\n      }));\r\n    }\r\n  }));\r\n\r\n  applicationApi.applicationStoreInitialized.then(store => {\r\n    store.dispatch(currentAlarmsReloadAction);\r\n  });\r\n\r\n  applicationApi.applicationStoreInitialized.then(store => {\r\n    store.dispatch(refreshFaultStatusAsyncAction);\r\n  });\r\n\r\n  applicationApi.logoutEvent.addHandler(()=>{\r\n\r\n    applicationApi.applicationStoreInitialized.then(store => {\r\n      store.dispatch(new SetFaultStatusAction(0, 0, 0, 0, false, 0, 0, 0, 0, 0, 0, 0, 0, false));\r\n      clearInterval(refreshInterval!);\r\n    });\r\n  });\r\n\r\n  function startRefreshInterval()  {\r\n    const refreshFaultStatus = window.setInterval(() => {\r\n      applicationApi.applicationStoreInitialized.then(store => {\r\n  \r\n        store.dispatch(refreshFaultStatusAsyncAction);\r\n      });\r\n    }, 15000);\r\n\r\n    return refreshFaultStatus;\r\n  }\r\n\r\n  applicationApi.loginEvent.addHandler(()=>{\r\n    if (refreshInterval) {\r\n      clearInterval(refreshInterval);\r\n    }\r\n    refreshInterval = startRefreshInterval() as any;\r\n  });\r\n\r\n  applicationApi.logoutEvent.addHandler(()=>{\r\n    refreshInterval && window.clearInterval(refreshInterval);\r\n    refreshInterval = null;\r\n  });\r\n}\r\n","/**\n * ============LICENSE_START========================================================================\n * ONAP : ccsdk feature sdnr wt odlux\n * =================================================================================================\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\n * =================================================================================================\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\n * =================================================================================================\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n * ============LICENSE_END==========================================================================\n */\nimport { Result } from '../../../../framework/src/models/elasticSearch';\nimport { requestRest } from '../../../../framework/src/services/restService';\n\nimport { Faults, FaultType } from '../models/fault';\n\n\nexport const getFaultStateFromDatabase = async (): Promise<FaultType | null> => {\n  const path = 'rests/operations/data-provider:read-status';\n  const result = await requestRest<Result<Faults>>(path, { method: 'POST' });\n\n  let faultType: FaultType = {\n    Critical: 0,\n    Major: 0,\n    Minor: 0,\n    Warning: 0,\n    Connected: 0,\n    Connecting: 0,\n    Disconnected: 0,\n    Mounted: 0,\n    UnableToConnect: 0,\n    Undefined: 0,\n    Unmounted: 0,\n    total: 0,\n  };\n  let faults: Faults[] | null = null;\n\n  if (result && result['data-provider:output'] && result['data-provider:output'].data) {\n    faults = result['data-provider:output'].data;\n    faultType = {\n      Critical: faults[0].faults.criticals,\n      Major: faults[0].faults.majors,\n      Minor: faults[0].faults.minors,\n      Warning: faults[0].faults.warnings,\n      Connected: faults[0]['network-element-connections'].Connected,\n      Connecting: faults[0]['network-element-connections'].Connecting,\n      Disconnected: faults[0]['network-element-connections'].Disconnected,\n      Mounted: faults[0]['network-element-connections'].Mounted,\n      UnableToConnect: faults[0]['network-element-connections'].UnableToConnect,\n      Undefined: faults[0]['network-element-connections'].Undefined,\n      Unmounted: faults[0]['network-element-connections'].Unmounted,\n      total: faults[0]['network-element-connections'].total,\n    };\n  }\n\n  return faultType;\n};\n\nexport const clearStuckAlarms = async (nodeNames: string[]) => {\n  const path = 'rests/operations/devicemanager:clear-current-fault-by-nodename';\n  const result = await requestRest<any>(path, { method: 'Post', body: JSON.stringify({ input: { nodenames: nodeNames } }) });\n  return result;\n};","/**\r\n * ============LICENSE_START========================================================================\r\n * ONAP : ccsdk feature sdnr wt odlux\r\n * =================================================================================================\r\n * Copyright (C) 2024 RideNext Software Solutions. Pvt Ltd.  All rights reserved\r\n * =================================================================================================\r\n * Copyright (C) 2019 highstreet technologies GmbH Intellectual Property. All rights reserved.\r\n * =================================================================================================\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n * ============LICENSE_END==========================================================================\r\n */\r\nimport React from \"react\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\n\r\nimport Refresh from \"@mui/icons-material/Refresh\";\r\nimport Sync from \"@mui/icons-material/Sync\";\r\nimport {\r\n  AppBar,\r\n  DialogActions,\r\n  IconButton,\r\n  Tab,\r\n  Tabs,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport {\r\n  ColumnType,\r\n  MaterialTable,\r\n  MaterialTableCtorType,\r\n} from \"../../../../framework/src/components/material-table\";\r\nimport {\r\n  connect,\r\n  Connect,\r\n  IDispatcher,\r\n} from \"../../../../framework/src/flux/connect\";\r\nimport { IApplicationStoreState } from \"../../../../framework/src/store/applicationStore\";\r\n\r\nimport { setPanelAction } from \"../actions/panelChangeActions\";\r\nimport ClearStuckAlarmsDialog, {\r\n  ClearStuckAlarmsDialogMode,\r\n} from \"../components/clearStuckAlarmsDialog\";\r\nimport RefreshAlarmLogDialog, {\r\n  RefreshAlarmLogDialogMode,\r\n} from \"../components/refreshAlarmLogDialog\";\r\nimport RefreshCurrentAlarmsDialog, {\r\n  RefreshCurrentAlarmsDialogMode,\r\n} from \"../components/refreshCurrentAlarmsDialog\";\r\nimport {\r\n  alarmLogEntriesReloadAction,\r\n  createAlarmLogEntriesActions,\r\n  createAlarmLogEntriesProperties,\r\n} from \"../handlers/alarmLogEntriesHandler\";\r\nimport {\r\n  createCurrentAlarmsActions,\r\n  createCurrentAlarmsProperties,\r\n  currentAlarmsReloadAction,\r\n} from \"../handlers/currentAlarmsHandler\";\r\nimport { Fault, FaultAlarmNotification } from \"../models/fault\";\r\nimport { PanelId } from \"../models/panelId\";\r\nimport { Theme, Tooltip, TextField } from \"@mui/material\";\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n} from \"@mui/material\";\r\nimport InfoOutlinedIcon from \"@mui/icons-material/InfoOutlined\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport axios from \"axios\";\r\nimport AddCommentIcon from \"@mui/icons-material/AddComment\";\r\nimport HighlightOffIcon from \"@mui/icons-material/HighlightOff\";\r\nimport TaskAltIcon from \"@mui/icons-material/TaskAlt\";\r\nimport createStyles from \"@mui/styles/createStyles\";\r\nimport { WithStyles } from \"@mui/styles\";\r\nimport withStyles from \"@mui/styles/withStyles\";\r\nimport RemoveDoneIcon from \"@mui/icons-material/RemoveDone\";\r\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport ExpandLessIcon from \"@mui/icons-material/ExpandLess\";\r\nconst mapProps = (state: IApplicationStoreState) => ({\r\n  panelId: state.fault.currentOpenPanel,\r\n  currentAlarmsProperties: createCurrentAlarmsProperties(state),\r\n  faultNotifications: state.fault.faultNotifications,\r\n  alarmLogEntriesProperties: createAlarmLogEntriesProperties(state),\r\n});\r\n\r\nconst mapDisp = (dispatcher: IDispatcher) => ({\r\n  currentAlarmsActions: createCurrentAlarmsActions(dispatcher.dispatch),\r\n  alarmLogEntriesActions: createAlarmLogEntriesActions(dispatcher.dispatch),\r\n  reloadCurrentAlarms: () => dispatcher.dispatch(currentAlarmsReloadAction),\r\n  reloadAlarmLogEntries: () => dispatcher.dispatch(alarmLogEntriesReloadAction),\r\n  switchActivePanel: (panelId: PanelId) => {\r\n    dispatcher.dispatch(setPanelAction(panelId));\r\n  },\r\n});\r\nlet initialSorted = false;\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    button: {\r\n      margin: 0,\r\n      padding: \"6px 6px\",\r\n      minWidth: \"unset\",\r\n    },\r\n    spacer: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      display: \"inline\",\r\n    },\r\n  });\r\n\r\ntype FaultApplicationComponentProps = Connect<typeof mapProps, typeof mapDisp> &\r\n  WithStyles<typeof styles>;\r\n\r\ntype FaultApplicationState = {\r\n  clearAlarmDialogMode: ClearStuckAlarmsDialogMode;\r\n  stuckAlarms: string[];\r\n  refreshAlarmLogEditorMode: RefreshAlarmLogDialogMode;\r\n  refreshCurrentAlarmsEditorMode: RefreshCurrentAlarmsDialogMode;\r\n  elsdata: { [key: string]: any } | null;\r\n  isDialogOpen: boolean;\r\n  message: string;\r\n  row: any;\r\n  currentdialog: string;\r\n  acklist: any[];\r\n  errorlist: any[];\r\n  isexpand: boolean;\r\n  errormessage: string;\r\n};\r\n\r\nconst FaultTable = MaterialTable as MaterialTableCtorType<Fault>;\r\nconst FaultAlarmNotificationTable =\r\n  MaterialTable as MaterialTableCtorType<FaultAlarmNotification>;\r\n\r\nlet currentAlarmsInitalSorted = false;\r\nlet alarmLogInitialSorted = false;\r\n\r\nclass FaultApplicationComponent extends React.Component<\r\n  FaultApplicationComponentProps,\r\n  FaultApplicationState\r\n> {\r\n  interval: NodeJS.Timeout;\r\n  constructor(props: FaultApplicationComponentProps) {\r\n    super(props);\r\n    this.state = {\r\n      clearAlarmDialogMode: ClearStuckAlarmsDialogMode.None,\r\n      stuckAlarms: [],\r\n      refreshAlarmLogEditorMode: RefreshAlarmLogDialogMode.None,\r\n      refreshCurrentAlarmsEditorMode: RefreshCurrentAlarmsDialogMode.None,\r\n      elsdata: null,\r\n      isDialogOpen: false,\r\n      message: \"\",\r\n      row: null,\r\n      currentdialog: \"\",\r\n      acklist: [],\r\n      errorlist: [],\r\n      isexpand: false,\r\n      errormessage: \"\",\r\n    };\r\n  }\r\n\r\n  onDialogClose = () => {\r\n    this.setState({\r\n      clearAlarmDialogMode: ClearStuckAlarmsDialogMode.None,\r\n      stuckAlarms: [],\r\n    });\r\n  };\r\n\r\n  onDialogOpen = () => {\r\n    const stuckAlarms = [\r\n      ...new Set(\r\n        this.props.currentAlarmsProperties.rows.map(\r\n          (item) => item[\"sourceName\"]\r\n        )\r\n      ),\r\n    ];\r\n    this.setState({\r\n      clearAlarmDialogMode: ClearStuckAlarmsDialogMode.Show,\r\n      stuckAlarms: stuckAlarms,\r\n    });\r\n  };\r\n\r\n  private onHandleTabChange = (\r\n    event: React.SyntheticEvent,\r\n    newValue: PanelId\r\n  ) => {\r\n    this.onToggleTabs(newValue);\r\n  };\r\n\r\n  private onToggleTabs = (panelId: PanelId) => {\r\n    const nextActivePanel = panelId;\r\n    this.props.switchActivePanel(nextActivePanel);\r\n    switch (nextActivePanel) {\r\n      case \"CurrentAlarms\":\r\n        if (!currentAlarmsInitalSorted) {\r\n          currentAlarmsInitalSorted = true;\r\n          this.props.currentAlarmsActions.onHandleExplicitRequestSort(\r\n            \"lastEpochMicrosec\",\r\n            \"desc\"\r\n          );\r\n        } else {\r\n          this.props.reloadCurrentAlarms();\r\n        }\r\n        break;\r\n      case \"AlarmLog\":\r\n        if (!alarmLogInitialSorted) {\r\n          alarmLogInitialSorted = true;\r\n          this.props.alarmLogEntriesActions.onHandleExplicitRequestSort(\r\n            \"lastEpochMicrosec\",\r\n            \"desc\"\r\n          );\r\n        } else {\r\n          this.props.reloadAlarmLogEntries();\r\n        }\r\n        break;\r\n      case \"AlarmNotifications\":\r\n      case null:\r\n      default:\r\n        // nothing to do\r\n        break;\r\n    }\r\n  };\r\n\r\n  toggleExpand = () => {\r\n    this.setState(\r\n      (prevState) => ({ isexpand: !prevState.isexpand }),\r\n      () => {\r\n        console.log(this.state.isexpand); // Ensure the updated state is logged after the update\r\n      }\r\n    );\r\n  };\r\n\r\n  renderIcon = (rowData: any, index: number) => {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classes.spacer}>\r\n        <Tooltip disableInteractive title={\"Info\"}>\r\n          <IconButton\r\n            className={classes.button}\r\n            onClick={() => {\r\n              this.setState({\r\n                elsdata: rowData,\r\n                isDialogOpen: true,\r\n                isexpand: false,\r\n              });\r\n            }}\r\n            size=\"large\"\r\n          >\r\n            <InfoOutlinedIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  rendermessage = (rowData: any, index: number) => {\r\n    //console.log(rowData)\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classes.spacer}>\r\n        <Tooltip disableInteractive title={\"Alarm Info\"}>\r\n          <IconButton\r\n            className={classes.button}\r\n            onClick={() => {\r\n              this.setState({\r\n                elsdata: rowData,\r\n                isDialogOpen: true,\r\n                currentdialog: \"info\",\r\n                isexpand: false,\r\n              });\r\n            }}\r\n            size=\"large\"\r\n            style={{ color: \"grey\" }}\r\n          >\r\n            <InfoOutlinedIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </div>\r\n    );\r\n  };\r\n  checkbox = (rowData: any, index: number) => {\r\n    const isChecked =\r\n      this.state.acklist.filter((item: any) => item.id === rowData.rowData.id)\r\n        .length > 0;\r\n    return (\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={isChecked}\r\n        onChange={(e) => this.handleCheckboxChange(e, rowData.rowData.id)}\r\n      />\r\n    );\r\n  };\r\n\r\n  // Handle checkbox state change\r\n  handleCheckboxChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n    alarmId: string\r\n  ) => {\r\n    this.setState((prevState) => {\r\n      const isChecked = event.target.checked;\r\n      if (isChecked) {\r\n        return {\r\n          acklist: [...prevState.acklist, { id: alarmId }],\r\n        };\r\n      } else {\r\n        return {\r\n          acklist: prevState.acklist.filter((id: any) => id.id !== alarmId),\r\n        };\r\n      }\r\n    });\r\n  };\r\n  render(): JSX.Element {\r\n    // const clearAlarmsAction = {\r\n    //   icon: Sync,\r\n    //   tooltip: \"Clear stuck alarms\",\r\n    //   ariaLabel: \"clear-stuck-alarms\",\r\n    //   onClick: this.onDialogOpen,\r\n    // };\r\n\r\n    const refreshCurrentAlarmsAction = {\r\n      icon: Refresh,\r\n      tooltip: \"Refresh\",\r\n      ariaLabel: \"refresh\",\r\n      onClick: () => {\r\n        this.setState({\r\n          refreshCurrentAlarmsEditorMode:\r\n            RefreshCurrentAlarmsDialogMode.RefreshCurrentAlarmsTable,\r\n        });\r\n      },\r\n    };\r\n\r\n    const ackCurrentAlarmsAction = {\r\n      icon: TaskAltIcon,\r\n      tooltip: \"Ack Alarms\",\r\n      ariaLabel: \"ack\",\r\n      onClick: async () => {\r\n        if (\r\n          this.state.acklist.length > 0 &&\r\n          this.state.acklist.length <=\r\n            (window as any).configs.NBI_ALLOWED_ARRAY_LIMIT\r\n        ) {\r\n          this.setState({ isDialogOpen: true, currentdialog: \"ack\" });\r\n        } else if (\r\n          this.state.acklist.length >\r\n          (window as any).configs.NBI_ALLOWED_ARRAY_LIMIT\r\n        ) {\r\n          this.setState({\r\n            isDialogOpen: true,\r\n            currentdialog: \"error\",\r\n            errormessage:\r\n              \"Input Number of alarms should be less than \" +\r\n              (window as any).configs.NBI_ALLOWED_ARRAY_LIMIT,\r\n          });\r\n        }\r\n      },\r\n    };\r\n\r\n    const unackCurrentAlarmsAction = {\r\n      icon: RemoveDoneIcon,\r\n      tooltip: \"UnAck Alarms\",\r\n      ariaLabel: \"ack\",\r\n      onClick: async () => {\r\n        if (\r\n          this.state.acklist.length > 0 &&\r\n          this.state.acklist.length <=\r\n            (window as any).configs.NBI_ALLOWED_ARRAY_LIMIT\r\n        ) {\r\n          this.setState({ isDialogOpen: true, currentdialog: \"unack\" });\r\n        } else if (\r\n          this.state.acklist.length >\r\n          (window as any).configs.NBI_ALLOWED_ARRAY_LIMIT\r\n        ) {\r\n          this.setState({\r\n            isDialogOpen: true,\r\n            currentdialog: \"error\",\r\n            errormessage:\r\n              \"Input Number of alarms should be less than \" +\r\n              (window as any).configs.NBI_ALLOWED_ARRAY_LIMIT,\r\n          });\r\n        }\r\n      },\r\n    };\r\n\r\n    const commentCurrentAlarmsAction = {\r\n      icon: AddCommentIcon,\r\n      tooltip: \"Comment Alarms\",\r\n      ariaLabel: \"ack\",\r\n      onClick: () => {\r\n        if (\r\n          this.state.acklist.length > 0 &&\r\n          this.state.acklist.length <=\r\n            (window as any).configs.NBI_ALLOWED_ARRAY_LIMIT\r\n        ) {\r\n          this.setState({\r\n            isDialogOpen: true,\r\n            currentdialog: \"comment\",\r\n          });\r\n        } else if (\r\n          this.state.acklist.length >\r\n          (window as any).configs.NBI_ALLOWED_ARRAY_LIMIT\r\n        ) {\r\n          this.setState({\r\n            isDialogOpen: true,\r\n            currentdialog: \"error\",\r\n            errormessage:\r\n              \"Input Number of alarms should be less than \" +\r\n              (window as any).configs.NBI_ALLOWED_ARRAY_LIMIT,\r\n          });\r\n        }\r\n      },\r\n    };\r\n\r\n    const clearCurrentAlarmsAction = {\r\n      icon: HighlightOffIcon,\r\n      tooltip: \"clear Alarms\",\r\n      ariaLabel: \"clear\",\r\n      onClick: () => {\r\n        if (\r\n          this.state.acklist.length > 0 &&\r\n          this.state.acklist.length <=\r\n            (window as any).configs.NBI_ALLOWED_ARRAY_LIMIT\r\n        ) {\r\n          this.setState({ isDialogOpen: true, currentdialog: \"clear\" });\r\n        } else if (\r\n          this.state.acklist.length >\r\n          (window as any).configs.NBI_ALLOWED_ARRAY_LIMIT\r\n        ) {\r\n          this.setState({\r\n            isDialogOpen: true,\r\n            currentdialog: \"error\",\r\n            errormessage:\r\n              \"Input Number of alarms should be less than \" +\r\n              (window as any).configs.NBI_ALLOWED_ARRAY_LIMIT,\r\n          });\r\n        }\r\n      },\r\n    };\r\n\r\n    const refreshAlarmLogAction = {\r\n      icon: Refresh,\r\n      tooltip: \"Refresh Alarm log table\",\r\n      ariaLabel: \"refresh\",\r\n      onClick: () => {\r\n        this.setState({\r\n          refreshAlarmLogEditorMode:\r\n            RefreshAlarmLogDialogMode.RefreshAlarmLogTable,\r\n        });\r\n      },\r\n    };\r\n\r\n    const areFaultsAvailable =\r\n      this.props.currentAlarmsProperties.rows &&\r\n      this.props.currentAlarmsProperties.rows.length > 0;\r\n    const customActions = areFaultsAvailable\r\n      ? [\r\n          refreshCurrentAlarmsAction,\r\n          ackCurrentAlarmsAction,\r\n          unackCurrentAlarmsAction,\r\n          commentCurrentAlarmsAction,\r\n          clearCurrentAlarmsAction,\r\n        ]\r\n      : [refreshCurrentAlarmsAction];\r\n\r\n    const { panelId: activePanelId } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <AppBar enableColorOnDark position=\"static\" style={{ width: \"50%\" }}>\r\n          <Tabs\r\n            indicatorColor=\"secondary\"\r\n            textColor=\"inherit\"\r\n            value={activePanelId}\r\n            onChange={this.onHandleTabChange}\r\n            aria-label=\"fault-tabs\"\r\n          >\r\n            <Tab\r\n              aria-label=\"current-alarms-list-tab\"\r\n              label=\"Current Alarms\"\r\n              value=\"CurrentAlarms\"\r\n              sx={{\r\n                display: \"flex\",\r\n                flex: 1,\r\n                border: \"1px solid #ccc\",\r\n                borderRadius: \"5px\",\r\n                marginRight: \"2px\",\r\n                marginBottom: \"2px\",\r\n                color: \"#000000de\",\r\n                backgroundColor: \"#c6cbd1\",\r\n                \"&.Mui-selected\": {\r\n                  color: \"#ffffff\",\r\n                  backgroundColor: \"#53659c\",\r\n                },\r\n              }}\r\n            />\r\n            <Tab\r\n              aria-label=\"alarm-notifications-list-tab\"\r\n              label={`Alarm Notifications (${this.props.faultNotifications.faults.length})`}\r\n              value=\"AlarmNotifications\"\r\n              disabled={true}\r\n              sx={{\r\n                display: \"flex\",\r\n                flex: 1,\r\n                border: \"1px solid #ccc\",\r\n                borderRadius: \"5px\",\r\n                marginRight: \"2px\",\r\n                marginBottom: \"2px\",\r\n                color: \"#000000de\",\r\n                backgroundColor: \"#c6cbd1\",\r\n                \"&.Mui-selected\": {\r\n                  color: \"#ffffff\",\r\n                  backgroundColor: \"#53659c\",\r\n                },\r\n              }}\r\n            />\r\n            <Tab\r\n              aria-label=\"alarm-log-tab\"\r\n              label=\"Alarm Log\"\r\n              value=\"AlarmLog\"\r\n              sx={{\r\n                display: \"flex\",\r\n                flex: 1,\r\n                border: \"1px solid #ccc\",\r\n                borderRadius: \"5px\",\r\n                marginRight: \"2px\",\r\n                marginBottom: \"2px\",\r\n                color: \"#000000de\",\r\n                backgroundColor: \"#c6cbd1\",\r\n                \"&.Mui-selected\": {\r\n                  color: \"#ffffff\",\r\n                  backgroundColor: \"#53659c\",\r\n                },\r\n              }}\r\n            />\r\n          </Tabs>\r\n        </AppBar>\r\n        {activePanelId === \"CurrentAlarms\" && (\r\n          <>\r\n            <FaultTable\r\n              stickyHeader\r\n              title={\"Fault\"}\r\n              tableId=\"current-alarms-table\"\r\n              idProperty=\"id\"\r\n              customActionButtons={customActions}\r\n              columns={[\r\n                {\r\n                  property: \" \",\r\n                  title: \"\",\r\n                  type: ColumnType.custom,\r\n                  width: \"1%\",\r\n                  customControl: this.checkbox,\r\n                },\r\n                {\r\n                  property: \"sourceName\",\r\n                  title: \"Node Name\",\r\n                  type: ColumnType.text,\r\n                  width: \"10%\",\r\n                },\r\n                {\r\n                  property: \"alarmId\",\r\n                  title: \"Alarm Id\",\r\n                  type: ColumnType.text,\r\n                  width: \"7%\",\r\n                },\r\n                {\r\n                  property: \"eventSeverity\",\r\n                  title: \"Severity\",\r\n                  type: ColumnType.text,\r\n                  width: \"5%\",\r\n                },\r\n                {\r\n                  property: \"lastEpochMicrosec\",\r\n                  type: ColumnType.text,\r\n                  title: \"Timestamp\",\r\n                  width: \"10%\",\r\n                },\r\n\r\n                {\r\n                  property: \"sequence\",\r\n                  title: \"Sequence\",\r\n                  type: ColumnType.text,\r\n                  width: \"5%\",\r\n                },\r\n                {\r\n                  property: \"counter\",\r\n                  title: \"Counter\",\r\n                  type: ColumnType.text,\r\n                  width: \"5%\",\r\n                },\r\n\r\n                {\r\n                  property: \"isAlarmAcked\",\r\n                  title: \"Ack Status\",\r\n                  type: ColumnType.text,\r\n                  width: \"7%\",\r\n                },\r\n\r\n                {\r\n                  property: \"alarmInterfaceA\",\r\n                  title: \"Object Id\",\r\n                  type: ColumnType.text,\r\n                  width: \"10%\",\r\n                },\r\n\r\n                {\r\n                  property: \"Actions\",\r\n                  title: \"\",\r\n                  type: ColumnType.custom,\r\n                  width: \"auto\",\r\n                  customControl: this.rendermessage,\r\n                },\r\n              ]}\r\n              {...this.props.currentAlarmsProperties}\r\n              {...this.props.currentAlarmsActions}\r\n            />\r\n            {this.state.currentdialog === \"comment\" ? (\r\n              <Dialog\r\n                open={this.state.isDialogOpen}\r\n                onClose={() => this.setState({ isDialogOpen: false })}\r\n                PaperProps={{\r\n                  style: {\r\n                    minHeight: \"23vh\",\r\n                    minWidth: \"50vw\",\r\n                    border: \"4px solid #38456a\",\r\n                    borderRadius: \"5px\",\r\n                    backgroundColor: \"#e8e8e8\",\r\n                  },\r\n                }}\r\n              >\r\n                <DialogContent>\r\n                  <div>\r\n                    <Typography variant=\"h6\">Event Details:</Typography>\r\n\r\n                    <Card style={{ overflowX: \"auto\" }}>\r\n                      <CardContent>\r\n                        <TextField\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                          margin=\"dense\"\r\n                          id=\"message\"\r\n                          multiline\r\n                          label=\"Enter Message\"\r\n                          value={this.state.message}\r\n                          onChange={(event: any) => {\r\n                            this.setState({ message: event.target.value });\r\n                          }}\r\n                        />\r\n                      </CardContent>\r\n                    </Card>\r\n                  </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button\r\n                    onClick={async () => {\r\n                      console.log(this.state.message, this.state.elsdata);\r\n                      const baseUri = `${window.location.origin}`;\r\n                      const userToken = localStorage.getItem(\"userToken\") || \"\";\r\n\r\n                      let parsedToken;\r\n                      try {\r\n                        parsedToken = userToken ? JSON.parse(userToken) : null;\r\n                      } catch (error) {\r\n                        console.error(\"Invalid token format:\", error);\r\n                      }\r\n\r\n                      const usernameFromToken =\r\n                        parsedToken && parsedToken.username\r\n                          ? parsedToken.username\r\n                          : \"\";\r\n\r\n                      const queryPromises = this.state.acklist.map(\r\n                        (ack: any) => {\r\n                          const existingAlarmComments =\r\n                            this.props.currentAlarmsProperties.rows.filter(\r\n                              (row: any) => row.id === ack.id\r\n                            );\r\n\r\n                          // Assuming the first element in the filtered array is the one you're interested in\r\n                          const existingComments =\r\n                            existingAlarmComments[0].alarmComment;\r\n                          console.log(existingAlarmComments);\r\n\r\n                          var message:string;\r\n                          if(existingComments && existingComments.length > 0){\r\n                            message = existingComments + \",\" + this.state.message\r\n                          }\r\n                          else{\r\n                            message = this.state.message\r\n                          }\r\n                          // Elasticsearch script to add/update the \"message\" field\r\n                          const payload = {\r\n                            doc: {\r\n                              event: {\r\n                                \"fault-fields\": {\r\n                                  \"alarm-additional-information\": {\r\n                                    \"alarm-comment\": message\r\n                                  },\r\n                                },\r\n                              },\r\n                            },\r\n                          };\r\n\r\n                          return axios.post(\r\n                            baseUri + `/faultcurrent-v7/_update/${ack.id}`,\r\n                            payload\r\n                          );\r\n                        }\r\n                      );\r\n                      Promise.all(queryPromises).then((responses: any) => {\r\n                        let errorlist: any[] = [];\r\n                        responses.map((response: any) => {\r\n                          if (response.status !== 200) {\r\n                            errorlist.push({\r\n                              id: response.data._id,\r\n                              result: \"failed\",\r\n                              message: response.statusText,\r\n                            });\r\n                          }\r\n                        });\r\n                        this.setState({ errorlist: errorlist });\r\n                      });\r\n                      this.setState({\r\n                        acklist: [],\r\n                        message: \"\",\r\n                        isDialogOpen: false,\r\n                      });\r\n                      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n                      this.props.reloadCurrentAlarms();\r\n                    }}\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#38761d\",\r\n                      border: \"1px solid #2986cc\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"3px 6px\",\r\n                      marginRight: \"5%\",\r\n                    }}\r\n                  >\r\n                    OK\r\n                  </Button>\r\n                  <Button\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#38761d\",\r\n                      border: \"1px solid #2986cc\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"3px 6px\",\r\n                      marginRight: \"5%\",\r\n                    }}\r\n                    onClick={() => this.setState({ isDialogOpen: false })}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            ) : this.state.currentdialog === \"ack\" ? (\r\n              <Dialog\r\n                open={this.state.isDialogOpen}\r\n                onClose={() => this.setState({ isDialogOpen: false })}\r\n                PaperProps={{\r\n                  style: {\r\n                    minHeight: \"23vh\",\r\n                    minWidth: \"50vw\",\r\n                    border: \"4px solid #38456a\",\r\n                    borderRadius: \"5px\",\r\n                    backgroundColor: \"#e8e8e8\",\r\n                  },\r\n                }}\r\n              >\r\n                <DialogContent>\r\n                  <div>\r\n                    <Typography variant=\"h6\">Event Details:</Typography>\r\n\r\n                    <Card style={{ overflowX: \"auto\" }}>\r\n                      <CardContent>\r\n                        <TextField\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                          margin=\"dense\"\r\n                          id=\"message\"\r\n                          multiline\r\n                          label=\"Enter Message\"\r\n                          value={this.state.message}\r\n                          onChange={(event: any) => {\r\n                            this.setState({ message: event.target.value });\r\n                          }}\r\n                        />\r\n                      </CardContent>\r\n                    </Card>\r\n                  </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button\r\n                    onClick={async () => {\r\n                      const baseUri = `${window.location.origin}`;\r\n                      const userToken = localStorage.getItem(\"userToken\") || \"\";\r\n\r\n                      let parsedToken;\r\n                      try {\r\n                        parsedToken = userToken ? JSON.parse(userToken) : null;\r\n                      } catch (error) {\r\n                        console.error(\"Invalid token format:\", error);\r\n                      }\r\n\r\n                      const usernameFromToken =\r\n                        parsedToken && parsedToken.username\r\n                          ? parsedToken.username\r\n                          : \"\";\r\n                      const queryPromises = this.state.acklist.map(\r\n                        (ack: any) => {\r\n                          const existingAlarmComments =\r\n                            this.props.currentAlarmsProperties.rows.filter(\r\n                              (row: any) => row.id === ack.id\r\n                            );\r\n\r\n                          // Assuming the first element in the filtered array is the one you're interested in\r\n                          const existingComments =\r\n                            existingAlarmComments[0].alarmComment;\r\n                          console.log(existingAlarmComments);\r\n                          var message:string;\r\n                          if(existingComments && existingComments.length > 0){\r\n                            message = existingComments + \",\" + this.state.message\r\n                          }\r\n                          else{\r\n                            message = this.state.message\r\n                          }\r\n                          // Elasticsearch script to add/update the \"message\" field\r\n                          const payload = {\r\n                            doc: {\r\n                              event: {\r\n                                \"fault-fields\": {\r\n                                  \"alarm-additional-information\": {\r\n                                    \"is-alarm-acked\": true,\r\n                                    \"acked-by\": usernameFromToken,\r\n                                    \"ack-updated-time\": Date.now() * 1000,\r\n                                    \"alarm-comment\": message\r\n                                  },\r\n                                },\r\n                              },\r\n                            },\r\n                          };\r\n\r\n                          return axios.post(\r\n                            baseUri + `/faultcurrent-v7/_update/${ack.id}`,\r\n                            payload\r\n                          );\r\n                        }\r\n                      );\r\n                      Promise.all(queryPromises).then((responses: any) => {\r\n                        let errorlist: any[] = [];\r\n                        responses.map((response: any) => {\r\n                          if (response.status !== 200) {\r\n                            errorlist.push({\r\n                              id: response.data._id,\r\n                              result: \"failed\",\r\n                              message: response.statusText,\r\n                            });\r\n                          }\r\n                        });\r\n                        this.setState({ errorlist: errorlist });\r\n                      });\r\n                      this.setState({\r\n                        acklist: [],\r\n                        message: \"\",\r\n                        isDialogOpen: false,\r\n                      });\r\n                      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n                      this.props.reloadCurrentAlarms();\r\n                    }}\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#38761d\",\r\n                      border: \"1px solid #2986cc\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"3px 6px\",\r\n                      marginRight: \"5%\",\r\n                    }}\r\n                  >\r\n                    OK\r\n                  </Button>\r\n                  <Button\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#38761d\",\r\n                      border: \"1px solid #2986cc\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"3px 6px\",\r\n                      marginRight: \"5%\",\r\n                    }}\r\n                    onClick={() => this.setState({ isDialogOpen: false })}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            ) : this.state.currentdialog === \"unack\" ? (\r\n              <Dialog\r\n                open={this.state.isDialogOpen}\r\n                onClose={() => this.setState({ isDialogOpen: false })}\r\n                PaperProps={{\r\n                  style: {\r\n                    minHeight: \"23vh\",\r\n                    minWidth: \"50vw\",\r\n                    border: \"4px solid #38456a\",\r\n                    borderRadius: \"5px\",\r\n                    backgroundColor: \"#e8e8e8\",\r\n                  },\r\n                }}\r\n              >\r\n                <DialogContent>\r\n                  <div>\r\n                    <Typography variant=\"h6\">Event Details:</Typography>\r\n\r\n                    <Card style={{ overflowX: \"auto\" }}>\r\n                      <CardContent>\r\n                        <TextField\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                          margin=\"dense\"\r\n                          id=\"message\"\r\n                          multiline\r\n                          label=\"Enter Message\"\r\n                          value={this.state.message}\r\n                          onChange={(event: any) => {\r\n                            this.setState({ message: event.target.value });\r\n                          }}\r\n                        />\r\n                      </CardContent>\r\n                    </Card>\r\n                  </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button\r\n                    onClick={async () => {\r\n                      const baseUri = `${window.location.origin}`;\r\n                      const userToken = localStorage.getItem(\"userToken\") || \"\";\r\n\r\n                      let parsedToken;\r\n                      try {\r\n                        parsedToken = userToken ? JSON.parse(userToken) : null;\r\n                      } catch (error) {\r\n                        console.error(\"Invalid token format:\", error);\r\n                      }\r\n\r\n                      const usernameFromToken =\r\n                        parsedToken && parsedToken.username\r\n                          ? parsedToken.username\r\n                          : \"\";\r\n                      const queryPromises = this.state.acklist.map(\r\n                        (ack: any) => {\r\n                          const existingAlarmComments =\r\n                            this.props.currentAlarmsProperties.rows.filter(\r\n                              (row: any) => row.id === ack.id\r\n                            );\r\n\r\n                          // Assuming the first element in the filtered array is the one you're interested in\r\n                          const existingComments =\r\n                            existingAlarmComments[0].alarmComment;\r\n                          console.log(existingAlarmComments);\r\n                          var message:string;\r\n                          if(existingComments && existingComments.length > 0){\r\n                            message = existingComments + \",\" + this.state.message\r\n                          }\r\n                          else{\r\n                            message = this.state.message\r\n                          }\r\n                          // Elasticsearch script to add/update the \"message\" field\r\n                          const payload = {\r\n                            doc: {\r\n                              event: {\r\n                                \"fault-fields\": {\r\n                                  \"alarm-additional-information\": {\r\n                                    \"is-alarm-acked\": false,\r\n                                    \"acked-by\": usernameFromToken,\r\n                                    \"ack-updated-time\": Date.now() * 1000,\r\n                                    \"alarm-comment\": message\r\n                                  },\r\n                                },\r\n                              },\r\n                            },\r\n                          };\r\n\r\n                          return axios.post(\r\n                            baseUri + `/faultcurrent-v7/_update/${ack.id}`,\r\n                            payload\r\n                          );\r\n                        }\r\n                      );\r\n                      Promise.all(queryPromises).then((responses: any) => {\r\n                        let errorlist: any[] = [];\r\n                        responses.map((response: any) => {\r\n                          if (response.status !== 200) {\r\n                            errorlist.push({\r\n                              id: response.data._id,\r\n                              result: \"failed\",\r\n                              message: response.statusText,\r\n                            });\r\n                          }\r\n                        });\r\n                        this.setState({ errorlist: errorlist });\r\n                      });\r\n                      this.setState({\r\n                        acklist: [],\r\n                        message: \"\",\r\n                        isDialogOpen: false,\r\n                      });\r\n                      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n                      this.props.reloadCurrentAlarms();\r\n                    }}\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#38761d\",\r\n                      border: \"1px solid #2986cc\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"3px 6px\",\r\n                      marginRight: \"5%\",\r\n                    }}\r\n                  >\r\n                    OK\r\n                  </Button>\r\n                  <Button\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#38761d\",\r\n                      border: \"1px solid #2986cc\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"3px 6px\",\r\n                      marginRight: \"5%\",\r\n                    }}\r\n                    onClick={() => this.setState({ isDialogOpen: false })}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            ) : this.state.currentdialog === \"clear\" ? (\r\n              <Dialog\r\n                open={this.state.isDialogOpen}\r\n                onClose={() => this.setState({ isDialogOpen: false })}\r\n                PaperProps={{\r\n                  style: {\r\n                    minHeight: \"23vh\",\r\n                    minWidth: \"50vw\",\r\n                    border: \"4px solid #38456a\",\r\n                    borderRadius: \"5px\",\r\n                    backgroundColor: \"#e8e8e8\",\r\n                  },\r\n                }}\r\n              >\r\n                <DialogContent>\r\n                  <div>\r\n                    <Typography variant=\"h6\">Event Details:</Typography>\r\n\r\n                    <Card style={{ overflowX: \"auto\" }}>\r\n                      <CardContent>\r\n                        <TextField\r\n                          variant=\"standard\"\r\n                          fullWidth\r\n                          margin=\"dense\"\r\n                          id=\"message\"\r\n                          multiline\r\n                          label=\"Enter Message\"\r\n                          value={this.state.message}\r\n                          onChange={(event: any) => {\r\n                            this.setState({ message: event.target.value });\r\n                          }}\r\n                        />\r\n                      </CardContent>\r\n                    </Card>\r\n                  </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button\r\n                    onClick={async () => {\r\n                      const baseUri = `${window.location.origin}`;\r\n                      const userToken = localStorage.getItem(\"userToken\") || \"\";\r\n\r\n                      let parsedToken;\r\n                      try {\r\n                        parsedToken = userToken ? JSON.parse(userToken) : null;\r\n                      } catch (error) {\r\n                        console.error(\"Invalid token format:\", error);\r\n                      }\r\n\r\n                      const usernameFromToken =\r\n                        parsedToken && parsedToken.username\r\n                          ? parsedToken.username\r\n                          : \"\";\r\n                      const queryPromises = this.state.acklist.map(\r\n                        async(ack: any) => {\r\n                          const existingAlarmComments =\r\n                            this.props.currentAlarmsProperties.rows.filter(\r\n                              (row: any) => row.id === ack.id\r\n                            );\r\n\r\n                          // Assuming the first element in the filtered array is the one you're interested in\r\n                          const existingComments =\r\n                            existingAlarmComments[0].alarmComment;\r\n                          console.log(existingAlarmComments[0].alarmComment, this.state.message);\r\n                          var message:string;\r\n                          if(existingComments && existingComments.length > 0){\r\n                            message = existingComments + \",\" + this.state.message\r\n                          }\r\n                          else{\r\n                            message = this.state.message\r\n                          }\r\n                          \r\n                          const res= await axios.get(\r\n                            baseUri + `/faultcurrent-v7/_doc/${ack.id}`, \r\n                          );\r\n                          const tobemodified = res?.data?._source\r\n                          if(tobemodified){\r\n                            tobemodified.event[\"fault-fields\"][\"alarm-additional-information\"][\"device-cleared\"] = false\r\n                            tobemodified.event[\"fault-fields\"][\"alarm-additional-information\"][\"cleared-by\"] = usernameFromToken\r\n                            tobemodified.event[\"fault-fields\"][\"alarm-additional-information\"][\"alarm-comment\"] = message\r\n                            tobemodified.event[\"fault-fields\"][\"event-severity\"] = \"NonAlarmed\"\r\n                            tobemodified.event[\"fault-fields\"][\"alarm-additional-information\"][\"alarm-action\"] = \"CLEAR\"\r\n                            tobemodified.event[\"common-event-header\"][\"last-epoch-microsec\"] = Date.now() * 1000\r\n                            console.log(tobemodified);\r\n                            await axios.post(baseUri + `/faultlog-v7/_doc`,tobemodified)\r\n                            return axios.delete(baseUri + `/faultcurrent-v7/_doc/${ack.id}`);\r\n                          }\r\n                          else{\r\n                            return null;\r\n                          }\r\n                          \r\n                        }\r\n                        \r\n                      );\r\n                      Promise.all(queryPromises).then((responses: any) => {\r\n                        let errorlist: any[] = [];\r\n                        responses.map((response: any) => {\r\n                          if (response.status !== 200) {\r\n                            errorlist.push({\r\n                              id: response.data._id,\r\n                              result: \"failed\",\r\n                              message: response.statusText,\r\n                            });\r\n                          }\r\n                        });\r\n                        this.setState({ errorlist: errorlist });\r\n                      });\r\n                      this.setState({\r\n                        acklist: [],\r\n                        message: \"\",\r\n                        isDialogOpen: false,\r\n                      });\r\n                      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n                      this.props.reloadCurrentAlarms();\r\n                    }}\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#38761d\",\r\n                      border: \"1px solid #2986cc\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"3px 6px\",\r\n                      marginRight: \"5%\",\r\n                    }}\r\n                  >\r\n                    OK\r\n                  </Button>\r\n                  <Button\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#38761d\",\r\n                      border: \"1px solid #2986cc\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"3px 6px\",\r\n                      marginRight: \"5%\",\r\n                    }}\r\n                    onClick={() => this.setState({ isDialogOpen: false })}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            ) : this.state.currentdialog === \"info\" ? (\r\n              <Dialog\r\n                open={this.state.isDialogOpen}\r\n                onClose={() => this.setState({ isDialogOpen: false })}\r\n                PaperProps={{\r\n                  style: {\r\n                    minHeight: \"23vh\",\r\n                    minWidth: \"50vw\",\r\n                    height: this.state.isexpand ? \"60vh\" : \"30vh\",\r\n                    border: \"4px solid #38456a\",\r\n                    borderRadius: \"5px\",\r\n                    backgroundColor: \"#e8e8e8\",\r\n                    overflow: \"hidden\",\r\n                  },\r\n                }}\r\n              >\r\n                <DialogContent>\r\n                  <div\r\n                    style={{\r\n                      width: \"100%\",\r\n                      maxHeight: \"100%\",\r\n                    }}\r\n                  >\r\n                    <Card\r\n                      style={{\r\n                        overflow: \"auto\",\r\n                        width: \"100%\",\r\n                        maxHeight: \"100%\",\r\n                      }}\r\n                    >\r\n                      <CardContent\r\n                        style={{\r\n                          width: \"100%\",\r\n                          maxHeight: \"100%\",\r\n                        }}\r\n                      >\r\n                        <pre\r\n                          style={{\r\n                            whiteSpace: \"pre-wrap\",\r\n                            wordBreak: \"break-word\",\r\n                          }}\r\n                        >\r\n                          {typeof this.state.elsdata?.rowData === \"object\" ? (\r\n                            <span\r\n                              dangerouslySetInnerHTML={{\r\n                                __html: JSON.stringify(\r\n                                  {\r\n                                    ...this.state.elsdata?.rowData,\r\n                                    alarmComment: this.state.elsdata?.rowData\r\n                                      ?.alarmComment\r\n                                      ? this.state.elsdata?.rowData.alarmComment.replace(\r\n                                          /,/g,\r\n                                          \"<br/>    \"\r\n                                        ) // Replace commas with HTML <br/> tags\r\n                                      : \"\",\r\n                                  },\r\n                                  null,\r\n                                  2\r\n                                ),\r\n                              }}\r\n                            ></span>\r\n                          ) : (\r\n                            this.state.elsdata?.rowData\r\n                          )}\r\n                        </pre>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Tooltip disableInteractive title={\"Copy To ClipBoard\"}>\r\n                    <ContentCopyIcon\r\n                      style={{ paddingRight: \"5px\" }}\r\n                      onClick={() => {\r\n                        // Replace this with the actual text you want to copy\r\n                        navigator.clipboard\r\n                          .writeText(\r\n                            JSON.stringify(this.state.elsdata?.rowData, null, 2)\r\n                          )\r\n                          .then(() => {})\r\n                          .catch((err) => {\r\n                            console.error(\"Failed to copy text: \", err);\r\n                          });\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n\r\n                  <Button\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#38761d\",\r\n                      border: \"1px solid #2986cc\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"3px 6px\",\r\n                    }}\r\n                    onClick={() => this.setState({ isDialogOpen: false })}\r\n                  >\r\n                    Close\r\n                  </Button>\r\n                  {this.state.isexpand ? (\r\n                    <Tooltip disableInteractive title={\"Expand Less\"}>\r\n                      <ExpandLessIcon onClick={this.toggleExpand} />\r\n                    </Tooltip>\r\n                  ) : (\r\n                    <Tooltip disableInteractive title={\"Expand More\"}>\r\n                      <ExpandMoreIcon onClick={this.toggleExpand} />\r\n                    </Tooltip>\r\n                  )}\r\n                </DialogActions>\r\n              </Dialog>\r\n            ) : this.state.currentdialog === \"error\" ? (\r\n              <Dialog\r\n                open={this.state.isDialogOpen}\r\n                onClose={() => this.setState({ isDialogOpen: false })}\r\n                PaperProps={{\r\n                  style: {\r\n                    minHeight: \"23vh\",\r\n                    minWidth: \"50vw\",\r\n                    height: this.state.isexpand ? \"60vh\" : \"30vh\",\r\n                    border: \"4px solid #38456a\",\r\n                    borderRadius: \"5px\",\r\n                    backgroundColor: \"#e8e8e8\",\r\n                    overflow: \"hidden\",\r\n                  },\r\n                }}\r\n              >\r\n                <DialogContent>\r\n                  <div\r\n                    style={{\r\n                      width: \"100%\",\r\n                      maxHeight: \"100%\",\r\n                    }}\r\n                  >\r\n                    <Card\r\n                      style={{\r\n                        overflow: \"auto\",\r\n                        width: \"100%\",\r\n                        maxHeight: \"100%\",\r\n                      }}\r\n                    >\r\n                      <CardContent\r\n                        style={{\r\n                          width: \"100%\",\r\n                          maxHeight: \"100%\",\r\n                        }}\r\n                      >\r\n                        <div>\r\n                          <p>{this.state.errormessage}</p>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#38761d\",\r\n                      border: \"1px solid #2986cc\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"3px 6px\",\r\n                    }}\r\n                    onClick={() => this.setState({ isDialogOpen: false })}\r\n                  >\r\n                    Close\r\n                  </Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            ) : null}\r\n            <RefreshCurrentAlarmsDialog\r\n              mode={this.state.refreshCurrentAlarmsEditorMode}\r\n              onClose={this.onCloseRefreshCurrentAlarmsDialog}\r\n            />\r\n          </>\r\n        )}\r\n        {activePanelId === \"AlarmNotifications\" && (\r\n          <>\r\n            <FaultAlarmNotificationTable\r\n              stickyHeader\r\n              title={\"Fault\"}\r\n              tableId=\"alarm-notifications-table\"\r\n              idProperty=\"id\"\r\n              defaultSortColumn=\"timeStamp\"\r\n              defaultSortOrder=\"desc\"\r\n              rows={this.props.faultNotifications.faults}\r\n              asynchronus\r\n              columns={[\r\n                {\r\n                  property: \"severity\",\r\n                  title: \"Severity\",\r\n                  width: \"140px\",\r\n                  type: ColumnType.text,\r\n                },\r\n                {\r\n                  property: \"timeStamp\",\r\n                  title: \"Timestamp\",\r\n                  type: ColumnType.text,\r\n                },\r\n                {\r\n                  property: \"nodeName\",\r\n                  title: \"Node Name\",\r\n                  type: ColumnType.text,\r\n                },\r\n                {\r\n                  property: \"counter\",\r\n                  title: \"Count\",\r\n                  width: \"100px\",\r\n                  type: ColumnType.numeric,\r\n                },\r\n                {\r\n                  property: \"objectId\",\r\n                  title: \"Object Id\",\r\n                  type: ColumnType.text,\r\n                },\r\n                {\r\n                  property: \"problem\",\r\n                  title: \"Alarm Type\",\r\n                  type: ColumnType.text,\r\n                },\r\n                {\r\n                  property: \"Action\",\r\n                  title: \"\",\r\n                  type: ColumnType.custom,\r\n                  customControl: this.renderIcon,\r\n                },\r\n              ]}\r\n            />\r\n            {this.state.elsdata && this.state.elsdata != null ? (\r\n              <Dialog\r\n                open={this.state.isDialogOpen}\r\n                onClose={() => this.setState({ isDialogOpen: false })}\r\n                PaperProps={{\r\n                  style: {\r\n                    minHeight: \"23vh\",\r\n                    minWidth: \"50vw\",\r\n                    border: \"4px solid #38456a\",\r\n                    borderRadius: \"5px\",\r\n                    backgroundColor: \"#e8e8e8\",\r\n                  },\r\n                }}\r\n              >\r\n                <DialogContent>\r\n                  <div>\r\n                    <Typography variant=\"h6\">Event Details:</Typography>\r\n                    {this.state.elsdata && (\r\n                      <Card>\r\n                        <CardContent>\r\n                          <div>\r\n                            <strong>Severity:</strong>{\" \"}\r\n                            {this.state.elsdata.rowData.severity}\r\n                          </div>\r\n                          <div>\r\n                            <strong>Time Stamp:</strong>{\" \"}\r\n                            {this.state.elsdata.rowData.timestamp}\r\n                          </div>\r\n                          <div>\r\n                            <strong>Node Name:</strong>{\" \"}\r\n                            {this.state.elsdata.rowData.nodeId}\r\n                          </div>\r\n                          <div>\r\n                            <strong>Counter:</strong>{\" \"}\r\n                            {this.state.elsdata.rowData.counter}\r\n                          </div>\r\n                          <div>\r\n                            <strong>Object Id:</strong>{\" \"}\r\n                            {this.state.elsdata.rowData.objectId}\r\n                          </div>\r\n                          <div>\r\n                            <strong>Alarm Type:</strong>{\" \"}\r\n                            {this.state.elsdata.rowData.problem}\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    )}\r\n                  </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button\r\n                    onClick={() => {\r\n                      this.setState({ elsdata: null, isDialogOpen: false });\r\n                    }}\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#38761d\",\r\n                      border: \"1px solid #2986cc\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"3px 6px\",\r\n                      marginRight: \"5%\",\r\n                    }}\r\n                  >\r\n                    OK\r\n                  </Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            ) : null}\r\n          </>\r\n        )}\r\n\r\n        {activePanelId === \"AlarmLog\" && (\r\n          <>\r\n            <FaultTable\r\n              stickyHeader\r\n              idProperty={\"uniqueId\"}\r\n              title={\"Fault\"}\r\n              tableId=\"alarm-log-table\"\r\n              customActionButtons={[refreshAlarmLogAction]}\r\n              columns={[\r\n                \r\n                \r\n                { property: \"sourceName\", title: \"Node Name\", width: \"8%\" },\r\n                {\r\n                  property: \"alarmId\",\r\n                  title: \"Alarm Id\",\r\n                  type: ColumnType.text,\r\n                  width: \"7%\",\r\n                },\r\n                { property: \"eventSeverity\", title: \"Severity\", width: \"8%\" },\r\n                {\r\n                  property: \"lastEpochMicrosec\",\r\n                  title: \"Timestamp\",\r\n                  width: \"10%\",\r\n                },\r\n               \r\n                {\r\n                  property: \"sequence\",\r\n                  title: \"Sequence\",\r\n                  type: ColumnType.text,\r\n                  width: \"5%\",\r\n                },\r\n                {\r\n                  property: \"alarmInterfaceA\",\r\n                  title: \"Object Id\",\r\n                  width: \"auto\",\r\n                },\r\n                {\r\n                  property: \"specificProblem\",\r\n                  title: \"Alarm Details\",\r\n                  width: \"auto\",\r\n                },\r\n                { property: \"eventSourceType\", title: \"Source\", width: \"5%\" },\r\n                {\r\n                  property: \"Action\",\r\n                  title: \"\",\r\n                  type: ColumnType.custom,\r\n                  width: \"5%\",\r\n                  customControl: this.renderIcon,\r\n                },\r\n              ]}\r\n              {...this.props.alarmLogEntriesProperties}\r\n              {...this.props.alarmLogEntriesActions}\r\n            />\r\n            {this.state.elsdata && this.state.elsdata != null ? (\r\n              <Dialog\r\n                open={this.state.isDialogOpen}\r\n                onClose={() => this.setState({ isDialogOpen: false })}\r\n                PaperProps={{\r\n                  style: {\r\n                    minHeight: \"23vh\",\r\n                    minWidth: \"50vw\",\r\n                    height: this.state.isexpand ? \"60vh\" : \"30vh\",\r\n                    border: \"4px solid #38456a\",\r\n                    borderRadius: \"5px\",\r\n                    backgroundColor: \"#e8e8e8\",\r\n                    overflow: \"hidden\",\r\n                  },\r\n                }}\r\n              >\r\n                <DialogContent>\r\n                  <div\r\n                    style={{\r\n                      width: \"100%\",\r\n                      maxHeight: \"100%\",\r\n                    }}\r\n                  >\r\n                    <Card\r\n                      style={{\r\n                        overflow: \"auto\",\r\n                        width: \"100%\",\r\n                        maxHeight: \"100%\",\r\n                      }}\r\n                    >\r\n                      <CardContent\r\n                        style={{\r\n                          width: \"100%\",\r\n                          maxHeight: \"100%\",\r\n                        }}\r\n                      >\r\n                        <pre\r\n                          style={{\r\n                            whiteSpace: \"pre-wrap\",\r\n                            wordBreak: \"break-word\",\r\n                          }}\r\n                        >\r\n                          {typeof this.state.elsdata?.rowData === \"object\" ? (\r\n                            <span\r\n                              dangerouslySetInnerHTML={{\r\n                                __html: JSON.stringify(\r\n                                  {\r\n                                    ...this.state.elsdata?.rowData,\r\n                                    alarmComment: this.state.elsdata?.rowData\r\n                                      ?.alarmComment\r\n                                      ? this.state.elsdata?.rowData.alarmComment.replace(\r\n                                          /,/g,\r\n                                          \"<br/>    \"\r\n                                        ) // Replace commas with HTML <br/> tags\r\n                                      : \"\",\r\n                                  },\r\n                                  null,\r\n                                  2\r\n                                ),\r\n                              }}\r\n                            ></span>\r\n                          ) : (\r\n                            this.state.elsdata?.rowData\r\n                          )}\r\n                        </pre>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Tooltip disableInteractive title={\"Copy To ClipBoard\"}>\r\n                    <ContentCopyIcon\r\n                      style={{ paddingRight: \"5px\" }}\r\n                      onClick={() => {\r\n                        // Replace this with the actual text you want to copy\r\n                        navigator.clipboard\r\n                          .writeText(\r\n                            JSON.stringify(this.state.elsdata?.rowData, null, 2)\r\n                          )\r\n                          .then(() => {})\r\n                          .catch((err) => {\r\n                            console.error(\"Failed to copy text: \", err);\r\n                          });\r\n                      }}\r\n                    />\r\n                  </Tooltip>\r\n\r\n                  <Button\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      color: \"#38761d\",\r\n                      border: \"1px solid #2986cc\",\r\n                      borderRadius: \"4px\",\r\n                      padding: \"3px 6px\",\r\n                    }}\r\n                    onClick={() => this.setState({ isDialogOpen: false })}\r\n                  >\r\n                    Close\r\n                  </Button>\r\n                  {this.state.isexpand ? (\r\n                    <Tooltip disableInteractive title={\"Expand Less\"}>\r\n                      <ExpandLessIcon onClick={this.toggleExpand} />\r\n                    </Tooltip>\r\n                  ) : (\r\n                    <Tooltip disableInteractive title={\"Expand More\"}>\r\n                      <ExpandMoreIcon onClick={this.toggleExpand} />\r\n                    </Tooltip>\r\n                  )}\r\n                </DialogActions>\r\n              </Dialog>\r\n            ) : null}\r\n            <RefreshAlarmLogDialog\r\n              mode={this.state.refreshAlarmLogEditorMode}\r\n              onClose={this.onCloseRefreshAlarmLogDialog}\r\n            />\r\n          </>\r\n        )}\r\n        {this.state.clearAlarmDialogMode !==\r\n          ClearStuckAlarmsDialogMode.None && (\r\n          <ClearStuckAlarmsDialog\r\n            mode={this.state.clearAlarmDialogMode}\r\n            numberDevices={this.state.stuckAlarms.length}\r\n            stuckAlarms={this.state.stuckAlarms}\r\n            onClose={this.onDialogClose}\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  public componentDidMount() {\r\n    \r\n    if (this.props.panelId === null) {\r\n      //set default tab if none is set\r\n      this.onToggleTabs(\"CurrentAlarms\");\r\n    } else {\r\n      this.onToggleTabs(this.props.panelId);\r\n    }\r\n    if (this.props.panelId === \"CurrentAlarms\") {\r\n      \r\n      this.interval = setInterval(() => {\r\n        this.props.currentAlarmsActions.onRefresh(); // This function is called every 1 second\r\n      }, 10000);\r\n    }\r\n    if (this.props.panelId === \"AlarmLog\") {\r\n      \r\n      this.interval = setInterval(() => {\r\n        this.props.alarmLogEntriesActions.onRefresh(); // This function is called every 1 second\r\n      }, 10000);\r\n    }\r\n  }\r\n\r\n  // private renderIcon = (props: { rowData: Fault | FaultAlarmNotification }) => {\r\n  //   return (\r\n  //     <FontAwesomeIcon icon={faExclamationTriangle} />\r\n  //   );\r\n  // };\r\n\r\n  public componentDidUpdate(\r\n    prevProps: Readonly<FaultApplicationComponentProps>,\r\n    prevState: Readonly<FaultApplicationState>\r\n  ): void {\r\n    if (\r\n      prevProps.panelId !== this.props.panelId &&\r\n      this.props.panelId === \"CurrentAlarms\"\r\n    ) {\r\n      clearInterval(this.interval);\r\n      this.interval = setInterval(() => {\r\n        this.props.currentAlarmsActions.onRefresh(); // This function is called every 1 second\r\n      }, 10000);\r\n    }\r\n    if (\r\n      prevProps.panelId !== this.props.panelId &&\r\n      this.props.panelId === \"AlarmLog\"\r\n    ) {\r\n      clearInterval(this.interval);\r\n      this.interval = setInterval(() => {\r\n        this.props.alarmLogEntriesActions.onRefresh(); // This function is called every 1 second\r\n      }, 10000);\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval); // Cleanup to avoid memory leaks\r\n  }\r\n\r\n  private onCloseRefreshAlarmLogDialog = () => {\r\n    this.setState({\r\n      refreshAlarmLogEditorMode: RefreshAlarmLogDialogMode.None,\r\n    });\r\n  };\r\n\r\n  private onCloseRefreshCurrentAlarmsDialog = () => {\r\n    this.setState({\r\n      refreshCurrentAlarmsEditorMode: RefreshCurrentAlarmsDialogMode.None,\r\n    });\r\n  };\r\n}\r\n\r\nexport const FaultApplication = withStyles(styles)(\r\n  connect(mapProps, mapDisp)(FaultApplicationComponent)\r\n);\r\nexport default FaultApplication;\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE_dll_reference_app__;"],"sourceRoot":""}